
lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db58  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011cc  0800dc98  0800dc98  0001dc98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee64  0800ee64  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee64  0800ee64  0001ee64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee6c  0800ee6c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee6c  0800ee6c  0001ee6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee70  0800ee70  0001ee70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ee74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001e4  0800f058  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  0800f058  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ef8  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004523  00000000  00000000  00043106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00047630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00048f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000062ca  00000000  00000000  0004a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018700  00000000  00000000  0005094a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6dee  00000000  00000000  0006904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fe38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c8c  00000000  00000000  0010fe8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dc80 	.word	0x0800dc80

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800dc80 	.word	0x0800dc80

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a4 	b.w	8000fb8 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83e 	bl	8000cf8 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	4628      	mov	r0, r5
 8000c90:	4621      	mov	r1, r4
 8000c92:	2200      	movs	r2, #0
 8000c94:	2300      	movs	r3, #0
 8000c96:	f7ff ff09 	bl	8000aac <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x20>
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fc7f 	bl	80005c8 <__aeabi_dmul>
 8000cca:	f7ff ff55 	bl	8000b78 <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc00 	bl	80004d4 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fc76 	bl	80005c8 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff fab8 	bl	8000258 <__aeabi_dsub>
 8000ce8:	f7ff ff46 	bl	8000b78 <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	468e      	mov	lr, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f040 8082 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d0a:	428a      	cmp	r2, r1
 8000d0c:	4617      	mov	r7, r2
 8000d0e:	d946      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	b14a      	cbz	r2, 8000d2a <__udivmoddi4+0x32>
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa05 f302 	lsl.w	r3, r5, r2
 8000d1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d22:	4097      	lsls	r7, r2
 8000d24:	ea41 0e03 	orr.w	lr, r1, r3
 8000d28:	4094      	lsls	r4, r2
 8000d2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fbbe fcf8 	udiv	ip, lr, r8
 8000d34:	b2b9      	uxth	r1, r7
 8000d36:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000d3a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d3e:	fb0c f001 	mul.w	r0, ip, r1
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000d4c:	f080 8116 	bcs.w	8000f7c <__udivmoddi4+0x284>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f240 8113 	bls.w	8000f7c <__udivmoddi4+0x284>
 8000d56:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a1b      	subs	r3, r3, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f101 	mul.w	r1, r0, r1
 8000d70:	42a1      	cmp	r1, r4
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	f080 8101 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d7e:	42a1      	cmp	r1, r4
 8000d80:	f240 80fe 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	1a64      	subs	r4, r4, r1
 8000d8a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40d4      	lsrs	r4, r2
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d14f      	bne.n	8000e4a <__udivmoddi4+0x152>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2101      	movs	r1, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c25      	lsrs	r5, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	42ab      	cmp	r3, r5
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	197d      	adds	r5, r7, r5
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	42ab      	cmp	r3, r5
 8000dd6:	f200 80e7 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1aed      	subs	r5, r5, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000de4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000de8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d7 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7c0      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	f000 80af 	beq.w	8000f76 <__udivmoddi4+0x27e>
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	fab3 f183 	clz	r1, r3
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	d14b      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2c:	42ab      	cmp	r3, r5
 8000e2e:	d302      	bcc.n	8000e36 <__udivmoddi4+0x13e>
 8000e30:	4282      	cmp	r2, r0
 8000e32:	f200 80b7 	bhi.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e36:	1a84      	subs	r4, r0, r2
 8000e38:	eb65 0303 	sbc.w	r3, r5, r3
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	469e      	mov	lr, r3
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d0aa      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000e44:	e9c6 4e00 	strd	r4, lr, [r6]
 8000e48:	e7a7      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000e4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e52:	4097      	lsls	r7, r2
 8000e54:	fa20 f00c 	lsr.w	r0, r0, ip
 8000e58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000e60:	4318      	orrs	r0, r3
 8000e62:	fbbc f1fe 	udiv	r1, ip, lr
 8000e66:	0c05      	lsrs	r5, r0, #16
 8000e68:	fb0e cc11 	mls	ip, lr, r1, ip
 8000e6c:	fa1f f887 	uxth.w	r8, r7
 8000e70:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e74:	fb01 f308 	mul.w	r3, r1, r8
 8000e78:	42ab      	cmp	r3, r5
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	197d      	adds	r5, r7, r5
 8000e82:	f101 3cff 	add.w	ip, r1, #4294967295
 8000e86:	f080 808b 	bcs.w	8000fa0 <__udivmoddi4+0x2a8>
 8000e8a:	42ab      	cmp	r3, r5
 8000e8c:	f240 8088 	bls.w	8000fa0 <__udivmoddi4+0x2a8>
 8000e90:	3902      	subs	r1, #2
 8000e92:	443d      	add	r5, r7
 8000e94:	1aeb      	subs	r3, r5, r3
 8000e96:	b285      	uxth	r5, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	42ab      	cmp	r3, r5
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	197d      	adds	r5, r7, r5
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d271      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000eb4:	42ab      	cmp	r3, r5
 8000eb6:	d96f      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	443d      	add	r5, r7
 8000ebc:	1aeb      	subs	r3, r5, r3
 8000ebe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c1 0c20 	rsb	ip, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f70c 	lsr.w	r7, r2, ip
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 f40c 	lsr.w	r4, r0, ip
 8000ed4:	fa05 f301 	lsl.w	r3, r5, r1
 8000ed8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000edc:	fa25 f50c 	lsr.w	r5, r5, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	0c23      	lsrs	r3, r4, #16
 8000ee4:	fbb5 f9fe 	udiv	r9, r5, lr
 8000ee8:	fa1f f887 	uxth.w	r8, r7
 8000eec:	fb0e 5519 	mls	r5, lr, r9, r5
 8000ef0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000ef4:	fb09 fa08 	mul.w	sl, r9, r8
 8000ef8:	45aa      	cmp	sl, r5
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	fa00 f301 	lsl.w	r3, r0, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x21e>
 8000f04:	197d      	adds	r5, r7, r5
 8000f06:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0a:	d247      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000f0c:	45aa      	cmp	sl, r5
 8000f0e:	d945      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000f10:	f1a9 0902 	sub.w	r9, r9, #2
 8000f14:	443d      	add	r5, r7
 8000f16:	eba5 050a 	sub.w	r5, r5, sl
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f20:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f28:	fb00 f808 	mul.w	r8, r0, r8
 8000f2c:	45a0      	cmp	r8, r4
 8000f2e:	d907      	bls.n	8000f40 <__udivmoddi4+0x248>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f36:	d22d      	bcs.n	8000f94 <__udivmoddi4+0x29c>
 8000f38:	45a0      	cmp	r8, r4
 8000f3a:	d92b      	bls.n	8000f94 <__udivmoddi4+0x29c>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	443c      	add	r4, r7
 8000f40:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f44:	eba4 0408 	sub.w	r4, r4, r8
 8000f48:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4c:	454c      	cmp	r4, r9
 8000f4e:	46c6      	mov	lr, r8
 8000f50:	464d      	mov	r5, r9
 8000f52:	d319      	bcc.n	8000f88 <__udivmoddi4+0x290>
 8000f54:	d016      	beq.n	8000f84 <__udivmoddi4+0x28c>
 8000f56:	b15e      	cbz	r6, 8000f70 <__udivmoddi4+0x278>
 8000f58:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5c:	eb64 0405 	sbc.w	r4, r4, r5
 8000f60:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f64:	40ca      	lsrs	r2, r1
 8000f66:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6a:	40cc      	lsrs	r4, r1
 8000f6c:	e9c6 2400 	strd	r2, r4, [r6]
 8000f70:	2100      	movs	r1, #0
 8000f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f76:	4631      	mov	r1, r6
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e70e      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f7c:	46ac      	mov	ip, r5
 8000f7e:	e6ed      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e701      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f84:	4543      	cmp	r3, r8
 8000f86:	d2e6      	bcs.n	8000f56 <__udivmoddi4+0x25e>
 8000f88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f8c:	eb69 0507 	sbc.w	r5, r9, r7
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7e0      	b.n	8000f56 <__udivmoddi4+0x25e>
 8000f94:	4628      	mov	r0, r5
 8000f96:	e7d3      	b.n	8000f40 <__udivmoddi4+0x248>
 8000f98:	4660      	mov	r0, ip
 8000f9a:	e78f      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000f9c:	4681      	mov	r9, r0
 8000f9e:	e7ba      	b.n	8000f16 <__udivmoddi4+0x21e>
 8000fa0:	4661      	mov	r1, ip
 8000fa2:	e777      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e74b      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fac:	443d      	add	r5, r7
 8000fae:	e715      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	443c      	add	r4, r7
 8000fb4:	e726      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4906      	ldr	r1, [pc, #24]	; (8000ff0 <__NVIC_EnableIRQ+0x34>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001058:	f023 0218 	bic.w	r2, r3, #24
 800105c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4313      	orrs	r3, r2
 8001064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800107a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4313      	orrs	r3, r2
 8001088:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800108a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4013      	ands	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
	...

080010a4 <main>:

#endif


int main(void)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b0b1      	sub	sp, #196	; 0xc4
 80010a8:	af02      	add	r7, sp, #8

  HAL_Init();
 80010aa:	f000 ff4d 	bl	8001f48 <HAL_Init>

  SystemClock_Config();
 80010ae:	f000 f933 	bl	8001318 <SystemClock_Config>

  MX_USART1_UART_Init();
 80010b2:	f000 f98b 	bl	80013cc <MX_USART1_UART_Init>

  SubghzApp_Init();
 80010b6:	f000 fc09 	bl	80018cc <SubghzApp_Init>

  MX_GPIO_Init();
 80010ba:	f000 f9db 	bl	8001474 <MX_GPIO_Init>
  uint32_t feedback_timer = 0;
  int feedback_periode = 0 ;
  uint32_t pulse_tmr =  HAL_GetTick() ;

#else
  uart_driver_init() ;
 80010be:	f000 fddf 	bl	8001c80 <uart_driver_init>

  printf("Node transmitter\n") ;
 80010c2:	484c      	ldr	r0, [pc, #304]	; (80011f4 <main+0x150>)
 80010c4:	f008 fe84 	bl	8009dd0 <puts>

  ll_init(TRANSMITTER_ADDRESS) ;
 80010c8:	2034      	movs	r0, #52	; 0x34
 80010ca:	f007 fa55 	bl	8008578 <ll_init>
  u8 recv_data[50] ;


#endif

  uint32_t tx_monitor = HAL_GetTick() ;
 80010ce:	f000 ffa7 	bl	8002020 <HAL_GetTick>
 80010d2:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

  int len = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
*/


#else
	  // transmitter code
	  int len = uart_read_line(str) ;
 80010dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fe03 	bl	8001cec <uart_read_line>
 80010e6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

	  	  if(len>0)
 80010ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd44      	ble.n	800117c <main+0xd8>
	  	  {
	  		  str[len] = 0 ;
 80010f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80010f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010fa:	4413      	add	r3, r2
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]

	  		  printf("serial :%s$\n" , str);
 8001100:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001104:	4619      	mov	r1, r3
 8001106:	483c      	ldr	r0, [pc, #240]	; (80011f8 <main+0x154>)
 8001108:	f008 fdc8 	bl	8009c9c <iprintf>

	  		  u8 node_address ;
	  		  float seuil ;
	  		  int periode ;

	  		  if( parse_commande(str ,len,&node_address , &seuil , &periode ) == 0 )
 800110c:	1d39      	adds	r1, r7, #4
 800110e:	f107 020b 	add.w	r2, r7, #11
 8001112:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001116:	463b      	mov	r3, r7
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	460b      	mov	r3, r1
 800111c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001120:	f000 f874 	bl	800120c <parse_commande>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d128      	bne.n	800117c <main+0xd8>
	  		  {
	  			  printf("input adr %d , seuil %f ,periode %d\n" , node_address , seuil , periode);
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	461c      	mov	r4, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9f1 	bl	8000518 <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	9100      	str	r1, [sp, #0]
 800113e:	4621      	mov	r1, r4
 8001140:	482e      	ldr	r0, [pc, #184]	; (80011fc <main+0x158>)
 8001142:	f008 fdab 	bl	8009c9c <iprintf>

	  			  sprintf(data , "seuil :%0.2f , periode : %d",seuil , periode);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9e5 	bl	8000518 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001158:	9100      	str	r1, [sp, #0]
 800115a:	4929      	ldr	r1, [pc, #164]	; (8001200 <main+0x15c>)
 800115c:	f008 fe50 	bl	8009e00 <siprintf>

	  			  ll_send_to(node_address , (u8*)data , strlen(data) ,NULL);
 8001160:	7afc      	ldrb	r4, [r7, #11]
 8001162:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f814 	bl	8000194 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001174:	2300      	movs	r3, #0
 8001176:	4620      	mov	r0, r4
 8001178:	f007 faa0 	bl	80086bc <ll_send_to>
	  		  }

	  	  }

	  	  int recv_data_len = ll_get_recv_from( RECEIVER_ADDRESS , recv_data) ;
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	204d      	movs	r0, #77	; 0x4d
 8001184:	f007 fcd0 	bl	8008b28 <ll_get_recv_from>
 8001188:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

	  	  if(recv_data_len > 0)
 800118c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd0c      	ble.n	80011ae <main+0x10a>
	  	  {
	  		recv_data[recv_data_len ] = 0 ;
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800119c:	4413      	add	r3, r2
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]

	  		printf("receiver :%s\n" , recv_data) ;
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4619      	mov	r1, r3
 80011a8:	4816      	ldr	r0, [pc, #88]	; (8001204 <main+0x160>)
 80011aa:	f008 fd77 	bl	8009c9c <iprintf>
	  	  }


#endif

	  if(HAL_GetTick() - tx_monitor >= 5000 )
 80011ae:	f000 ff37 	bl	8002020 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80011be:	4293      	cmp	r3, r2
 80011c0:	d915      	bls.n	80011ee <main+0x14a>
	  {
		printf("tx buffer size :%d , rx buffer size :%d\n",get_tx_size(),get_rx_size() );
 80011c2:	f007 fa99 	bl	80086f8 <get_tx_size>
 80011c6:	4604      	mov	r4, r0
 80011c8:	f007 faa2 	bl	8008710 <get_rx_size>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <main+0x164>)
 80011d4:	f008 fd62 	bl	8009c9c <iprintf>
		tx_monitor = HAL_GetTick() ;
 80011d8:	f000 ff22 	bl	8002020 <HAL_GetTick>
 80011dc:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if(get_rx_size() == 10)
 80011e0:	f007 fa96 	bl	8008710 <get_rx_size>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b0a      	cmp	r3, #10
 80011e8:	d101      	bne.n	80011ee <main+0x14a>
		  {
			  ll_debug_Rx_list() ;
 80011ea:	f007 fd2b 	bl	8008c44 <ll_debug_Rx_list>
		  }
	  }

	  ll_process() ;
 80011ee:	f007 fcff 	bl	8008bf0 <ll_process>
  {
 80011f2:	e773      	b.n	80010dc <main+0x38>
 80011f4:	0800dc98 	.word	0x0800dc98
 80011f8:	0800dcac 	.word	0x0800dcac
 80011fc:	0800dcbc 	.word	0x0800dcbc
 8001200:	0800dce4 	.word	0x0800dce4
 8001204:	0800dd00 	.word	0x0800dd00
 8001208:	0800dd10 	.word	0x0800dd10

0800120c <parse_commande>:
  /* USER CODE END 3 */
}

#ifndef RECEIVER
int parse_commande(char *input ,int input_len , u8 * adress , float * seuil , int * periode )
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]

	char tmp[6] ;
	//commande format :config node %d,se %f,pe %d
	if(input_len < 21)
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2b14      	cmp	r3, #20
 800121e:	dc02      	bgt.n	8001226 <parse_commande+0x1a>
	{
		return -1 ;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	e06d      	b.n	8001302 <parse_commande+0xf6>
	}
	char *node = strstr(input , "config node ") ;
 8001226:	4939      	ldr	r1, [pc, #228]	; (800130c <parse_commande+0x100>)
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f008 ffef 	bl	800a20c <strstr>
 800122e:	6278      	str	r0, [r7, #36]	; 0x24
	if( node == NULL )
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <parse_commande+0x30>
	{
		return -1 ;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e062      	b.n	8001302 <parse_commande+0xf6>
	}
	node += 12 ;
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	330c      	adds	r3, #12
 8001240:	627b      	str	r3, [r7, #36]	; 0x24

	char * se = strstr(&input[12] , ",se ") ;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	330c      	adds	r3, #12
 8001246:	4932      	ldr	r1, [pc, #200]	; (8001310 <parse_commande+0x104>)
 8001248:	4618      	mov	r0, r3
 800124a:	f008 ffdf 	bl	800a20c <strstr>
 800124e:	6238      	str	r0, [r7, #32]
	if( se == NULL)
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <parse_commande+0x50>
	{
		return -1 ;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e052      	b.n	8001302 <parse_commande+0xf6>
	}

	memcpy(tmp ,node, se - node ) ;
 800125c:	6a3a      	ldr	r2, [r7, #32]
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	461a      	mov	r2, r3
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800126a:	4618      	mov	r0, r3
 800126c:	f007 ff5a 	bl	8009124 <memcpy>
	*adress = atoi(tmp) ;
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4618      	mov	r0, r3
 8001276:	f007 ff17 	bl	80090a8 <atoi>
 800127a:	4603      	mov	r3, r0
 800127c:	b2da      	uxtb	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	701a      	strb	r2, [r3, #0]
	//printf("node Address %d\n" ,*adress);
	se += 4 ;
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	3304      	adds	r3, #4
 8001286:	623b      	str	r3, [r7, #32]

	char * pe = strstr(&input[16] ,",pe" );
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3310      	adds	r3, #16
 800128c:	4921      	ldr	r1, [pc, #132]	; (8001314 <parse_commande+0x108>)
 800128e:	4618      	mov	r0, r3
 8001290:	f008 ffbc 	bl	800a20c <strstr>
 8001294:	61f8      	str	r0, [r7, #28]
	if( pe == NULL)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <parse_commande+0x96>
	{
		return -1 ;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	e02f      	b.n	8001302 <parse_commande+0xf6>
	}

	memcpy(tmp ,se, pe -se ) ;
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	6a39      	ldr	r1, [r7, #32]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f007 ff37 	bl	8009124 <memcpy>
	*seuil = atof(tmp) ;
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4618      	mov	r0, r3
 80012bc:	f007 fef1 	bl	80090a2 <atof>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc76 	bl	8000bb8 <__aeabi_d2f>
 80012cc:	4602      	mov	r2, r0
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	601a      	str	r2, [r3, #0]
	//printf("seuil %f\n" ,*seuil);
	pe +=4 ;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	61fb      	str	r3, [r7, #28]

	memcpy(tmp ,pe, (input +input_len) - pe ) ;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	441a      	add	r2, r3
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	69f9      	ldr	r1, [r7, #28]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f007 ff1a 	bl	8009124 <memcpy>
	*periode = atoi(tmp) ;
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 fed7 	bl	80090a8 <atoi>
 80012fa:	4602      	mov	r2, r0
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	601a      	str	r2, [r3, #0]
	//printf("periode %d\n" ,*pe);

	(void) tmp ;
	return 0 ;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	0800dd3c 	.word	0x0800dd3c
 8001310:	0800dd4c 	.word	0x0800dd4c
 8001314:	0800dd54 	.word	0x0800dd54

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b09a      	sub	sp, #104	; 0x68
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	2248      	movs	r2, #72	; 0x48
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f007 ff0a 	bl	8009140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800133e:	f001 f921 	bl	8002584 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fe80 	bl	8001048 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <SystemClock_Config+0xb0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <SystemClock_Config+0xb0>)
 8001352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <SystemClock_Config+0xb0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001364:	2324      	movs	r3, #36	; 0x24
 8001366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001368:	2381      	movs	r3, #129	; 0x81
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001370:	2300      	movs	r3, #0
 8001372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001374:	23b0      	movs	r3, #176	; 0xb0
 8001376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fba9 	bl	8002ad8 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800138c:	f000 f879 	bl	8001482 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001390:	234f      	movs	r3, #79	; 0x4f
 8001392:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	2102      	movs	r1, #2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 ff2c 	bl	800320c <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013ba:	f000 f862 	bl	8001482 <Error_Handler>
  }
}
 80013be:	bf00      	nop
 80013c0:	3768      	adds	r7, #104	; 0x68
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	58000400 	.word	0x58000400

080013cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0


  huart1.Instance = USART1;
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <MX_USART1_UART_Init+0xa0>)
 80013d2:	4a27      	ldr	r2, [pc, #156]	; (8001470 <MX_USART1_UART_Init+0xa4>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <MX_USART1_UART_Init+0xa0>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <MX_USART1_UART_Init+0xa0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_USART1_UART_Init+0xa0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_USART1_UART_Init+0xa0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_USART1_UART_Init+0xa0>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_USART1_UART_Init+0xa0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_USART1_UART_Init+0xa0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_USART1_UART_Init+0xa0>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_USART1_UART_Init+0xa0>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_USART1_UART_Init+0xa0>)
 8001410:	2200      	movs	r2, #0
 8001412:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001414:	4815      	ldr	r0, [pc, #84]	; (800146c <MX_USART1_UART_Init+0xa0>)
 8001416:	f003 f88e 	bl	8004536 <HAL_UART_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001420:	f000 f82f 	bl	8001482 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001424:	2100      	movs	r1, #0
 8001426:	4811      	ldr	r0, [pc, #68]	; (800146c <MX_USART1_UART_Init+0xa0>)
 8001428:	f003 fe7a 	bl	8005120 <HAL_UARTEx_SetTxFifoThreshold>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001432:	f000 f826 	bl	8001482 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001436:	2100      	movs	r1, #0
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_USART1_UART_Init+0xa0>)
 800143a:	f003 feaf 	bl	800519c <HAL_UARTEx_SetRxFifoThreshold>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001444:	f000 f81d 	bl	8001482 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <MX_USART1_UART_Init+0xa0>)
 800144a:	f003 fe31 	bl	80050b0 <HAL_UARTEx_DisableFifoMode>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001454:	f000 f815 	bl	8001482 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __NVIC_EnableIRQ(USART1_IRQn);
 8001458:	2024      	movs	r0, #36	; 0x24
 800145a:	f7ff fdaf 	bl	8000fbc <__NVIC_EnableIRQ>
  __NVIC_SetPriority(USART1_IRQn , 0x1);
 800145e:	2101      	movs	r1, #1
 8001460:	2024      	movs	r0, #36	; 0x24
 8001462:	f7ff fdc7 	bl	8000ff4 <__NVIC_SetPriority>
  /* USER CODE END USART1_Init 2 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000045c 	.word	0x2000045c
 8001470:	40013800 	.word	0x40013800

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	2002      	movs	r0, #2
 800147a:	f7ff fdfa 	bl	8001072 <LL_AHB2_GRP1_EnableClock>

  __NVIC_EnableIRQ(EXTI0_IRQn);
  __NVIC_SetPriority(EXTI0_IRQn , 0x01);
*/
#endif
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}

08001482 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001486:	b672      	cpsid	i
}
 8001488:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148a:	e7fe      	b.n	800148a <Error_Handler+0x8>

0800148c <sys_get_tick>:
{
	HAL_Delay(x);
}

extern u32  sys_get_tick()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	return HAL_GetTick() ;
 8001490:	f000 fdc6 	bl	8002020 <HAL_GetTick>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <sys_random>:

extern u8   sys_random()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	return get_random() % 255 ;
 80014a0:	f000 fa0a 	bl	80018b8 <get_random>
 80014a4:	4601      	mov	r1, r0
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <sys_random+0x20>)
 80014a8:	fba3 2301 	umull	r2, r3, r3, r1
 80014ac:	09da      	lsrs	r2, r3, #7
 80014ae:	4613      	mov	r3, r2
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	1aca      	subs	r2, r1, r3
 80014b6:	b2d3      	uxtb	r3, r2
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	80808081 	.word	0x80808081

080014c0 <__io_getchar>:

int __io_getchar(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	int ch ;
	HAL_UART_Receive(&huart1 , (uint8_t*)&ch , 1 ,0xffff);
 80014c6:	1d39      	adds	r1, r7, #4
 80014c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014cc:	2201      	movs	r2, #1
 80014ce:	4804      	ldr	r0, [pc, #16]	; (80014e0 <__io_getchar+0x20>)
 80014d0:	f003 f917 	bl	8004702 <HAL_UART_Receive>
	return ch ;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000045c 	.word	0x2000045c

080014e4 <__io_putchar>:

int __io_putchar(int ch)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 80014ec:	1d39      	adds	r1, r7, #4
 80014ee:	230a      	movs	r3, #10
 80014f0:	2201      	movs	r2, #1
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <__io_putchar+0x20>)
 80014f4:	f003 f86f 	bl	80045d6 <HAL_UART_Transmit>
	return ch ;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000045c 	.word	0x2000045c

08001508 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800150c:	f000 fc6c 	bl	8001de8 <BSP_RADIO_Init>
 8001510:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}

08001516 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fc9e 	bl	8001e64 <BSP_RADIO_ConfigRFSwitch>
 8001528:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8001536:	f000 fcf1 	bl	8001f1c <BSP_RADIO_GetTxConfig>
 800153a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}

08001540 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8001544:	f000 fcf1 	bl	8001f2a <BSP_RADIO_IsTCXO>
 8001548:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}

0800154e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8001552:	f000 fcf1 	bl	8001f38 <BSP_RADIO_IsDCDC>
 8001556:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}

0800155c <ring_init>:
#define RING_INC_ROLL_OVER(n, s, e) (((n)+1>=(e)) ? (s) : (n)+1)



Ring_t ring_init(uint8_t *buf, size_t len)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
    return RING_INIT(buf, len);
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	441a      	add	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6019      	str	r1, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	60da      	str	r2, [r3, #12]
}
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	3724      	adds	r7, #36	; 0x24
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <ring_isEmpty>:



bool ring_isEmpty(Ring_t ring)
{
 800158e:	b490      	push	{r4, r7}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	463c      	mov	r4, r7
 8001596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return ring.read == ring.write;
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	429a      	cmp	r2, r3
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc90      	pop	{r4, r7}
 80015b0:	4770      	bx	lr

080015b2 <ring_popAvailable>:
    else
        return (ring.end - ring.buf) - (ring.write - ring.read) - 1;
}

size_t ring_popAvailable(Ring_t ring)
{
 80015b2:	b490      	push	{r4, r7}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	463c      	mov	r4, r7
 80015ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(ring.read <= ring.write)
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d803      	bhi.n	80015ce <ring_popAvailable+0x1c>
        return ring.write - ring.read;
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	e006      	b.n	80015dc <ring_popAvailable+0x2a>
    else
        return (ring.end - ring.buf) - (ring.read - ring.write);
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	1ad2      	subs	r2, r2, r3
 80015d4:	68f9      	ldr	r1, [r7, #12]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1acb      	subs	r3, r1, r3
 80015da:	1ad3      	subs	r3, r2, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc90      	pop	{r4, r7}
 80015e4:	4770      	bx	lr

080015e6 <ring_pushOver>:
    
    return 0;
}

bool ring_pushOver(Ring_t *ring, uint8_t data)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70fb      	strb	r3, [r7, #3]
    //push without hesitation
    *ring->write = data;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	701a      	strb	r2, [r3, #0]
    ring->write = RING_INC_ROLL_OVER(ring->write, ring->buf, ring->end);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	d302      	bcc.n	800160e <ring_pushOver+0x28>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	e002      	b.n	8001614 <ring_pushOver+0x2e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	3301      	adds	r3, #1
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6093      	str	r3, [r2, #8]
    
    //advance read pointer if old data has been overwritten
    //so the buffer doesn't look empty (write==read)
    if(ring->read == ring->write)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	429a      	cmp	r2, r3
 8001622:	d110      	bne.n	8001646 <ring_pushOver+0x60>
    {
        ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	d302      	bcc.n	8001638 <ring_pushOver+0x52>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e002      	b.n	800163e <ring_pushOver+0x58>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	3301      	adds	r3, #1
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	60d3      	str	r3, [r2, #12]
        return 1;
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <ring_pushOver+0x62>
    }
    
    return 0;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <ring_pop>:


bool ring_pop(Ring_t *ring, uint8_t *data)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
    if(ring_isEmpty(*ring))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001660:	f7ff ff95 	bl	800158e <ring_isEmpty>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <ring_pop+0x1c>
        return 1;
 800166a:	2301      	movs	r3, #1
 800166c:	e014      	b.n	8001698 <ring_pop+0x46>
    
    *data = *ring->read;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	701a      	strb	r2, [r3, #0]
    ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	d302      	bcc.n	800168c <ring_pop+0x3a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	e002      	b.n	8001692 <ring_pop+0x40>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	3301      	adds	r3, #1
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	60d3      	str	r3, [r2, #12]
    
    return 0;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <LL_AHB2_GRP1_EnableClock>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c4:	68fb      	ldr	r3, [r7, #12]
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b096      	sub	sp, #88	; 0x58
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2238      	movs	r2, #56	; 0x38
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f007 fd07 	bl	8009140 <memset>
  if(huart->Instance==USART1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <HAL_UART_MspInit+0x94>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d12d      	bne.n	8001798 <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800173c:	2301      	movs	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001740:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001744:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4618      	mov	r0, r3
 800174c:	f002 f904 	bl	8003958 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001756:	f7ff fe94 	bl	8001482 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800175a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800175e:	f7ff ffb7 	bl	80016d0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2002      	movs	r0, #2
 8001764:	f7ff ff9c 	bl	80016a0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001768:	23c0      	movs	r3, #192	; 0xc0
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001778:	2307      	movs	r3, #7
 800177a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001780:	4619      	mov	r1, r3
 8001782:	4808      	ldr	r0, [pc, #32]	; (80017a4 <HAL_UART_MspInit+0x98>)
 8001784:	f000 fd86 	bl	8002294 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	2024      	movs	r0, #36	; 0x24
 800178e:	f000 fd4c 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001792:	2024      	movs	r0, #36	; 0x24
 8001794:	f000 fd63 	bl	800225e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3758      	adds	r7, #88	; 0x58
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40013800 	.word	0x40013800
 80017a4:	48000400 	.word	0x48000400

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 fc05 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1 , UART_IT_RXNE) == SET)
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <USART1_IRQHandler+0x2c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <USART1_IRQHandler+0x24>
	{
		uint8_t recv = huart1.Instance->RDR ;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <USART1_IRQHandler+0x2c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	71fb      	strb	r3, [r7, #7]
		uart_RX_interrupt_hanlder(recv) ;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fa52 	bl	8001cc0 <uart_RX_interrupt_hanlder>
	}

  //HAL_UART_IRQHandler(&huart1);

}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000045c 	.word	0x2000045c

08001828 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <SUBGHZ_Radio_IRQHandler+0x10>)
 800182e:	f002 fcc3 	bl	80041b8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200004ec 	.word	0x200004ec

0800183c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800184a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4313      	orrs	r3, r2
 8001852:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_SUBGHZ_Init+0x20>)
 8001872:	2208      	movs	r2, #8
 8001874:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_SUBGHZ_Init+0x20>)
 8001878:	f002 fa22 	bl	8003cc0 <HAL_SUBGHZ_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001882:	f7ff fdfe 	bl	8001482 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200004ec 	.word	0x200004ec

08001890 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff ffcf 	bl	800183c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2032      	movs	r0, #50	; 0x32
 80018a4:	f000 fcc1 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80018a8:	2032      	movs	r0, #50	; 0x32
 80018aa:	f000 fcd8 	bl	800225e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <get_random>:
  * @brief PingPong state machine implementation
  */

/* USER CODE END PFP */
uint32_t get_random()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	return Radio.Random() ;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <get_random+0x10>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4798      	blx	r3
 80018c2:	4603      	mov	r3, r0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	0800e1e4 	.word	0x0800e1e4

080018cc <SubghzApp_Init>:
/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  //printf( "\n\rPING PONG\n\r");
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 80018d2:	2300      	movs	r3, #0
 80018d4:	2201      	movs	r2, #1
 80018d6:	2101      	movs	r1, #1
 80018d8:	483d      	ldr	r0, [pc, #244]	; (80019d0 <SubghzApp_Init+0x104>)
 80018da:	f008 f9df 	bl	8009c9c <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <SubghzApp_Init+0x108>)
 80018e0:	4a3d      	ldr	r2, [pc, #244]	; (80019d8 <SubghzApp_Init+0x10c>)
 80018e2:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 80018e4:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <SubghzApp_Init+0x108>)
 80018e6:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <SubghzApp_Init+0x110>)
 80018e8:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <SubghzApp_Init+0x108>)
 80018ec:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <SubghzApp_Init+0x114>)
 80018ee:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80018f0:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <SubghzApp_Init+0x108>)
 80018f2:	4a3c      	ldr	r2, [pc, #240]	; (80019e4 <SubghzApp_Init+0x118>)
 80018f4:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <SubghzApp_Init+0x108>)
 80018f8:	4a3b      	ldr	r2, [pc, #236]	; (80019e8 <SubghzApp_Init+0x11c>)
 80018fa:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 80018fc:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <SubghzApp_Init+0x120>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4834      	ldr	r0, [pc, #208]	; (80019d4 <SubghzApp_Init+0x108>)
 8001902:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <SubghzApp_Init+0x120>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4839      	ldr	r0, [pc, #228]	; (80019f0 <SubghzApp_Init+0x124>)
 800190a:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 800190c:	4839      	ldr	r0, [pc, #228]	; (80019f4 <SubghzApp_Init+0x128>)
 800190e:	f008 f9c5 	bl	8009c9c <iprintf>
  printf("LORA_MODULATION\n\r");
 8001912:	4839      	ldr	r0, [pc, #228]	; (80019f8 <SubghzApp_Init+0x12c>)
 8001914:	f008 f9c2 	bl	8009c9c <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8001918:	217d      	movs	r1, #125	; 0x7d
 800191a:	4838      	ldr	r0, [pc, #224]	; (80019fc <SubghzApp_Init+0x130>)
 800191c:	f008 f9be 	bl	8009c9c <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8001920:	2107      	movs	r1, #7
 8001922:	4837      	ldr	r0, [pc, #220]	; (8001a00 <SubghzApp_Init+0x134>)
 8001924:	f008 f9ba 	bl	8009c9c <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8001928:	4b30      	ldr	r3, [pc, #192]	; (80019ec <SubghzApp_Init+0x120>)
 800192a:	69dc      	ldr	r4, [r3, #28]
 800192c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001930:	9308      	str	r3, [sp, #32]
 8001932:	2300      	movs	r3, #0
 8001934:	9307      	str	r3, [sp, #28]
 8001936:	2300      	movs	r3, #0
 8001938:	9306      	str	r3, [sp, #24]
 800193a:	2300      	movs	r3, #0
 800193c:	9305      	str	r3, [sp, #20]
 800193e:	2301      	movs	r3, #1
 8001940:	9304      	str	r3, [sp, #16]
 8001942:	2300      	movs	r3, #0
 8001944:	9303      	str	r3, [sp, #12]
 8001946:	2308      	movs	r3, #8
 8001948:	9302      	str	r3, [sp, #8]
 800194a:	2301      	movs	r3, #1
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	2307      	movs	r3, #7
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2300      	movs	r3, #0
 8001954:	2200      	movs	r2, #0
 8001956:	2114      	movs	r1, #20
 8001958:	2001      	movs	r0, #1
 800195a:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <SubghzApp_Init+0x120>)
 800195e:	699c      	ldr	r4, [r3, #24]
 8001960:	2301      	movs	r3, #1
 8001962:	9309      	str	r3, [sp, #36]	; 0x24
 8001964:	2300      	movs	r3, #0
 8001966:	9308      	str	r3, [sp, #32]
 8001968:	2300      	movs	r3, #0
 800196a:	9307      	str	r3, [sp, #28]
 800196c:	2300      	movs	r3, #0
 800196e:	9306      	str	r3, [sp, #24]
 8001970:	2301      	movs	r3, #1
 8001972:	9305      	str	r3, [sp, #20]
 8001974:	2300      	movs	r3, #0
 8001976:	9304      	str	r3, [sp, #16]
 8001978:	2300      	movs	r3, #0
 800197a:	9303      	str	r3, [sp, #12]
 800197c:	2305      	movs	r3, #5
 800197e:	9302      	str	r3, [sp, #8]
 8001980:	2308      	movs	r3, #8
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	2300      	movs	r3, #0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2301      	movs	r3, #1
 800198a:	2207      	movs	r2, #7
 800198c:	2100      	movs	r1, #0
 800198e:	2001      	movs	r0, #1
 8001990:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <SubghzApp_Init+0x120>)
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	21ff      	movs	r1, #255	; 0xff
 8001998:	2001      	movs	r0, #1
 800199a:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <SubghzApp_Init+0x120>)
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	4798      	blx	r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	0d9b      	lsrs	r3, r3, #22
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <SubghzApp_Init+0x138>)
 80019aa:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	2100      	movs	r1, #0
 80019b0:	4815      	ldr	r0, [pc, #84]	; (8001a08 <SubghzApp_Init+0x13c>)
 80019b2:	f007 fbc5 	bl	8009140 <memset>

  //printf( "rand=%ld\n\r", random_delay);
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <SubghzApp_Init+0x120>)
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <SubghzApp_Init+0x138>)
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 80019c2:	4610      	mov	r0, r2
 80019c4:	4798      	blx	r3

}
 80019c6:	bf00      	nop
 80019c8:	3704      	adds	r7, #4
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd90      	pop	{r4, r7, pc}
 80019ce:	bf00      	nop
 80019d0:	0800dd58 	.word	0x0800dd58
 80019d4:	20000200 	.word	0x20000200
 80019d8:	08001a0d 	.word	0x08001a0d
 80019dc:	08001a25 	.word	0x08001a25
 80019e0:	08001a5d 	.word	0x08001a5d
 80019e4:	08001a79 	.word	0x08001a79
 80019e8:	08001a95 	.word	0x08001a95
 80019ec:	0800e1e4 	.word	0x0800e1e4
 80019f0:	33bca100 	.word	0x33bca100
 80019f4:	0800dd74 	.word	0x0800dd74
 80019f8:	0800dd88 	.word	0x0800dd88
 80019fc:	0800dd9c 	.word	0x0800dd9c
 8001a00:	0800ddb0 	.word	0x0800ddb0
 8001a04:	20000320 	.word	0x20000320
 8001a08:	20000220 	.word	0x20000220

08001a0c <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */

  ll_set_transmition_done() ;
 8001a10:	f007 f93e 	bl	8008c90 <ll_set_transmition_done>
  //State_transiton_tx_done() ;
  /* Update the State of the FSM*/
  //State = TX;
  printf( "OnTxDone\n\r");
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <OnTxDone+0x14>)
 8001a16:	f008 f941 	bl	8009c9c <iprintf>
#ifdef PROT_DEBUG
  printf( "OnTxDone\n\r");
#endif

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	0800ddc0 	.word	0x0800ddc0

08001a24 <OnRxDone>:



static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	4603      	mov	r3, r0
 8001a34:	817b      	strh	r3, [r7, #10]
 8001a36:	460b      	mov	r3, r1
 8001a38:	813b      	strh	r3, [r7, #8]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
#ifdef PROT_DEBUG
	printf("RxDone\n");
#endif
	printf("RxDone\n");
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <OnRxDone+0x34>)
 8001a40:	f008 f9c6 	bl	8009dd0 <puts>

	ll_receive(payload , size) ;
 8001a44:	897b      	ldrh	r3, [r7, #10]
 8001a46:	4619      	mov	r1, r3
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f006 ff25 	bl	8008898 <ll_receive>
	}

	RssiValue = rssi;
	*/

}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	0800ddcc 	.word	0x0800ddcc

08001a5c <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <OnTxTimeout+0x14>)
 8001a62:	f008 f91b 	bl	8009c9c <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <OnTxTimeout+0x18>)
 8001a68:	2204      	movs	r2, #4
 8001a6a:	701a      	strb	r2, [r3, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	0800ddd4 	.word	0x0800ddd4
 8001a74:	2000021c 	.word	0x2000021c

08001a78 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <OnRxTimeout+0x14>)
 8001a7e:	f008 f90d 	bl	8009c9c <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 8001a82:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <OnRxTimeout+0x18>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	0800dde4 	.word	0x0800dde4
 8001a90:	2000021c 	.word	0x2000021c

08001a94 <OnRxError>:

static void OnRxError(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <OnRxError+0x14>)
 8001a9a:	f008 f8ff 	bl	8009c9c <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 8001a9e:	4b03      	ldr	r3, [pc, #12]	; (8001aac <OnRxError+0x18>)
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	701a      	strb	r2, [r3, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	0800ddf4 	.word	0x0800ddf4
 8001aac:	2000021c 	.word	0x2000021c

08001ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <_kill>:

int _kill(int pid, int sig)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ac8:	f007 faf2 	bl	80090b0 <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2216      	movs	r2, #22
 8001ad0:	601a      	str	r2, [r3, #0]
	return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_exit>:

void _exit (int status)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffe7 	bl	8001abe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001af0:	e7fe      	b.n	8001af0 <_exit+0x12>

08001af2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e00a      	b.n	8001b1a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b04:	f7ff fcdc 	bl	80014c0 <__io_getchar>
 8001b08:	4601      	mov	r1, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbf0      	blt.n	8001b04 <_read+0x12>
	}

return len;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e009      	b.n	8001b52 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	60ba      	str	r2, [r7, #8]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fccc 	bl	80014e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbf1      	blt.n	8001b3e <_write+0x12>
	}
	return len;
 8001b5a:	687b      	ldr	r3, [r7, #4]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_close>:

int _close(int file)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <_isatty>:

int _isatty(int file)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <_sbrk+0x5c>)
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <_sbrk+0x60>)
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_sbrk+0x64>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <_sbrk+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d207      	bcs.n	8001c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf4:	f007 fa5c 	bl	80090b0 <__errno>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e009      	b.n	8001c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <_sbrk+0x64>)
 8001c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20008000 	.word	0x20008000
 8001c24:	00000400 	.word	0x00000400
 8001c28:	20000324 	.word	0x20000324
 8001c2c:	200005e8 	.word	0x200005e8

08001c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <set_NL_detection>:

bool NL_Detection = false ;


void set_NL_detection()
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
	NL_Detection = true ;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <set_NL_detection+0x14>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000328 	.word	0x20000328

08001c54 <clear_NL_detection>:

void clear_NL_detection()
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
	NL_Detection = false ;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <clear_NL_detection+0x14>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000328 	.word	0x20000328

08001c6c <get_NL_detection>:

bool get_NL_detection()
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	return NL_Detection ;
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <get_NL_detection+0x10>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20000328 	.word	0x20000328

08001c80 <uart_driver_init>:


void uart_driver_init()
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
	// here can add hardware initialisation and enable interrupt
	uart_fifo = ring_init(uart_rxbuffer , UART_BUFFER_LENGTH) ;
 8001c86:	4c0b      	ldr	r4, [pc, #44]	; (8001cb4 <uart_driver_init+0x34>)
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2264      	movs	r2, #100	; 0x64
 8001c8c:	490a      	ldr	r1, [pc, #40]	; (8001cb8 <uart_driver_init+0x38>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fc64 	bl	800155c <ring_init>
 8001c94:	463b      	mov	r3, r7
 8001c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//enable uart Rx-interrupt
	__HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <uart_driver_init+0x3c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <uart_driver_init+0x3c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	601a      	str	r2, [r3, #0]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	200004f8 	.word	0x200004f8
 8001cb8:	20000508 	.word	0x20000508
 8001cbc:	2000045c 	.word	0x2000045c

08001cc0 <uart_RX_interrupt_hanlder>:

void uart_RX_interrupt_hanlder(uint8_t rx)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
	if(rx == '\n')
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2b0a      	cmp	r3, #10
 8001cce:	d101      	bne.n	8001cd4 <uart_RX_interrupt_hanlder+0x14>
		set_NL_detection() ;
 8001cd0:	f7ff ffb4 	bl	8001c3c <set_NL_detection>

	ring_pushOver(&uart_fifo , rx) ;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <uart_RX_interrupt_hanlder+0x28>)
 8001cda:	f7ff fc84 	bl	80015e6 <ring_pushOver>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200004f8 	.word	0x200004f8

08001cec <uart_read_line>:

/**
 * read from uart_fifo until '\n'
 */
int uart_read_line(char * data)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

	if(get_NL_detection() == false)
 8001cf4:	f7ff ffba 	bl	8001c6c <get_NL_detection>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f083 0301 	eor.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <uart_read_line+0x1c>
		return 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e027      	b.n	8001d58 <uart_read_line+0x6c>

	int len = ring_popAvailable(uart_fifo)  ;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <uart_read_line+0x74>)
 8001d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0c:	f7ff fc51 	bl	80015b2 <ring_popAvailable>
 8001d10:	4603      	mov	r3, r0
 8001d12:	60bb      	str	r3, [r7, #8]

    if(len == 0 )
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <uart_read_line+0x32>
    	return 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e01c      	b.n	8001d58 <uart_read_line+0x6c>

    int i = 0 ;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]

    for( ; i< len ; i++)
 8001d22:	e012      	b.n	8001d4a <uart_read_line+0x5e>
    {
    	ring_pop(&uart_fifo , (uint8_t*)&data[i] ) ;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <uart_read_line+0x74>)
 8001d2e:	f7ff fc90 	bl	8001652 <ring_pop>
    	if(data[i] == '\n')
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d102      	bne.n	8001d44 <uart_read_line+0x58>
    	{
    		clear_NL_detection() ;
 8001d3e:	f7ff ff89 	bl	8001c54 <clear_NL_detection>
    		break ;
 8001d42:	e006      	b.n	8001d52 <uart_read_line+0x66>
    for( ; i< len ; i++)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3301      	adds	r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbe8      	blt.n	8001d24 <uart_read_line+0x38>
    	}
    }

    return i++ ;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	60fa      	str	r2, [r7, #12]

}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200004f8 	.word	0x200004f8

08001d64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d68:	f7ff ff62 	bl	8001c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <LoopForever+0xe>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <LoopForever+0x16>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d92:	f007 f993 	bl	80090bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d96:	f7ff f985 	bl	80010a4 <main>

08001d9a <LoopForever>:

LoopForever:
    b LoopForever
 8001d9a:	e7fe      	b.n	8001d9a <LoopForever>
  ldr   r0, =_estack
 8001d9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001da8:	0800ee74 	.word	0x0800ee74
  ldr r2, =_sbss
 8001dac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001db0:	200005e4 	.word	0x200005e4

08001db4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC_IRQHandler>

08001db6 <LL_AHB2_GRP1_EnableClock>:
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001dfc:	2004      	movs	r0, #4
 8001dfe:	f7ff ffda 	bl	8001db6 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001e02:	2310      	movs	r3, #16
 8001e04:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4812      	ldr	r0, [pc, #72]	; (8001e60 <BSP_RADIO_Init+0x78>)
 8001e18:	f000 fa3c 	bl	8002294 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	480e      	ldr	r0, [pc, #56]	; (8001e60 <BSP_RADIO_Init+0x78>)
 8001e26:	f000 fa35 	bl	8002294 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	480b      	ldr	r0, [pc, #44]	; (8001e60 <BSP_RADIO_Init+0x78>)
 8001e34:	f000 fa2e 	bl	8002294 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2120      	movs	r1, #32
 8001e3c:	4808      	ldr	r0, [pc, #32]	; (8001e60 <BSP_RADIO_Init+0x78>)
 8001e3e:	f000 fb89 	bl	8002554 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001e42:	2200      	movs	r2, #0
 8001e44:	2110      	movs	r1, #16
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <BSP_RADIO_Init+0x78>)
 8001e48:	f000 fb84 	bl	8002554 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2108      	movs	r1, #8
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <BSP_RADIO_Init+0x78>)
 8001e52:	f000 fb7f 	bl	8002554 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	48000800 	.word	0x48000800

08001e64 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d84b      	bhi.n	8001f0c <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001e74:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7a:	bf00      	nop
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001ead 	.word	0x08001ead
 8001e84:	08001ecd 	.word	0x08001ecd
 8001e88:	08001eed 	.word	0x08001eed
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2108      	movs	r1, #8
 8001e90:	4821      	ldr	r0, [pc, #132]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001e92:	f000 fb5f 	bl	8002554 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2110      	movs	r1, #16
 8001e9a:	481f      	ldr	r0, [pc, #124]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001e9c:	f000 fb5a 	bl	8002554 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2120      	movs	r1, #32
 8001ea4:	481c      	ldr	r0, [pc, #112]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ea6:	f000 fb55 	bl	8002554 <HAL_GPIO_WritePin>
      break;      
 8001eaa:	e030      	b.n	8001f0e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2108      	movs	r1, #8
 8001eb0:	4819      	ldr	r0, [pc, #100]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001eb2:	f000 fb4f 	bl	8002554 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2110      	movs	r1, #16
 8001eba:	4817      	ldr	r0, [pc, #92]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ebc:	f000 fb4a 	bl	8002554 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	4814      	ldr	r0, [pc, #80]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ec6:	f000 fb45 	bl	8002554 <HAL_GPIO_WritePin>
      break;
 8001eca:	e020      	b.n	8001f0e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2108      	movs	r1, #8
 8001ed0:	4811      	ldr	r0, [pc, #68]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ed2:	f000 fb3f 	bl	8002554 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	2110      	movs	r1, #16
 8001eda:	480f      	ldr	r0, [pc, #60]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001edc:	f000 fb3a 	bl	8002554 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ee6:	f000 fb35 	bl	8002554 <HAL_GPIO_WritePin>
      break;
 8001eea:	e010      	b.n	8001f0e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2108      	movs	r1, #8
 8001ef0:	4809      	ldr	r0, [pc, #36]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ef2:	f000 fb2f 	bl	8002554 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2110      	movs	r1, #16
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001efc:	f000 fb2a 	bl	8002554 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001f00:	2201      	movs	r2, #1
 8001f02:	2120      	movs	r1, #32
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001f06:	f000 fb25 	bl	8002554 <HAL_GPIO_WritePin>
      break;
 8001f0a:	e000      	b.n	8001f0e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001f0c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	48000800 	.word	0x48000800

08001f1c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f52:	2003      	movs	r0, #3
 8001f54:	f000 f95e 	bl	8002214 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f58:	f001 fb1c 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_Init+0x3c>)
 8001f60:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 f810 	bl	8001f88 <HAL_InitTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	71fb      	strb	r3, [r7, #7]
 8001f72:	e001      	b.n	8001f78 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f74:	f7ff fbc4 	bl	8001700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f78:	79fb      	ldrb	r3, [r7, #7]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_InitTick+0x6c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d024      	beq.n	8001fe6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f9c:	f001 fafa 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_InitTick+0x6c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 f960 	bl	800227a <HAL_SYSTICK_Config>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10f      	bne.n	8001fe0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	d809      	bhi.n	8001fda <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	f04f 30ff 	mov.w	r0, #4294967295
 8001fce:	f000 f92c 	bl	800222a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_InitTick+0x70>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e007      	b.n	8001fea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	e004      	b.n	8001fea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e001      	b.n	8001fea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_IncTick+0x1c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x20>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a03      	ldr	r2, [pc, #12]	; (800201c <HAL_IncTick+0x20>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	20000008 	.word	0x20000008
 800201c:	2000056c 	.word	0x2000056c

08002020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <HAL_GetTick+0x10>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	2000056c 	.word	0x2000056c

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff fff0 	bl	8002020 <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffe0 	bl	8002020 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008

0800207c <__NVIC_SetPriorityGrouping>:
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_GetPriorityGrouping>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4906      	ldr	r1, [pc, #24]	; (8002114 <__NVIC_EnableIRQ+0x34>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	; (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	; (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e0:	d301      	bcc.n	80021e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00f      	b.n	8002206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <SysTick_Config+0x40>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ee:	210f      	movs	r1, #15
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f7ff ff90 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <SysTick_Config+0x40>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <SysTick_Config+0x40>)
 8002200:	2207      	movs	r2, #7
 8002202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	e000e010 	.word	0xe000e010

08002214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff2d 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002238:	f7ff ff44 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 800223c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f7ff ff92 	bl	800216c <NVIC_EncodePriority>
 8002248:	4602      	mov	r2, r0
 800224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff61 	bl	8002118 <__NVIC_SetPriority>
}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff37 	bl	80020e0 <__NVIC_EnableIRQ>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffa4 	bl	80021d0 <SysTick_Config>
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a2:	e140      	b.n	8002526 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8132 	beq.w	8002520 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d005      	beq.n	80022d4 <HAL_GPIO_Init+0x40>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d130      	bne.n	8002336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230a:	2201      	movs	r2, #1
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0201 	and.w	r2, r3, #1
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b03      	cmp	r3, #3
 8002340:	d017      	beq.n	8002372 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d123      	bne.n	80023c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	6939      	ldr	r1, [r7, #16]
 80023c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0203 	and.w	r2, r3, #3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 808c 	beq.w	8002520 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002408:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <HAL_GPIO_Init+0x2b0>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	2207      	movs	r2, #7
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002432:	d00d      	beq.n	8002450 <HAL_GPIO_Init+0x1bc>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a44      	ldr	r2, [pc, #272]	; (8002548 <HAL_GPIO_Init+0x2b4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d007      	beq.n	800244c <HAL_GPIO_Init+0x1b8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a43      	ldr	r2, [pc, #268]	; (800254c <HAL_GPIO_Init+0x2b8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_GPIO_Init+0x1b4>
 8002444:	2302      	movs	r3, #2
 8002446:	e004      	b.n	8002452 <HAL_GPIO_Init+0x1be>
 8002448:	2307      	movs	r3, #7
 800244a:	e002      	b.n	8002452 <HAL_GPIO_Init+0x1be>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_GPIO_Init+0x1be>
 8002450:	2300      	movs	r3, #0
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	f002 0203 	and.w	r2, r2, #3
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	4093      	lsls	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002462:	4938      	ldr	r1, [pc, #224]	; (8002544 <HAL_GPIO_Init+0x2b0>)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002476:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002496:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800249e:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 80024a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80024c4:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800251a:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	f47f aeb7 	bne.w	80022a4 <HAL_GPIO_Init+0x10>
  }
}
 8002536:	bf00      	nop
 8002538:	bf00      	nop
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40010000 	.word	0x40010000
 8002548:	48000400 	.word	0x48000400
 800254c:	48000800 	.word	0x48000800
 8002550:	58000800 	.word	0x58000800

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002570:	e002      	b.n	8002578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
	...

08002584 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <HAL_PWR_EnableBkUpAccess+0x18>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a03      	ldr	r2, [pc, #12]	; (800259c <HAL_PWR_EnableBkUpAccess+0x18>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	58000400 	.word	0x58000400

080025a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_PWREx_GetVoltageRange+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	58000400 	.word	0x58000400

080025b8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c8:	d101      	bne.n	80025ce <LL_PWR_IsEnabledBkUpAccess+0x16>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	58000400 	.word	0x58000400

080025dc <LL_RCC_HSE_EnableTcxo>:
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_HSE_DisableTcxo>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002606:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002626:	d101      	bne.n	800262c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <LL_RCC_HSE_Enable>:
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_RCC_HSE_Disable>:
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <LL_RCC_HSE_IsReady>:
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002680:	d101      	bne.n	8002686 <LL_RCC_HSE_IsReady+0x18>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_RCC_HSE_IsReady+0x1a>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <LL_RCC_HSI_Enable>:
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <LL_RCC_HSI_Disable>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <LL_RCC_HSI_IsReady>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80026cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026da:	d101      	bne.n	80026e0 <LL_RCC_HSI_IsReady+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_RCC_HSI_IsReady+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <LL_RCC_HSI_SetCalibTrimming>:
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80026f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d101      	bne.n	800272a <LL_RCC_LSE_IsReady+0x18>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <LL_RCC_LSE_IsReady+0x1a>
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d101      	bne.n	800278c <LL_RCC_LSI_IsReady+0x18>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <LL_RCC_LSI_IsReady+0x1a>
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6013      	str	r3, [r2, #0]
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6013      	str	r3, [r2, #0]
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d101      	bne.n	80027e4 <LL_RCC_MSI_IsReady+0x16>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_RCC_MSI_IsReady+0x18>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d101      	bne.n	8002804 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002830:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028d6:	f023 020f 	bic.w	r2, r3, #15
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800292a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800299e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ac:	6013      	str	r3, [r2, #0]
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e4:	d101      	bne.n	80029ea <LL_RCC_PLL_IsReady+0x18>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_RCC_PLL_IsReady+0x1a>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0303 	and.w	r3, r3, #3
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a60:	d101      	bne.n	8002a66 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d101      	bne.n	8002a8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa6:	d101      	bne.n	8002aac <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ac8:	d101      	bne.n	8002ace <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e38a      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aea:	f7ff fece 	bl	800288a <LL_RCC_GetSysClkSource>
 8002aee:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af0:	f7ff ffa2 	bl	8002a38 <LL_RCC_PLL_GetMainSource>
 8002af4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80c9 	beq.w	8002c96 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x3e>
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d17b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d178      	bne.n	8002c08 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b16:	f7ff fe5a 	bl	80027ce <LL_RCC_MSI_IsReady>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_OscConfig+0x54>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e369      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x72>
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b48:	e006      	b.n	8002b58 <HAL_RCC_OscConfig+0x80>
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d222      	bcs.n	8002ba2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fd4f 	bl	8003604 <RCC_SetFlashLatencyFromMSIRange>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e347      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7a:	f043 0308 	orr.w	r3, r3, #8
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fe4e 	bl	800283c <LL_RCC_MSI_SetCalibTrimming>
 8002ba0:	e021      	b.n	8002be6 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bac:	f043 0308 	orr.w	r3, r3, #8
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fe35 	bl	800283c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fd14 	bl	8003604 <RCC_SetFlashLatencyFromMSIRange>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e30c      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002be6:	f000 fcd5 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4ab4      	ldr	r2, [pc, #720]	; (8002ec0 <HAL_RCC_OscConfig+0x3e8>)
 8002bee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bf0:	4bb4      	ldr	r3, [pc, #720]	; (8002ec4 <HAL_RCC_OscConfig+0x3ec>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff f9c7 	bl	8001f88 <HAL_InitTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d047      	beq.n	8002c94 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	e2fb      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d02c      	beq.n	8002c6a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c10:	f7ff fdc1 	bl	8002796 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fa04 	bl	8002020 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c1c:	f7ff fa00 	bl	8002020 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e2e8      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c2e:	f7ff fdce 	bl	80027ce <LL_RCC_MSI_IsReady>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f1      	beq.n	8002c1c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c42:	f043 0308 	orr.w	r3, r3, #8
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fdea 	bl	800283c <LL_RCC_MSI_SetCalibTrimming>
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c6a:	f7ff fda2 	bl	80027b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c6e:	f7ff f9d7 	bl	8002020 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c76:	f7ff f9d3 	bl	8002020 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e2bb      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c88:	f7ff fda1 	bl	80027ce <LL_RCC_MSI_IsReady>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f1      	bne.n	8002c76 <HAL_RCC_OscConfig+0x19e>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c94:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d05f      	beq.n	8002d62 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x1dc>
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d10d      	bne.n	8002cca <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d10a      	bne.n	8002cca <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	f7ff fcdb 	bl	800266e <LL_RCC_HSE_IsReady>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d050      	beq.n	8002d60 <HAL_RCC_OscConfig+0x288>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d14c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e29a      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x218>
 8002cea:	f7ff fca4 	bl	8002636 <LL_RCC_HSE_Enable>
 8002cee:	e00d      	b.n	8002d0c <HAL_RCC_OscConfig+0x234>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002cf8:	d104      	bne.n	8002d04 <HAL_RCC_OscConfig+0x22c>
 8002cfa:	f7ff fc6f 	bl	80025dc <LL_RCC_HSE_EnableTcxo>
 8002cfe:	f7ff fc9a 	bl	8002636 <LL_RCC_HSE_Enable>
 8002d02:	e003      	b.n	8002d0c <HAL_RCC_OscConfig+0x234>
 8002d04:	f7ff fca5 	bl	8002652 <LL_RCC_HSE_Disable>
 8002d08:	f7ff fc76 	bl	80025f8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d012      	beq.n	8002d3a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7ff f984 	bl	8002020 <HAL_GetTick>
 8002d18:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7ff f980 	bl	8002020 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e268      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d2e:	f7ff fc9e 	bl	800266e <LL_RCC_HSE_IsReady>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f1      	beq.n	8002d1c <HAL_RCC_OscConfig+0x244>
 8002d38:	e013      	b.n	8002d62 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7ff f971 	bl	8002020 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d42:	f7ff f96d 	bl	8002020 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b64      	cmp	r3, #100	; 0x64
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e255      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d54:	f7ff fc8b 	bl	800266e <LL_RCC_HSE_IsReady>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f1      	bne.n	8002d42 <HAL_RCC_OscConfig+0x26a>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d04b      	beq.n	8002e06 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_OscConfig+0x2a8>
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d113      	bne.n	8002da2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d110      	bne.n	8002da2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d80:	f7ff fca2 	bl	80026c8 <LL_RCC_HSI_IsReady>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2be>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e234      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fca5 	bl	80026ea <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da0:	e031      	b.n	8002e06 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d019      	beq.n	8002dde <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002daa:	f7ff fc71 	bl	8002690 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7ff f937 	bl	8002020 <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db6:	f7ff f933 	bl	8002020 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e21b      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002dc8:	f7ff fc7e 	bl	80026c8 <LL_RCC_HSI_IsReady>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f1      	beq.n	8002db6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fc87 	bl	80026ea <LL_RCC_HSI_SetCalibTrimming>
 8002ddc:	e013      	b.n	8002e06 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	f7ff fc65 	bl	80026ac <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7ff f91d 	bl	8002020 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dea:	f7ff f919 	bl	8002020 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e201      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dfc:	f7ff fc64 	bl	80026c8 <LL_RCC_HSI_IsReady>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f1      	bne.n	8002dea <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d06e      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d056      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e22:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d031      	beq.n	8002e96 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e1da      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002e54:	f7ff fc7e 	bl	8002754 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e58:	f7ff f8e2 	bl	8002020 <HAL_GetTick>
 8002e5c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e60:	f7ff f8de 	bl	8002020 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b11      	cmp	r3, #17
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1c6      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e72:	f7ff fc7f 	bl	8002774 <LL_RCC_LSI_IsReady>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f1      	bne.n	8002e60 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e84:	f023 0210 	bic.w	r2, r3, #16
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	f7ff fc4d 	bl	8002734 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7ff f8c1 	bl	8002020 <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea2:	f7ff f8bd 	bl	8002020 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b11      	cmp	r3, #17
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1a5      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002eb4:	f7ff fc5e 	bl	8002774 <LL_RCC_LSI_IsReady>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f1      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x3ca>
 8002ebe:	e017      	b.n	8002ef0 <HAL_RCC_OscConfig+0x418>
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec8:	f7ff fc44 	bl	8002754 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7ff f8a8 	bl	8002020 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7ff f8a4 	bl	8002020 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b11      	cmp	r3, #17
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e18c      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ee6:	f7ff fc45 	bl	8002774 <LL_RCC_LSI_IsReady>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f1      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80d8 	beq.w	80030ae <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002efe:	f7ff fb5b 	bl	80025b8 <LL_PWR_IsEnabledBkUpAccess>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d113      	bne.n	8002f30 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f08:	f7ff fb3c 	bl	8002584 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0c:	f7ff f888 	bl	8002020 <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f14:	f7ff f884 	bl	8002020 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e16c      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f26:	f7ff fb47 	bl	80025b8 <LL_PWR_IsEnabledBkUpAccess>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f1      	beq.n	8002f14 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d07b      	beq.n	8003030 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b85      	cmp	r3, #133	; 0x85
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d109      	bne.n	8002f5c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7ff f860 	bl	8002020 <HAL_GetTick>
 8002f60:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7ff f852 	bl	8002020 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e138      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f8e:	f7ff fbc0 	bl	8002712 <LL_RCC_LSE_IsReady>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b81      	cmp	r3, #129	; 0x81
 8002f9e:	d003      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b85      	cmp	r3, #133	; 0x85
 8002fa6:	d121      	bne.n	8002fec <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7ff f83a 	bl	8002020 <HAL_GetTick>
 8002fac:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7ff f82c 	bl	8002020 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e112      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0ec      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002fea:	e060      	b.n	80030ae <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7ff f818 	bl	8002020 <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7ff f80a 	bl	8002020 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0f0      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ec      	bne.n	8003008 <HAL_RCC_OscConfig+0x530>
 800302e:	e03e      	b.n	80030ae <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fe fff6 	bl	8002020 <HAL_GetTick>
 8003034:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe ffe8 	bl	8002020 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0ce      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ec      	bne.n	800304c <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7fe ffd5 	bl	8002020 <HAL_GetTick>
 8003076:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fe ffc7 	bl	8002020 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e0ad      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80030a4:	f7ff fb35 	bl	8002712 <LL_RCC_LSE_IsReady>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ef      	bne.n	800308e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80a3 	beq.w	80031fe <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d076      	beq.n	80031ac <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d14b      	bne.n	800315e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c6:	f7ff fc76 	bl	80029b6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe ffa9 	bl	8002020 <HAL_GetTick>
 80030ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe ffa5 	bl	8002020 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b0a      	cmp	r3, #10
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e08d      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80030e4:	f7ff fc75 	bl	80029d2 <LL_RCC_PLL_IsReady>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f1      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x730>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003106:	0212      	lsls	r2, r2, #8
 8003108:	4311      	orrs	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003114:	4311      	orrs	r1, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800311a:	430a      	orrs	r2, r1
 800311c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003120:	4313      	orrs	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	f7ff fc39 	bl	800299a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003136:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe ff72 	bl	8002020 <HAL_GetTick>
 800313c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe ff6e 	bl	8002020 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b0a      	cmp	r3, #10
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e056      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003152:	f7ff fc3e 	bl	80029d2 <LL_RCC_PLL_IsReady>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f1      	beq.n	8003140 <HAL_RCC_OscConfig+0x668>
 800315c:	e04f      	b.n	80031fe <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	f7ff fc2a 	bl	80029b6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800316c:	f023 0303 	bic.w	r3, r3, #3
 8003170:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800317c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003184:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fe ff4b 	bl	8002020 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe ff47 	bl	8002020 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b0a      	cmp	r3, #10
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e02f      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80031a0:	f7ff fc17 	bl	80029d2 <LL_RCC_PLL_IsReady>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f1      	bne.n	800318e <HAL_RCC_OscConfig+0x6b6>
 80031aa:	e028      	b.n	80031fe <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e023      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	f003 0203 	and.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d115      	bne.n	80031fa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	429a      	cmp	r2, r3
 80031da:	d10e      	bne.n	80031fa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	11c1808c 	.word	0x11c1808c

0800320c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e10f      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b89      	ldr	r3, [pc, #548]	; (8003448 <HAL_RCC_ClockConfig+0x23c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d91b      	bls.n	8003266 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b86      	ldr	r3, [pc, #536]	; (8003448 <HAL_RCC_ClockConfig+0x23c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 0207 	bic.w	r2, r3, #7
 8003236:	4984      	ldr	r1, [pc, #528]	; (8003448 <HAL_RCC_ClockConfig+0x23c>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323e:	f7fe feef 	bl	8002020 <HAL_GetTick>
 8003242:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003244:	e008      	b.n	8003258 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003246:	f7fe feeb 	bl	8002020 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0f3      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003258:	4b7b      	ldr	r3, [pc, #492]	; (8003448 <HAL_RCC_ClockConfig+0x23c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d1ef      	bne.n	8003246 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fb12 	bl	80028a0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800327c:	f7fe fed0 	bl	8002020 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003284:	f7fe fecc 	bl	8002020 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e0d4      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003296:	f7ff fbda 	bl	8002a4e <LL_RCC_IsActiveFlag_HPRE>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f1      	beq.n	8003284 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d016      	beq.n	80032da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fb08 	bl	80028c6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032b6:	f7fe feb3 	bl	8002020 <HAL_GetTick>
 80032ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032be:	f7fe feaf 	bl	8002020 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0b7      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032d0:	f7ff fbce 	bl	8002a70 <LL_RCC_IsActiveFlag_SHDHPRE>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f1      	beq.n	80032be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fb01 	bl	80028f2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032f0:	f7fe fe96 	bl	8002020 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032f8:	f7fe fe92 	bl	8002020 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e09a      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800330a:	f7ff fbc3 	bl	8002a94 <LL_RCC_IsActiveFlag_PPRE1>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f1      	beq.n	80032f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d017      	beq.n	8003350 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff faf6 	bl	8002918 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800332c:	f7fe fe78 	bl	8002020 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003334:	f7fe fe74 	bl	8002020 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e07c      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003346:	f7ff fbb6 	bl	8002ab6 <LL_RCC_IsActiveFlag_PPRE2>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f1      	beq.n	8003334 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d043      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d106      	bne.n	8003372 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003364:	f7ff f983 	bl	800266e <LL_RCC_HSE_IsReady>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d11e      	bne.n	80033ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e066      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d106      	bne.n	8003388 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800337a:	f7ff fb2a 	bl	80029d2 <LL_RCC_PLL_IsReady>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d113      	bne.n	80033ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e05b      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003390:	f7ff fa1d 	bl	80027ce <LL_RCC_MSI_IsReady>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e050      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800339e:	f7ff f993 	bl	80026c8 <LL_RCC_HSI_IsReady>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e049      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fa57 	bl	8002864 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b6:	f7fe fe33 	bl	8002020 <HAL_GetTick>
 80033ba:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033be:	f7fe fe2f 	bl	8002020 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e035      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d4:	f7ff fa59 	bl	800288a <LL_RCC_GetSysClkSource>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1ec      	bne.n	80033be <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_RCC_ClockConfig+0x23c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d21b      	bcs.n	800342a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RCC_ClockConfig+0x23c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 0207 	bic.w	r2, r3, #7
 80033fa:	4913      	ldr	r1, [pc, #76]	; (8003448 <HAL_RCC_ClockConfig+0x23c>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003402:	f7fe fe0d 	bl	8002020 <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003408:	e008      	b.n	800341c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800340a:	f7fe fe09 	bl	8002020 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e011      	b.n	8003440 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x23c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d1ef      	bne.n	800340a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800342a:	f000 f8b3 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 800342e:	4603      	mov	r3, r0
 8003430:	4a06      	ldr	r2, [pc, #24]	; (800344c <HAL_RCC_ClockConfig+0x240>)
 8003432:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_ClockConfig+0x244>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fda5 	bl	8001f88 <HAL_InitTick>
 800343e:	4603      	mov	r3, r0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	58004000 	.word	0x58004000
 800344c:	20000000 	.word	0x20000000
 8003450:	20000004 	.word	0x20000004

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	f7ff fa12 	bl	800288a <LL_RCC_GetSysClkSource>
 8003466:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003468:	f7ff fae6 	bl	8002a38 <LL_RCC_PLL_GetMainSource>
 800346c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x2c>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d139      	bne.n	80034ee <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d136      	bne.n	80034ee <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003480:	f7ff f9b5 	bl	80027ee <LL_RCC_MSI_IsEnabledRangeSelect>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d115      	bne.n	80034b6 <HAL_RCC_GetSysClockFreq+0x62>
 800348a:	f7ff f9b0 	bl	80027ee <LL_RCC_MSI_IsEnabledRangeSelect>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_GetSysClockFreq+0x4e>
 8003494:	f7ff f9bb 	bl	800280e <LL_RCC_MSI_GetRange>
 8003498:	4603      	mov	r3, r0
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	e005      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x5a>
 80034a2:	f7ff f9bf 	bl	8002824 <LL_RCC_MSI_GetRangeAfterStandby>
 80034a6:	4603      	mov	r3, r0
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	4a36      	ldr	r2, [pc, #216]	; (8003588 <HAL_RCC_GetSysClockFreq+0x134>)
 80034b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b4:	e014      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x8c>
 80034b6:	f7ff f99a 	bl	80027ee <LL_RCC_MSI_IsEnabledRangeSelect>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d106      	bne.n	80034ce <HAL_RCC_GetSysClockFreq+0x7a>
 80034c0:	f7ff f9a5 	bl	800280e <LL_RCC_MSI_GetRange>
 80034c4:	4603      	mov	r3, r0
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	e005      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x86>
 80034ce:	f7ff f9a9 	bl	8002824 <LL_RCC_MSI_GetRangeAfterStandby>
 80034d2:	4603      	mov	r3, r0
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <HAL_RCC_GetSysClockFreq+0x134>)
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d115      	bne.n	8003514 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ec:	e012      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d102      	bne.n	80034fa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034f4:	4b25      	ldr	r3, [pc, #148]	; (800358c <HAL_RCC_GetSysClockFreq+0x138>)
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	e00c      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d109      	bne.n	8003514 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003500:	f7ff f888 	bl	8002614 <LL_RCC_HSE_IsEnabledDiv2>
 8003504:	4603      	mov	r3, r0
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_RCC_GetSysClockFreq+0x138>)
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e001      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003510:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003512:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003514:	f7ff f9b9 	bl	800288a <LL_RCC_GetSysClkSource>
 8003518:	4603      	mov	r3, r0
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d12f      	bne.n	800357e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800351e:	f7ff fa8b 	bl	8002a38 <LL_RCC_PLL_GetMainSource>
 8003522:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0xde>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d003      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0xe4>
 8003530:	e00d      	b.n	800354e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <HAL_RCC_GetSysClockFreq+0x138>)
 8003534:	60fb      	str	r3, [r7, #12]
        break;
 8003536:	e00d      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003538:	f7ff f86c 	bl	8002614 <LL_RCC_HSE_IsEnabledDiv2>
 800353c:	4603      	mov	r3, r0
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_GetSysClockFreq+0x138>)
 8003544:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003546:	e005      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_RCC_GetSysClockFreq+0x13c>)
 800354a:	60fb      	str	r3, [r7, #12]
        break;
 800354c:	e002      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	60fb      	str	r3, [r7, #12]
        break;
 8003552:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003554:	f7ff fa4e 	bl	80029f4 <LL_RCC_PLL_GetN>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	fb03 f402 	mul.w	r4, r3, r2
 8003560:	f7ff fa5f 	bl	8002a22 <LL_RCC_PLL_GetDivider>
 8003564:	4603      	mov	r3, r0
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	3301      	adds	r3, #1
 800356a:	fbb4 f4f3 	udiv	r4, r4, r3
 800356e:	f7ff fa4d 	bl	8002a0c <LL_RCC_PLL_GetR>
 8003572:	4603      	mov	r3, r0
 8003574:	0f5b      	lsrs	r3, r3, #29
 8003576:	3301      	adds	r3, #1
 8003578:	fbb4 f3f3 	udiv	r3, r4, r3
 800357c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800357e:	697b      	ldr	r3, [r7, #20]
}
 8003580:	4618      	mov	r0, r3
 8003582:	371c      	adds	r7, #28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd90      	pop	{r4, r7, pc}
 8003588:	0800e17c 	.word	0x0800e17c
 800358c:	00f42400 	.word	0x00f42400
 8003590:	01e84800 	.word	0x01e84800

08003594 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003594:	b598      	push	{r3, r4, r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003598:	f7ff ff5c 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 800359c:	4604      	mov	r4, r0
 800359e:	f7ff f9ce 	bl	800293e <LL_RCC_GetAHBPrescaler>
 80035a2:	4603      	mov	r3, r0
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	4a03      	ldr	r2, [pc, #12]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80035ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd98      	pop	{r3, r4, r7, pc}
 80035b8:	0800e11c 	.word	0x0800e11c

080035bc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b598      	push	{r3, r4, r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80035c0:	f7ff ffe8 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035c4:	4604      	mov	r4, r0
 80035c6:	f7ff f9d2 	bl	800296e <LL_RCC_GetAPB1Prescaler>
 80035ca:	4603      	mov	r3, r0
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	4a03      	ldr	r2, [pc, #12]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd98      	pop	{r3, r4, r7, pc}
 80035dc:	0800e15c 	.word	0x0800e15c

080035e0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e0:	b598      	push	{r3, r4, r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80035e4:	f7ff ffd6 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035e8:	4604      	mov	r4, r0
 80035ea:	f7ff f9cb 	bl	8002984 <LL_RCC_GetAPB2Prescaler>
 80035ee:	4603      	mov	r3, r0
 80035f0:	0adb      	lsrs	r3, r3, #11
 80035f2:	4a03      	ldr	r2, [pc, #12]	; (8003600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd98      	pop	{r3, r4, r7, pc}
 8003600:	0800e15c 	.word	0x0800e15c

08003604 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	4a10      	ldr	r2, [pc, #64]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800361c:	f7ff f99a 	bl	8002954 <LL_RCC_GetAHB3Prescaler>
 8003620:	4603      	mov	r3, r0
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	4a0c      	ldr	r2, [pc, #48]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4a09      	ldr	r2, [pc, #36]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0c9c      	lsrs	r4, r3, #18
 8003640:	f7fe ffae 	bl	80025a0 <HAL_PWREx_GetVoltageRange>
 8003644:	4603      	mov	r3, r0
 8003646:	4619      	mov	r1, r3
 8003648:	4620      	mov	r0, r4
 800364a:	f000 f80b 	bl	8003664 <RCC_SetFlashLatency>
 800364e:	4603      	mov	r3, r0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bd90      	pop	{r4, r7, pc}
 8003658:	0800e17c 	.word	0x0800e17c
 800365c:	0800e11c 	.word	0x0800e11c
 8003660:	431bde83 	.word	0x431bde83

08003664 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800366e:	4a3c      	ldr	r2, [pc, #240]	; (8003760 <RCC_SetFlashLatency+0xfc>)
 8003670:	f107 0320 	add.w	r3, r7, #32
 8003674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003678:	6018      	str	r0, [r3, #0]
 800367a:	3304      	adds	r3, #4
 800367c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800367e:	4a39      	ldr	r2, [pc, #228]	; (8003764 <RCC_SetFlashLatency+0x100>)
 8003680:	f107 0318 	add.w	r3, r7, #24
 8003684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003688:	6018      	str	r0, [r3, #0]
 800368a:	3304      	adds	r3, #4
 800368c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800368e:	4a36      	ldr	r2, [pc, #216]	; (8003768 <RCC_SetFlashLatency+0x104>)
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	ca07      	ldmia	r2, {r0, r1, r2}
 8003696:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800369a:	2300      	movs	r3, #0
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a4:	d11d      	bne.n	80036e2 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
 80036aa:	e016      	b.n	80036da <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036b4:	4413      	add	r3, r2
 80036b6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036ba:	461a      	mov	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4293      	cmp	r3, r2
 80036c0:	d808      	bhi.n	80036d4 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036ca:	4413      	add	r3, r2
 80036cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80036d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036d2:	e023      	b.n	800371c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	3301      	adds	r3, #1
 80036d8:	633b      	str	r3, [r7, #48]	; 0x30
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d9e5      	bls.n	80036ac <RCC_SetFlashLatency+0x48>
 80036e0:	e01c      	b.n	800371c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e6:	e016      	b.n	8003716 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036f0:	4413      	add	r3, r2
 80036f2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80036f6:	461a      	mov	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d808      	bhi.n	8003710 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003706:	4413      	add	r3, r2
 8003708:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800370e:	e005      	b.n	800371c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003712:	3301      	adds	r3, #1
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	2b02      	cmp	r3, #2
 800371a:	d9e5      	bls.n	80036e8 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <RCC_SetFlashLatency+0x108>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 0207 	bic.w	r2, r3, #7
 8003724:	4911      	ldr	r1, [pc, #68]	; (800376c <RCC_SetFlashLatency+0x108>)
 8003726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800372c:	f7fe fc78 	bl	8002020 <HAL_GetTick>
 8003730:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003732:	e008      	b.n	8003746 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003734:	f7fe fc74 	bl	8002020 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e007      	b.n	8003756 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <RCC_SetFlashLatency+0x108>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003750:	429a      	cmp	r2, r3
 8003752:	d1ef      	bne.n	8003734 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3738      	adds	r7, #56	; 0x38
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	0800de34 	.word	0x0800de34
 8003764:	0800de3c 	.word	0x0800de3c
 8003768:	0800de44 	.word	0x0800de44
 800376c:	58004000 	.word	0x58004000

08003770 <LL_RCC_LSE_IsReady>:
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d101      	bne.n	8003788 <LL_RCC_LSE_IsReady+0x18>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <LL_RCC_LSE_IsReady+0x1a>
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <LL_RCC_SetUSARTClockSource>:
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	43db      	mvns	r3, r3
 80037a8:	401a      	ands	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <LL_RCC_SetI2SClockSource>:
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <LL_RCC_SetLPUARTClockSource>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <LL_RCC_SetI2CClockSource>:
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003822:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800382e:	43db      	mvns	r3, r3
 8003830:	401a      	ands	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800383a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <LL_RCC_SetLPTIMClockSource>:
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	041b      	lsls	r3, r3, #16
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <LL_RCC_SetRNGClockSource>:
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <LL_RCC_SetADCClockSource>:
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <LL_RCC_SetRTCClockSource>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80038dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <LL_RCC_GetRTCClockSource>:
{
 80038fe:	b480      	push	{r7}
 8003900:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <LL_RCC_ForceBackupDomainReset>:
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800391a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003936:	b480      	push	{r7}
 8003938:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800394e:	bf00      	nop
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
	...

08003958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003964:	2300      	movs	r3, #0
 8003966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003968:	2300      	movs	r3, #0
 800396a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d058      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003978:	f7fe fe04 	bl	8002584 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800397c:	f7fe fb50 	bl	8002020 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003982:	e009      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fe fb4c 	bl	8002020 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	74fb      	strb	r3, [r7, #19]
        break;
 8003996:	e006      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003998:	4b7b      	ldr	r3, [pc, #492]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a4:	d1ee      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d13c      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80039ac:	f7ff ffa7 	bl	80038fe <LL_RCC_GetRTCClockSource>
 80039b0:	4602      	mov	r2, r0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d00f      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039c8:	f7ff ffa5 	bl	8003916 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039cc:	f7ff ffb3 	bl	8003936 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d014      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fe fb1c 	bl	8002020 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80039ea:	e00b      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fe fb18 	bl	8002020 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d902      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	74fb      	strb	r3, [r7, #19]
            break;
 8003a02:	e004      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003a04:	f7ff feb4 	bl	8003770 <LL_RCC_LSE_IsReady>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d1ee      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff5b 	bl	80038d4 <LL_RCC_SetRTCClockSource>
 8003a1e:	e004      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
 8003a24:	e001      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a26:	7cfb      	ldrb	r3, [r7, #19]
 8003a28:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fea9 	bl	8003792 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fe9e 	bl	8003792 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fec0 	bl	80037ec <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fee6 	bl	800384e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fedb 	bl	800384e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fed0 	bl	800384e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fea9 	bl	8003816 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fe9e 	bl	8003816 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fe93 	bl	8003816 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d011      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fe5e 	bl	80037c2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d010      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fea5 	bl	8003880 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d011      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fea3 	bl	80038aa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003b7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	58000400 	.word	0x58000400

08003b8c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b9c:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	58000400 	.word	0x58000400

08003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	58000400 	.word	0x58000400

08003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003be0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	58000400 	.word	0x58000400

08003bf4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bfe:	619a      	str	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	58000400 	.word	0x58000400

08003c0c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d101      	bne.n	8003c20 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	58000400 	.word	0x58000400

08003c30 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d101      	bne.n	8003c44 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	58000400 	.word	0x58000400

08003c54 <LL_RCC_RF_DisableReset>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <LL_RCC_IsRFUnderReset>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c88:	d101      	bne.n	8003c8e <LL_RCC_IsRFUnderReset+0x1a>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <LL_RCC_IsRFUnderReset+0x1c>
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <LL_EXTI_EnableIT_32_63+0x24>)
 8003ca2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003ca6:	4905      	ldr	r1, [pc, #20]	; (8003cbc <LL_EXTI_EnableIT_32_63+0x24>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	58000800 	.word	0x58000800

08003cc0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
    return status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	e04b      	b.n	8003d6e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	799b      	ldrb	r3, [r3, #6]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fdd0 	bl	8001890 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8003cf6:	f7ff ffad 	bl	8003c54 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <HAL_SUBGHZ_Init+0xb8>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	0cdb      	lsrs	r3, r3, #19
 8003d08:	2264      	movs	r2, #100	; 0x64
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	609a      	str	r2, [r3, #8]
      break;
 8003d20:	e007      	b.n	8003d32 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003d28:	f7ff ffa4 	bl	8003c74 <LL_RCC_IsRFUnderReset>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1ee      	bne.n	8003d10 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d32:	f7ff ff3f 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003d36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d3a:	f7ff ffad 	bl	8003c98 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003d3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d42:	f7ff ff23 	bl	8003b8c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003d46:	f7ff ff55 	bl	8003bf4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 faad 	bl	80042b4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	719a      	strb	r2, [r3, #6]

  return status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000000 	.word	0x20000000

08003d7c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	461a      	mov	r2, r3
 8003d88:	460b      	mov	r3, r1
 8003d8a:	817b      	strh	r3, [r7, #10]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	799b      	ldrb	r3, [r3, #6]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d14a      	bne.n	8003e30 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	795b      	ldrb	r3, [r3, #5]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e045      	b.n	8003e32 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2202      	movs	r2, #2
 8003db0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fb4c 	bl	8004450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003db8:	f7ff ff0c 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003dbc:	210d      	movs	r1, #13
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fa98 	bl	80042f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003dc4:	897b      	ldrh	r3, [r7, #10]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	4619      	mov	r1, r3
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fa90 	bl	80042f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fa8a 	bl	80042f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	82bb      	strh	r3, [r7, #20]
 8003de4:	e00a      	b.n	8003dfc <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003de6:	8abb      	ldrh	r3, [r7, #20]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4413      	add	r3, r2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	4619      	mov	r1, r3
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fa7f 	bl	80042f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003df6:	8abb      	ldrh	r3, [r7, #20]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	82bb      	strh	r3, [r7, #20]
 8003dfc:	8aba      	ldrh	r2, [r7, #20]
 8003dfe:	893b      	ldrh	r3, [r7, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d3f0      	bcc.n	8003de6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e04:	f7ff fed6 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fb45 	bl	8004498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
 8003e1a:	e001      	b.n	8003e20 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	715a      	strb	r2, [r3, #5]

    return status;
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	e000      	b.n	8003e32 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
  }
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b088      	sub	sp, #32
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	461a      	mov	r2, r3
 8003e46:	460b      	mov	r3, r1
 8003e48:	817b      	strh	r3, [r7, #10]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	799b      	ldrb	r3, [r3, #6]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d14a      	bne.n	8003ef2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	795b      	ldrb	r3, [r3, #5]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e045      	b.n	8003ef4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 faee 	bl	8004450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e74:	f7ff feae 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003e78:	211d      	movs	r1, #29
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fa3a 	bl	80042f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003e80:	897b      	ldrh	r3, [r7, #10]
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fa32 	bl	80042f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003e90:	897b      	ldrh	r3, [r7, #10]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fa2c 	bl	80042f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fa28 	bl	80042f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	82fb      	strh	r3, [r7, #22]
 8003ea8:	e009      	b.n	8003ebe <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003eaa:	69b9      	ldr	r1, [r7, #24]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fa77 	bl	80043a0 <SUBGHZSPI_Receive>
      pData++;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003eb8:	8afb      	ldrh	r3, [r7, #22]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	82fb      	strh	r3, [r7, #22]
 8003ebe:	8afa      	ldrh	r2, [r7, #22]
 8003ec0:	893b      	ldrh	r3, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d3f1      	bcc.n	8003eaa <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ec6:	f7ff fe75 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fae4 	bl	8004498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e001      	b.n	8003ee2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	715a      	strb	r2, [r3, #5]

    return status;
 8003eee:	7ffb      	ldrb	r3, [r7, #31]
 8003ef0:	e000      	b.n	8003ef4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3720      	adds	r7, #32
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	461a      	mov	r2, r3
 8003f08:	460b      	mov	r3, r1
 8003f0a:	72fb      	strb	r3, [r7, #11]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	799b      	ldrb	r3, [r3, #6]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d14a      	bne.n	8003fb0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	795b      	ldrb	r3, [r3, #5]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e045      	b.n	8003fb2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fa8f 	bl	8004450 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	2b84      	cmp	r3, #132	; 0x84
 8003f36:	d002      	beq.n	8003f3e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003f38:	7afb      	ldrb	r3, [r7, #11]
 8003f3a:	2b94      	cmp	r3, #148	; 0x94
 8003f3c:	d103      	bne.n	8003f46 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	711a      	strb	r2, [r3, #4]
 8003f44:	e002      	b.n	8003f4c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f4c:	f7ff fe42 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003f50:	7afb      	ldrb	r3, [r7, #11]
 8003f52:	4619      	mov	r1, r3
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f9cd 	bl	80042f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	82bb      	strh	r3, [r7, #20]
 8003f5e:	e00a      	b.n	8003f76 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003f60:	8abb      	ldrh	r3, [r7, #20]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f9c2 	bl	80042f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003f70:	8abb      	ldrh	r3, [r7, #20]
 8003f72:	3301      	adds	r3, #1
 8003f74:	82bb      	strh	r3, [r7, #20]
 8003f76:	8aba      	ldrh	r2, [r7, #20]
 8003f78:	893b      	ldrh	r3, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3f0      	bcc.n	8003f60 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f7e:	f7ff fe19 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003f82:	7afb      	ldrb	r3, [r7, #11]
 8003f84:	2b84      	cmp	r3, #132	; 0x84
 8003f86:	d002      	beq.n	8003f8e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fa85 	bl	8004498 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
 8003f9a:	e001      	b.n	8003fa0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	715a      	strb	r2, [r3, #5]

    return status;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	e000      	b.n	8003fb2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b088      	sub	sp, #32
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	72fb      	strb	r3, [r7, #11]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	799b      	ldrb	r3, [r3, #6]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d13d      	bne.n	8004058 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	795b      	ldrb	r3, [r3, #5]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e038      	b.n	800405a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fa2e 	bl	8004450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003ff4:	f7ff fdee 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003ff8:	7afb      	ldrb	r3, [r7, #11]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f979 	bl	80042f4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004002:	2100      	movs	r1, #0
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f975 	bl	80042f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800400a:	2300      	movs	r3, #0
 800400c:	82fb      	strh	r3, [r7, #22]
 800400e:	e009      	b.n	8004024 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004010:	69b9      	ldr	r1, [r7, #24]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f9c4 	bl	80043a0 <SUBGHZSPI_Receive>
      pData++;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	3301      	adds	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800401e:	8afb      	ldrh	r3, [r7, #22]
 8004020:	3301      	adds	r3, #1
 8004022:	82fb      	strh	r3, [r7, #22]
 8004024:	8afa      	ldrh	r2, [r7, #22]
 8004026:	893b      	ldrh	r3, [r7, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	d3f1      	bcc.n	8004010 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800402c:	f7ff fdc2 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fa31 	bl	8004498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e001      	b.n	8004048 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	715a      	strb	r2, [r3, #5]

    return status;
 8004054:	7ffb      	ldrb	r3, [r7, #31]
 8004056:	e000      	b.n	800405a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	461a      	mov	r2, r3
 800406e:	460b      	mov	r3, r1
 8004070:	72fb      	strb	r3, [r7, #11]
 8004072:	4613      	mov	r3, r2
 8004074:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	799b      	ldrb	r3, [r3, #6]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d13e      	bne.n	80040fe <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	795b      	ldrb	r3, [r3, #5]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004088:	2302      	movs	r3, #2
 800408a:	e039      	b.n	8004100 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f9dc 	bl	8004450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004098:	f7ff fd9c 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800409c:	210e      	movs	r1, #14
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f928 	bl	80042f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80040a4:	7afb      	ldrb	r3, [r7, #11]
 80040a6:	4619      	mov	r1, r3
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f923 	bl	80042f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	82bb      	strh	r3, [r7, #20]
 80040b2:	e00a      	b.n	80040ca <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80040b4:	8abb      	ldrh	r3, [r7, #20]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f918 	bl	80042f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80040c4:	8abb      	ldrh	r3, [r7, #20]
 80040c6:	3301      	adds	r3, #1
 80040c8:	82bb      	strh	r3, [r7, #20]
 80040ca:	8aba      	ldrh	r2, [r7, #20]
 80040cc:	893b      	ldrh	r3, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d3f0      	bcc.n	80040b4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80040d2:	f7ff fd6f 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f9de 	bl	8004498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	75fb      	strb	r3, [r7, #23]
 80040e8:	e001      	b.n	80040ee <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	715a      	strb	r2, [r3, #5]

    return status;
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	e000      	b.n	8004100 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	460b      	mov	r3, r1
 8004116:	72fb      	strb	r3, [r7, #11]
 8004118:	4613      	mov	r3, r2
 800411a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	799b      	ldrb	r3, [r3, #6]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d141      	bne.n	80041ae <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	795b      	ldrb	r3, [r3, #5]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004132:	2302      	movs	r3, #2
 8004134:	e03c      	b.n	80041b0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f987 	bl	8004450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004142:	f7ff fd47 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004146:	211e      	movs	r1, #30
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f8d3 	bl	80042f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800414e:	7afb      	ldrb	r3, [r7, #11]
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f8ce 	bl	80042f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004158:	2100      	movs	r1, #0
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f8ca 	bl	80042f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004160:	2300      	movs	r3, #0
 8004162:	82fb      	strh	r3, [r7, #22]
 8004164:	e009      	b.n	800417a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004166:	69b9      	ldr	r1, [r7, #24]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f919 	bl	80043a0 <SUBGHZSPI_Receive>
      pData++;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	3301      	adds	r3, #1
 8004172:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004174:	8afb      	ldrh	r3, [r7, #22]
 8004176:	3301      	adds	r3, #1
 8004178:	82fb      	strh	r3, [r7, #22]
 800417a:	8afa      	ldrh	r2, [r7, #22]
 800417c:	893b      	ldrh	r3, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	d3f1      	bcc.n	8004166 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004182:	f7ff fd17 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f986 	bl	8004498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e001      	b.n	800419e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	715a      	strb	r2, [r3, #5]

    return status;
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
 80041ac:	e000      	b.n	80041b0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80041c0:	2300      	movs	r3, #0
 80041c2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80041c4:	f107 020c 	add.w	r2, r7, #12
 80041c8:	2302      	movs	r3, #2
 80041ca:	2112      	movs	r1, #18
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff fef4 	bl	8003fba <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80041d2:	7b3b      	ldrb	r3, [r7, #12]
 80041d4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80041d6:	89fb      	ldrh	r3, [r7, #14]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	b21a      	sxth	r2, r3
 80041dc:	7b7b      	ldrb	r3, [r7, #13]
 80041de:	b21b      	sxth	r3, r3
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b21b      	sxth	r3, r3
 80041e4:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80041e6:	89fb      	ldrh	r3, [r7, #14]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f003 fdd3 	bl	8007d9c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80041f6:	89fb      	ldrh	r3, [r7, #14]
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
     //printf("rx callback\n\r");
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f003 fdd8 	bl	8007db8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004208:	89fb      	ldrh	r3, [r7, #14]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f003 fe27 	bl	8007e68 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800421a:	89fb      	ldrh	r3, [r7, #14]
 800421c:	08db      	lsrs	r3, r3, #3
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f003 fe2c 	bl	8007e84 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800422c:	89fb      	ldrh	r3, [r7, #14]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f003 fe31 	bl	8007ea0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800423e:	89fb      	ldrh	r3, [r7, #14]
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f003 fdfe 	bl	8007e4c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004250:	89fb      	ldrh	r3, [r7, #14]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f003 fdb9 	bl	8007dd4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004262:	89fb      	ldrh	r3, [r7, #14]
 8004264:	09db      	lsrs	r3, r3, #7
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00e      	beq.n	800428c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800427a:	2101      	movs	r1, #1
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f003 fdb7 	bl	8007df0 <HAL_SUBGHZ_CADStatusCallback>
 8004282:	e003      	b.n	800428c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004284:	2100      	movs	r1, #0
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f003 fdb2 	bl	8007df0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800428c:	89fb      	ldrh	r3, [r7, #14]
 800428e:	0a5b      	lsrs	r3, r3, #9
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f003 fdc7 	bl	8007e2c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800429e:	f107 020c 	add.w	r2, r7, #12
 80042a2:	2302      	movs	r3, #2
 80042a4:	2102      	movs	r1, #2
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fe28 	bl	8003efc <HAL_SUBGHZ_ExecSetCmd>
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <SUBGHZSPI_Init+0x3c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0b      	ldr	r2, [pc, #44]	; (80042f0 <SUBGHZSPI_Init+0x3c>)
 80042c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80042c8:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <SUBGHZSPI_Init+0x3c>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80042d0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <SUBGHZSPI_Init+0x3c>)
 80042d4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80042d8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <SUBGHZSPI_Init+0x3c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <SUBGHZSPI_Init+0x3c>)
 80042e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e4:	6013      	str	r3, [r2, #0]
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	58010000 	.word	0x58010000

080042f4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <SUBGHZSPI_Transmit+0xa0>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	0cdb      	lsrs	r3, r3, #19
 8004312:	2264      	movs	r2, #100	; 0x64
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	609a      	str	r2, [r3, #8]
      break;
 800432a:	e008      	b.n	800433e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3b01      	subs	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004332:	4b19      	ldr	r3, [pc, #100]	; (8004398 <SUBGHZSPI_Transmit+0xa4>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d1ed      	bne.n	800431a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800433e:	4b17      	ldr	r3, [pc, #92]	; (800439c <SUBGHZSPI_Transmit+0xa8>)
 8004340:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004348:	4b12      	ldr	r3, [pc, #72]	; (8004394 <SUBGHZSPI_Transmit+0xa0>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	0cdb      	lsrs	r3, r3, #19
 8004356:	2264      	movs	r2, #100	; 0x64
 8004358:	fb02 f303 	mul.w	r3, r2, r3
 800435c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	609a      	str	r2, [r3, #8]
      break;
 800436e:	e008      	b.n	8004382 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b01      	subs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <SUBGHZSPI_Transmit+0xa4>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d1ed      	bne.n	800435e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <SUBGHZSPI_Transmit+0xa4>)
 8004384:	68db      	ldr	r3, [r3, #12]

  return status;
 8004386:	7dfb      	ldrb	r3, [r7, #23]
}
 8004388:	4618      	mov	r0, r3
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000000 	.word	0x20000000
 8004398:	58010000 	.word	0x58010000
 800439c:	5801000c 	.word	0x5801000c

080043a0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80043ae:	4b25      	ldr	r3, [pc, #148]	; (8004444 <SUBGHZSPI_Receive+0xa4>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	0cdb      	lsrs	r3, r3, #19
 80043bc:	2264      	movs	r2, #100	; 0x64
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	609a      	str	r2, [r3, #8]
      break;
 80043d4:	e008      	b.n	80043e8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3b01      	subs	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <SUBGHZSPI_Receive+0xa8>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d1ed      	bne.n	80043c4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80043e8:	4b18      	ldr	r3, [pc, #96]	; (800444c <SUBGHZSPI_Receive+0xac>)
 80043ea:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	22ff      	movs	r2, #255	; 0xff
 80043f0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80043f2:	4b14      	ldr	r3, [pc, #80]	; (8004444 <SUBGHZSPI_Receive+0xa4>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	0cdb      	lsrs	r3, r3, #19
 8004400:	2264      	movs	r2, #100	; 0x64
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	609a      	str	r2, [r3, #8]
      break;
 8004418:	e008      	b.n	800442c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3b01      	subs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <SUBGHZSPI_Receive+0xa8>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d1ed      	bne.n	8004408 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <SUBGHZSPI_Receive+0xa8>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	701a      	strb	r2, [r3, #0]

  return status;
 8004436:	7dfb      	ldrb	r3, [r7, #23]
}
 8004438:	4618      	mov	r0, r3
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000000 	.word	0x20000000
 8004448:	58010000 	.word	0x58010000
 800444c:	5801000c 	.word	0x5801000c

08004450 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	791b      	ldrb	r3, [r3, #4]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d111      	bne.n	8004484 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <SUBGHZ_CheckDeviceReady+0x44>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004470:	f7ff fbb0 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3b01      	subs	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f9      	bne.n	8004474 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004480:	f7ff fb98 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f807 	bl	8004498 <SUBGHZ_WaitOnBusy>
 800448a:	4603      	mov	r3, r0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000000 	.word	0x20000000

08004498 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <SUBGHZ_WaitOnBusy+0x58>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	0d1b      	lsrs	r3, r3, #20
 80044b2:	2264      	movs	r2, #100	; 0x64
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80044ba:	f7ff fbb9 	bl	8003c30 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80044be:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	609a      	str	r2, [r3, #8]
      break;
 80044d0:	e009      	b.n	80044e6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80044d8:	f7ff fb98 	bl	8003c0c <LL_PWR_IsActiveFlag_RFBUSYS>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d0e9      	beq.n	80044ba <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20000000 	.word	0x20000000

080044f4 <LL_RCC_GetUSARTClockSource>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	401a      	ands	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	4313      	orrs	r3, r2
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <LL_RCC_GetLPUARTClockSource>:
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4013      	ands	r3, r2
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e042      	b.n	80045ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fd f8d6 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f995 	bl	80048a8 <UART_SetConfig>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e022      	b.n	80045ce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fbd9 	bl	8004d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fc5f 	bl	8004e8a <UART_CheckIdleState>
 80045cc:	4603      	mov	r3, r0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08a      	sub	sp, #40	; 0x28
 80045da:	af02      	add	r7, sp, #8
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	f040 8083 	bne.w	80046f8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_UART_Transmit+0x28>
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e07b      	b.n	80046fa <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_UART_Transmit+0x3a>
 800460c:	2302      	movs	r3, #2
 800460e:	e074      	b.n	80046fa <HAL_UART_Transmit+0x124>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2221      	movs	r2, #33	; 0x21
 8004624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004628:	f7fd fcfa 	bl	8002020 <HAL_GetTick>
 800462c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	88fa      	ldrh	r2, [r7, #6]
 8004632:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	d108      	bne.n	800465a <HAL_UART_Transmit+0x84>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	e003      	b.n	8004662 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800466a:	e02c      	b.n	80046c6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2200      	movs	r2, #0
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 fc52 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e039      	b.n	80046fa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	3302      	adds	r3, #2
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e007      	b.n	80046b4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3301      	adds	r3, #1
 80046b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1cc      	bne.n	800466c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2200      	movs	r2, #0
 80046da:	2140      	movs	r1, #64	; 0x40
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fc1f 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e006      	b.n	80046fa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b08a      	sub	sp, #40	; 0x28
 8004706:	af02      	add	r7, sp, #8
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	2b20      	cmp	r3, #32
 800471a:	f040 80c0 	bne.w	800489e <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_UART_Receive+0x28>
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0b8      	b.n	80048a0 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_UART_Receive+0x3a>
 8004738:	2302      	movs	r3, #2
 800473a:	e0b1      	b.n	80048a0 <HAL_UART_Receive+0x19e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2222      	movs	r2, #34	; 0x22
 8004750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800475a:	f7fd fc61 	bl	8002020 <HAL_GetTick>
 800475e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004778:	d10e      	bne.n	8004798 <HAL_UART_Receive+0x96>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d105      	bne.n	800478e <HAL_UART_Receive+0x8c>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800478c:	e02d      	b.n	80047ea <HAL_UART_Receive+0xe8>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	22ff      	movs	r2, #255	; 0xff
 8004792:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004796:	e028      	b.n	80047ea <HAL_UART_Receive+0xe8>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <HAL_UART_Receive+0xba>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d104      	bne.n	80047b2 <HAL_UART_Receive+0xb0>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	22ff      	movs	r2, #255	; 0xff
 80047ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047b0:	e01b      	b.n	80047ea <HAL_UART_Receive+0xe8>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	227f      	movs	r2, #127	; 0x7f
 80047b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047ba:	e016      	b.n	80047ea <HAL_UART_Receive+0xe8>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c4:	d10d      	bne.n	80047e2 <HAL_UART_Receive+0xe0>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d104      	bne.n	80047d8 <HAL_UART_Receive+0xd6>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	227f      	movs	r2, #127	; 0x7f
 80047d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047d6:	e008      	b.n	80047ea <HAL_UART_Receive+0xe8>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	223f      	movs	r2, #63	; 0x3f
 80047dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047e0:	e003      	b.n	80047ea <HAL_UART_Receive+0xe8>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80047f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fa:	d108      	bne.n	800480e <HAL_UART_Receive+0x10c>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e003      	b.n	8004816 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800481e:	e032      	b.n	8004886 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2200      	movs	r2, #0
 8004828:	2120      	movs	r1, #32
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fb78 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e032      	b.n	80048a0 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10c      	bne.n	800485a <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	b29a      	uxth	r2, r3
 8004848:	8a7b      	ldrh	r3, [r7, #18]
 800484a:	4013      	ands	r3, r2
 800484c:	b29a      	uxth	r2, r3
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	3302      	adds	r3, #2
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	e00c      	b.n	8004874 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	b2da      	uxtb	r2, r3
 8004862:	8a7b      	ldrh	r3, [r7, #18]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	4013      	ands	r3, r2
 8004868:	b2da      	uxtb	r2, r3
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3301      	adds	r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1c6      	bne.n	8004820 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800489e:	2302      	movs	r3, #2
  }
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a8:	b5b0      	push	{r4, r5, r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4bab      	ldr	r3, [pc, #684]	; (8004b80 <UART_SetConfig+0x2d8>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	69f9      	ldr	r1, [r7, #28]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4aa0      	ldr	r2, [pc, #640]	; (8004b84 <UART_SetConfig+0x2dc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800491a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	69f9      	ldr	r1, [r7, #28]
 8004924:	430b      	orrs	r3, r1
 8004926:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	f023 010f 	bic.w	r1, r3, #15
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a91      	ldr	r2, [pc, #580]	; (8004b88 <UART_SetConfig+0x2e0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d122      	bne.n	800498e <UART_SetConfig+0xe6>
 8004948:	2003      	movs	r0, #3
 800494a:	f7ff fdd3 	bl	80044f4 <LL_RCC_GetUSARTClockSource>
 800494e:	4603      	mov	r3, r0
 8004950:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004954:	2b03      	cmp	r3, #3
 8004956:	d817      	bhi.n	8004988 <UART_SetConfig+0xe0>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0xb8>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004971 	.word	0x08004971
 8004964:	0800497d 	.word	0x0800497d
 8004968:	08004977 	.word	0x08004977
 800496c:	08004983 	.word	0x08004983
 8004970:	2301      	movs	r3, #1
 8004972:	76fb      	strb	r3, [r7, #27]
 8004974:	e072      	b.n	8004a5c <UART_SetConfig+0x1b4>
 8004976:	2302      	movs	r3, #2
 8004978:	76fb      	strb	r3, [r7, #27]
 800497a:	e06f      	b.n	8004a5c <UART_SetConfig+0x1b4>
 800497c:	2304      	movs	r3, #4
 800497e:	76fb      	strb	r3, [r7, #27]
 8004980:	e06c      	b.n	8004a5c <UART_SetConfig+0x1b4>
 8004982:	2308      	movs	r3, #8
 8004984:	76fb      	strb	r3, [r7, #27]
 8004986:	e069      	b.n	8004a5c <UART_SetConfig+0x1b4>
 8004988:	2310      	movs	r3, #16
 800498a:	76fb      	strb	r3, [r7, #27]
 800498c:	e066      	b.n	8004a5c <UART_SetConfig+0x1b4>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a7e      	ldr	r2, [pc, #504]	; (8004b8c <UART_SetConfig+0x2e4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d134      	bne.n	8004a02 <UART_SetConfig+0x15a>
 8004998:	200c      	movs	r0, #12
 800499a:	f7ff fdab 	bl	80044f4 <LL_RCC_GetUSARTClockSource>
 800499e:	4603      	mov	r3, r0
 80049a0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d829      	bhi.n	80049fc <UART_SetConfig+0x154>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x108>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	080049fd 	.word	0x080049fd
 80049b8:	080049fd 	.word	0x080049fd
 80049bc:	080049fd 	.word	0x080049fd
 80049c0:	080049f1 	.word	0x080049f1
 80049c4:	080049fd 	.word	0x080049fd
 80049c8:	080049fd 	.word	0x080049fd
 80049cc:	080049fd 	.word	0x080049fd
 80049d0:	080049eb 	.word	0x080049eb
 80049d4:	080049fd 	.word	0x080049fd
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	080049fd 	.word	0x080049fd
 80049e0:	080049f7 	.word	0x080049f7
 80049e4:	2300      	movs	r3, #0
 80049e6:	76fb      	strb	r3, [r7, #27]
 80049e8:	e038      	b.n	8004a5c <UART_SetConfig+0x1b4>
 80049ea:	2302      	movs	r3, #2
 80049ec:	76fb      	strb	r3, [r7, #27]
 80049ee:	e035      	b.n	8004a5c <UART_SetConfig+0x1b4>
 80049f0:	2304      	movs	r3, #4
 80049f2:	76fb      	strb	r3, [r7, #27]
 80049f4:	e032      	b.n	8004a5c <UART_SetConfig+0x1b4>
 80049f6:	2308      	movs	r3, #8
 80049f8:	76fb      	strb	r3, [r7, #27]
 80049fa:	e02f      	b.n	8004a5c <UART_SetConfig+0x1b4>
 80049fc:	2310      	movs	r3, #16
 80049fe:	76fb      	strb	r3, [r7, #27]
 8004a00:	e02c      	b.n	8004a5c <UART_SetConfig+0x1b4>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a5f      	ldr	r2, [pc, #380]	; (8004b84 <UART_SetConfig+0x2dc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d125      	bne.n	8004a58 <UART_SetConfig+0x1b0>
 8004a0c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004a10:	f7ff fd82 	bl	8004518 <LL_RCC_GetLPUARTClockSource>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a1a:	d017      	beq.n	8004a4c <UART_SetConfig+0x1a4>
 8004a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a20:	d817      	bhi.n	8004a52 <UART_SetConfig+0x1aa>
 8004a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a26:	d00b      	beq.n	8004a40 <UART_SetConfig+0x198>
 8004a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a2c:	d811      	bhi.n	8004a52 <UART_SetConfig+0x1aa>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <UART_SetConfig+0x192>
 8004a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a36:	d006      	beq.n	8004a46 <UART_SetConfig+0x19e>
 8004a38:	e00b      	b.n	8004a52 <UART_SetConfig+0x1aa>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	76fb      	strb	r3, [r7, #27]
 8004a3e:	e00d      	b.n	8004a5c <UART_SetConfig+0x1b4>
 8004a40:	2302      	movs	r3, #2
 8004a42:	76fb      	strb	r3, [r7, #27]
 8004a44:	e00a      	b.n	8004a5c <UART_SetConfig+0x1b4>
 8004a46:	2304      	movs	r3, #4
 8004a48:	76fb      	strb	r3, [r7, #27]
 8004a4a:	e007      	b.n	8004a5c <UART_SetConfig+0x1b4>
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	76fb      	strb	r3, [r7, #27]
 8004a50:	e004      	b.n	8004a5c <UART_SetConfig+0x1b4>
 8004a52:	2310      	movs	r3, #16
 8004a54:	76fb      	strb	r3, [r7, #27]
 8004a56:	e001      	b.n	8004a5c <UART_SetConfig+0x1b4>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a48      	ldr	r2, [pc, #288]	; (8004b84 <UART_SetConfig+0x2dc>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	f040 8098 	bne.w	8004b98 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a68:	7efb      	ldrb	r3, [r7, #27]
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d823      	bhi.n	8004ab6 <UART_SetConfig+0x20e>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0x1cc>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004ab7 	.word	0x08004ab7
 8004a7c:	08004aa1 	.word	0x08004aa1
 8004a80:	08004ab7 	.word	0x08004ab7
 8004a84:	08004aa7 	.word	0x08004aa7
 8004a88:	08004ab7 	.word	0x08004ab7
 8004a8c:	08004ab7 	.word	0x08004ab7
 8004a90:	08004ab7 	.word	0x08004ab7
 8004a94:	08004aaf 	.word	0x08004aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fe fd90 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004a9c:	6178      	str	r0, [r7, #20]
        break;
 8004a9e:	e00f      	b.n	8004ac0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa0:	4b3b      	ldr	r3, [pc, #236]	; (8004b90 <UART_SetConfig+0x2e8>)
 8004aa2:	617b      	str	r3, [r7, #20]
        break;
 8004aa4:	e00c      	b.n	8004ac0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa6:	f7fe fcd5 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8004aaa:	6178      	str	r0, [r7, #20]
        break;
 8004aac:	e008      	b.n	8004ac0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab2:	617b      	str	r3, [r7, #20]
        break;
 8004ab4:	e004      	b.n	8004ac0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	76bb      	strb	r3, [r7, #26]
        break;
 8004abe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8128 	beq.w	8004d18 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	4a31      	ldr	r2, [pc, #196]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d305      	bcc.n	8004af8 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d902      	bls.n	8004afe <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	76bb      	strb	r3, [r7, #26]
 8004afc:	e10c      	b.n	8004d18 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f04f 0100 	mov.w	r1, #0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	4a22      	ldr	r2, [pc, #136]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	f7fc f89f 	bl	8000c58 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	020b      	lsls	r3, r1, #8
 8004b2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b30:	0202      	lsls	r2, r0, #8
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	6849      	ldr	r1, [r1, #4]
 8004b36:	0849      	lsrs	r1, r1, #1
 8004b38:	4608      	mov	r0, r1
 8004b3a:	f04f 0100 	mov.w	r1, #0
 8004b3e:	1814      	adds	r4, r2, r0
 8004b40:	eb43 0501 	adc.w	r5, r3, r1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fc f881 	bl	8000c58 <__aeabi_uldivmod>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b64:	d308      	bcc.n	8004b78 <UART_SetConfig+0x2d0>
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6c:	d204      	bcs.n	8004b78 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	e0cf      	b.n	8004d18 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	76bb      	strb	r3, [r7, #26]
 8004b7c:	e0cc      	b.n	8004d18 <UART_SetConfig+0x470>
 8004b7e:	bf00      	nop
 8004b80:	cfff69f3 	.word	0xcfff69f3
 8004b84:	40008000 	.word	0x40008000
 8004b88:	40013800 	.word	0x40013800
 8004b8c:	40004400 	.word	0x40004400
 8004b90:	00f42400 	.word	0x00f42400
 8004b94:	0800e1bc 	.word	0x0800e1bc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba0:	d165      	bne.n	8004c6e <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8004ba2:	7efb      	ldrb	r3, [r7, #27]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d828      	bhi.n	8004bfa <UART_SetConfig+0x352>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x308>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004be5 	.word	0x08004be5
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004bfb 	.word	0x08004bfb
 8004bc8:	08004bfb 	.word	0x08004bfb
 8004bcc:	08004bfb 	.word	0x08004bfb
 8004bd0:	08004bf3 	.word	0x08004bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f7fe fcf2 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004bd8:	6178      	str	r0, [r7, #20]
        break;
 8004bda:	e013      	b.n	8004c04 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7fe fd00 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8004be0:	6178      	str	r0, [r7, #20]
        break;
 8004be2:	e00f      	b.n	8004c04 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be4:	4b56      	ldr	r3, [pc, #344]	; (8004d40 <UART_SetConfig+0x498>)
 8004be6:	617b      	str	r3, [r7, #20]
        break;
 8004be8:	e00c      	b.n	8004c04 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bea:	f7fe fc33 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8004bee:	6178      	str	r0, [r7, #20]
        break;
 8004bf0:	e008      	b.n	8004c04 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	617b      	str	r3, [r7, #20]
        break;
 8004bf8:	e004      	b.n	8004c04 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	76bb      	strb	r3, [r7, #26]
        break;
 8004c02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8086 	beq.w	8004d18 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	4a4c      	ldr	r2, [pc, #304]	; (8004d44 <UART_SetConfig+0x49c>)
 8004c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c16:	461a      	mov	r2, r3
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c1e:	005a      	lsls	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	441a      	add	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	d916      	bls.n	8004c68 <UART_SetConfig+0x3c0>
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c40:	d212      	bcs.n	8004c68 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f023 030f 	bic.w	r3, r3, #15
 8004c4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	89fb      	ldrh	r3, [r7, #14]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	89fa      	ldrh	r2, [r7, #14]
 8004c64:	60da      	str	r2, [r3, #12]
 8004c66:	e057      	b.n	8004d18 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	76bb      	strb	r3, [r7, #26]
 8004c6c:	e054      	b.n	8004d18 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c6e:	7efb      	ldrb	r3, [r7, #27]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d828      	bhi.n	8004cc6 <UART_SetConfig+0x41e>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <UART_SetConfig+0x3d4>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	08004cb1 	.word	0x08004cb1
 8004c88:	08004cc7 	.word	0x08004cc7
 8004c8c:	08004cb7 	.word	0x08004cb7
 8004c90:	08004cc7 	.word	0x08004cc7
 8004c94:	08004cc7 	.word	0x08004cc7
 8004c98:	08004cc7 	.word	0x08004cc7
 8004c9c:	08004cbf 	.word	0x08004cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7fe fc8c 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004ca4:	6178      	str	r0, [r7, #20]
        break;
 8004ca6:	e013      	b.n	8004cd0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca8:	f7fe fc9a 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8004cac:	6178      	str	r0, [r7, #20]
        break;
 8004cae:	e00f      	b.n	8004cd0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb0:	4b23      	ldr	r3, [pc, #140]	; (8004d40 <UART_SetConfig+0x498>)
 8004cb2:	617b      	str	r3, [r7, #20]
        break;
 8004cb4:	e00c      	b.n	8004cd0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7fe fbcd 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8004cba:	6178      	str	r0, [r7, #20]
        break;
 8004cbc:	e008      	b.n	8004cd0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	617b      	str	r3, [r7, #20]
        break;
 8004cc4:	e004      	b.n	8004cd0 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	76bb      	strb	r3, [r7, #26]
        break;
 8004cce:	bf00      	nop
    }

    if (pclk != 0U)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d020      	beq.n	8004d18 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	4a1a      	ldr	r2, [pc, #104]	; (8004d44 <UART_SetConfig+0x49c>)
 8004cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	441a      	add	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	d908      	bls.n	8004d14 <UART_SetConfig+0x46c>
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d08:	d204      	bcs.n	8004d14 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	e001      	b.n	8004d18 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d34:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	00f42400 	.word	0x00f42400
 8004d44:	0800e1bc 	.word	0x0800e1bc

08004d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01a      	beq.n	8004e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e46:	d10a      	bne.n	8004e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	605a      	str	r2, [r3, #4]
  }
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr

08004e8a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b086      	sub	sp, #24
 8004e8e:	af02      	add	r7, sp, #8
 8004e90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e9a:	f7fd f8c1 	bl	8002020 <HAL_GetTick>
 8004e9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d10e      	bne.n	8004ecc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f82f 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e025      	b.n	8004f18 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d10e      	bne.n	8004ef8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f819 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e00f      	b.n	8004f18 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b09c      	sub	sp, #112	; 0x70
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f30:	e0a9      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	f000 80a5 	beq.w	8005086 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3c:	f7fd f870 	bl	8002020 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d302      	bcc.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d140      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f66:	667b      	str	r3, [r7, #100]	; 0x64
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f72:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e6      	bne.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fa4:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fa6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e5      	bne.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e069      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d051      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff0:	d149      	bne.n	8005086 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ffa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
 800501c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e6      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3308      	adds	r3, #8
 8005034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	e853 3f00 	ldrex	r3, [r3]
 800503c:	613b      	str	r3, [r7, #16]
   return(result);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	66bb      	str	r3, [r7, #104]	; 0x68
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3308      	adds	r3, #8
 800504c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800504e:	623a      	str	r2, [r7, #32]
 8005050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	69f9      	ldr	r1, [r7, #28]
 8005054:	6a3a      	ldr	r2, [r7, #32]
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	61bb      	str	r3, [r7, #24]
   return(result);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e5      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e010      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4013      	ands	r3, r2
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	bf0c      	ite	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	2300      	movne	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	f43f af46 	beq.w	8004f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3770      	adds	r7, #112	; 0x70
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e027      	b.n	8005116 <HAL_UARTEx_DisableFifoMode+0x66>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2224      	movs	r2, #36	; 0x24
 80050d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005134:	2302      	movs	r3, #2
 8005136:	e02d      	b.n	8005194 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	; 0x24
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f84f 	bl	8005218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e02d      	b.n	8005210 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2224      	movs	r2, #36	; 0x24
 80051c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f811 	bl	8005218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005224:	2b00      	cmp	r3, #0
 8005226:	d108      	bne.n	800523a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005238:	e031      	b.n	800529e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800523a:	2308      	movs	r3, #8
 800523c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800523e:	2308      	movs	r3, #8
 8005240:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	0e5b      	lsrs	r3, r3, #25
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	0f5b      	lsrs	r3, r3, #29
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	7b3a      	ldrb	r2, [r7, #12]
 8005266:	4910      	ldr	r1, [pc, #64]	; (80052a8 <UARTEx_SetNbDataToProcess+0x90>)
 8005268:	5c8a      	ldrb	r2, [r1, r2]
 800526a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800526e:	7b3a      	ldrb	r2, [r7, #12]
 8005270:	490e      	ldr	r1, [pc, #56]	; (80052ac <UARTEx_SetNbDataToProcess+0x94>)
 8005272:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005274:	fb93 f3f2 	sdiv	r3, r3, r2
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	7b7a      	ldrb	r2, [r7, #13]
 8005284:	4908      	ldr	r1, [pc, #32]	; (80052a8 <UARTEx_SetNbDataToProcess+0x90>)
 8005286:	5c8a      	ldrb	r2, [r1, r2]
 8005288:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800528c:	7b7a      	ldrb	r2, [r7, #13]
 800528e:	4907      	ldr	r1, [pc, #28]	; (80052ac <UARTEx_SetNbDataToProcess+0x94>)
 8005290:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005292:	fb93 f3f2 	sdiv	r3, r3, r2
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	0800e1d4 	.word	0x0800e1d4
 80052ac:	0800e1dc 	.word	0x0800e1dc

080052b0 <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <RadioInit+0x60>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80052be:	4b15      	ldr	r3, [pc, #84]	; (8005314 <RadioInit+0x64>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80052c4:	4b13      	ldr	r3, [pc, #76]	; (8005314 <RadioInit+0x64>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <RadioInit+0x64>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 80052d0:	4811      	ldr	r0, [pc, #68]	; (8005318 <RadioInit+0x68>)
 80052d2:	f001 fdc1 	bl	8006e58 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 80052d6:	2000      	movs	r0, #0
 80052d8:	f000 ffb0 	bl	800623c <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 80052dc:	f002 f852 	bl	8007384 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80052e0:	2100      	movs	r1, #0
 80052e2:	2000      	movs	r0, #0
 80052e4:	f002 fba8 	bl	8007a38 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80052e8:	2204      	movs	r2, #4
 80052ea:	2100      	movs	r1, #0
 80052ec:	2001      	movs	r0, #1
 80052ee:	f002 f9d3 	bl	8007698 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80052f2:	2300      	movs	r3, #0
 80052f4:	2200      	movs	r2, #0
 80052f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80052fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80052fe:	f002 f907 	bl	8007510 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8005302:	f000 fe4f 	bl	8005fa4 <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	2000042c 	.word	0x2000042c
 8005314:	20000570 	.word	0x20000570
 8005318:	080062a9 	.word	0x080062a9

0800531c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005320:	f001 fddc 	bl	8006edc <SUBGRF_GetOperatingMode>
 8005324:	4603      	mov	r3, r0
 8005326:	2b07      	cmp	r3, #7
 8005328:	d00a      	beq.n	8005340 <RadioGetStatus+0x24>
 800532a:	2b07      	cmp	r3, #7
 800532c:	dc0a      	bgt.n	8005344 <RadioGetStatus+0x28>
 800532e:	2b04      	cmp	r3, #4
 8005330:	d002      	beq.n	8005338 <RadioGetStatus+0x1c>
 8005332:	2b05      	cmp	r3, #5
 8005334:	d002      	beq.n	800533c <RadioGetStatus+0x20>
 8005336:	e005      	b.n	8005344 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8005338:	2302      	movs	r3, #2
 800533a:	e004      	b.n	8005346 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800533c:	2301      	movs	r3, #1
 800533e:	e002      	b.n	8005346 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8005340:	2303      	movs	r3, #3
 8005342:	e000      	b.n	8005346 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005344:	2300      	movs	r3, #0
    }
}
 8005346:	4618      	mov	r0, r3
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8005356:	4a25      	ldr	r2, [pc, #148]	; (80053ec <RadioSetModem+0xa0>)
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	4618      	mov	r0, r3
 8005360:	f002 fedf 	bl	8008122 <RFW_SetRadioModem>
    switch( modem )
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	3b01      	subs	r3, #1
 8005368:	2b03      	cmp	r3, #3
 800536a:	d80b      	bhi.n	8005384 <RadioSetModem+0x38>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <RadioSetModem+0x28>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	08005393 	.word	0x08005393
 8005378:	080053b9 	.word	0x080053b9
 800537c:	080053c7 	.word	0x080053c7
 8005380:	080053d5 	.word	0x080053d5
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005384:	2000      	movs	r0, #0
 8005386:	f002 f961 	bl	800764c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800538a:	4b18      	ldr	r3, [pc, #96]	; (80053ec <RadioSetModem+0xa0>)
 800538c:	2200      	movs	r2, #0
 800538e:	735a      	strb	r2, [r3, #13]
        break;
 8005390:	e028      	b.n	80053e4 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005392:	2001      	movs	r0, #1
 8005394:	f002 f95a 	bl	800764c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8005398:	4b14      	ldr	r3, [pc, #80]	; (80053ec <RadioSetModem+0xa0>)
 800539a:	7b5a      	ldrb	r2, [r3, #13]
 800539c:	4b13      	ldr	r3, [pc, #76]	; (80053ec <RadioSetModem+0xa0>)
 800539e:	7b1b      	ldrb	r3, [r3, #12]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d01e      	beq.n	80053e2 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <RadioSetModem+0xa0>)
 80053a6:	7b1a      	ldrb	r2, [r3, #12]
 80053a8:	4b10      	ldr	r3, [pc, #64]	; (80053ec <RadioSetModem+0xa0>)
 80053aa:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <RadioSetModem+0xa0>)
 80053ae:	7b5b      	ldrb	r3, [r3, #13]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 ff43 	bl	800623c <RadioSetPublicNetwork>
        }
        break;
 80053b6:	e014      	b.n	80053e2 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80053b8:	2002      	movs	r0, #2
 80053ba:	f002 f947 	bl	800764c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <RadioSetModem+0xa0>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	735a      	strb	r2, [r3, #13]
        break;
 80053c4:	e00e      	b.n	80053e4 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80053c6:	2002      	movs	r0, #2
 80053c8:	f002 f940 	bl	800764c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80053cc:	4b07      	ldr	r3, [pc, #28]	; (80053ec <RadioSetModem+0xa0>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	735a      	strb	r2, [r3, #13]
        break;
 80053d2:	e007      	b.n	80053e4 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80053d4:	2000      	movs	r0, #0
 80053d6:	f002 f939 	bl	800764c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80053da:	4b04      	ldr	r3, [pc, #16]	; (80053ec <RadioSetModem+0xa0>)
 80053dc:	2200      	movs	r2, #0
 80053de:	735a      	strb	r2, [r3, #13]
        break;
 80053e0:	e000      	b.n	80053e4 <RadioSetModem+0x98>
        break;
 80053e2:	bf00      	nop
    }
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000570 	.word	0x20000570

080053f0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f002 f8e5 	bl	80075c8 <SUBGRF_SetRfFrequency>
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b090      	sub	sp, #64	; 0x40
 800540a:	af0a      	add	r7, sp, #40	; 0x28
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8005422:	f000 fdd2 	bl	8005fca <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8005426:	2000      	movs	r0, #0
 8005428:	f7ff ff90 	bl	800534c <RadioSetModem>

    RadioSetChannel( freq );
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff ffdf 	bl	80053f0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8005432:	2301      	movs	r3, #1
 8005434:	9309      	str	r3, [sp, #36]	; 0x24
 8005436:	2300      	movs	r3, #0
 8005438:	9308      	str	r3, [sp, #32]
 800543a:	2300      	movs	r3, #0
 800543c:	9307      	str	r3, [sp, #28]
 800543e:	2300      	movs	r3, #0
 8005440:	9306      	str	r3, [sp, #24]
 8005442:	2300      	movs	r3, #0
 8005444:	9305      	str	r3, [sp, #20]
 8005446:	2300      	movs	r3, #0
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	2300      	movs	r3, #0
 800544c:	9303      	str	r3, [sp, #12]
 800544e:	2300      	movs	r3, #0
 8005450:	9302      	str	r3, [sp, #8]
 8005452:	2303      	movs	r3, #3
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	2300      	movs	r3, #0
 800545c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	2000      	movs	r0, #0
 8005464:	f000 f826 	bl	80054b4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8005468:	2000      	movs	r0, #0
 800546a:	f000 fdb5 	bl	8005fd8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800546e:	f000 ff13 	bl	8006298 <RadioGetWakeupTime>
 8005472:	4603      	mov	r3, r0
 8005474:	4618      	mov	r0, r3
 8005476:	f7fc fddd 	bl	8002034 <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800547a:	f000 fda6 	bl	8005fca <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8005492:	2001      	movs	r0, #1
 8005494:	f7ff ff5a 	bl	800534c <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005498:	2300      	movs	r3, #0
 800549a:	2200      	movs	r2, #0
 800549c:	2100      	movs	r1, #0
 800549e:	2000      	movs	r0, #0
 80054a0:	f002 f836 	bl	8007510 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80054a4:	f001 fdeb 	bl	800707e <SUBGRF_GetRandom>
 80054a8:	6078      	str	r0, [r7, #4]

    return rnd;
 80054aa:	687b      	ldr	r3, [r7, #4]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08a      	sub	sp, #40	; 0x28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	461a      	mov	r2, r3
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]
 80054c4:	4613      	mov	r3, r2
 80054c6:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80054c8:	4abd      	ldr	r2, [pc, #756]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80054ca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80054ce:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80054d0:	f002 fde5 	bl	800809e <RFW_DeInit>
    if( rxContinuous == true )
 80054d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80054e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80054e8:	4ab6      	ldr	r2, [pc, #728]	; (80057c4 <RadioSetRxConfig+0x310>)
 80054ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80054ee:	7013      	strb	r3, [r2, #0]
 80054f0:	e002      	b.n	80054f8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80054f2:	4bb4      	ldr	r3, [pc, #720]	; (80057c4 <RadioSetRxConfig+0x310>)
 80054f4:	22ff      	movs	r2, #255	; 0xff
 80054f6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d009      	beq.n	8005512 <RadioSetRxConfig+0x5e>
 80054fe:	2b04      	cmp	r3, #4
 8005500:	f300 81da 	bgt.w	80058b8 <RadioSetRxConfig+0x404>
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80bf 	beq.w	8005688 <RadioSetRxConfig+0x1d4>
 800550a:	2b01      	cmp	r3, #1
 800550c:	f000 812c 	beq.w	8005768 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005510:	e1d2      	b.n	80058b8 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005512:	2001      	movs	r0, #1
 8005514:	f001 fef8 	bl	8007308 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005518:	4ba9      	ldr	r3, [pc, #676]	; (80057c0 <RadioSetRxConfig+0x30c>)
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005520:	4aa7      	ldr	r2, [pc, #668]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8005526:	4ba6      	ldr	r3, [pc, #664]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005528:	2209      	movs	r2, #9
 800552a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800552e:	4ba4      	ldr	r3, [pc, #656]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005530:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005534:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005536:	68b8      	ldr	r0, [r7, #8]
 8005538:	f002 fce2 	bl	8007f00 <SUBGRF_GetFskBandwidthRegValue>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	4b9f      	ldr	r3, [pc, #636]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005546:	4b9e      	ldr	r3, [pc, #632]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005548:	2200      	movs	r2, #0
 800554a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800554c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	b29a      	uxth	r2, r3
 8005552:	4b9b      	ldr	r3, [pc, #620]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005554:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8005556:	4b9a      	ldr	r3, [pc, #616]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005558:	2200      	movs	r2, #0
 800555a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800555c:	4b98      	ldr	r3, [pc, #608]	; (80057c0 <RadioSetRxConfig+0x30c>)
 800555e:	2210      	movs	r2, #16
 8005560:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005562:	4b97      	ldr	r3, [pc, #604]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005564:	2200      	movs	r2, #0
 8005566:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8005568:	4b95      	ldr	r3, [pc, #596]	; (80057c0 <RadioSetRxConfig+0x30c>)
 800556a:	2200      	movs	r2, #0
 800556c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800556e:	4b95      	ldr	r3, [pc, #596]	; (80057c4 <RadioSetRxConfig+0x310>)
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	4b93      	ldr	r3, [pc, #588]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005574:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005576:	4b92      	ldr	r3, [pc, #584]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005578:	2201      	movs	r2, #1
 800557a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800557c:	4b90      	ldr	r3, [pc, #576]	; (80057c0 <RadioSetRxConfig+0x30c>)
 800557e:	2200      	movs	r2, #0
 8005580:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8005582:	2004      	movs	r0, #4
 8005584:	f7ff fee2 	bl	800534c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005588:	488f      	ldr	r0, [pc, #572]	; (80057c8 <RadioSetRxConfig+0x314>)
 800558a:	f002 f8eb 	bl	8007764 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800558e:	488f      	ldr	r0, [pc, #572]	; (80057cc <RadioSetRxConfig+0x318>)
 8005590:	f002 f9b4 	bl	80078fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005594:	4a8e      	ldr	r2, [pc, #568]	; (80057d0 <RadioSetRxConfig+0x31c>)
 8005596:	f107 031c 	add.w	r3, r7, #28
 800559a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800559e:	e883 0003 	stmia.w	r3, {r0, r1}
 80055a2:	f107 031c 	add.w	r3, r7, #28
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 fce7 	bl	8006f7a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80055ac:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055b0:	f001 fd32 	bl	8007018 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80055b4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80055b8:	f000 fdde 	bl	8006178 <RadioRead>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80055c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055c6:	f023 0310 	bic.w	r3, r3, #16
 80055ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 80055ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055d2:	4619      	mov	r1, r3
 80055d4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80055d8:	f000 fdbc 	bl	8006154 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80055dc:	2104      	movs	r1, #4
 80055de:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80055e2:	f000 fdb7 	bl	8006154 <RadioWrite>
            modReg= RadioRead(0x89b);
 80055e6:	f640 009b 	movw	r0, #2203	; 0x89b
 80055ea:	f000 fdc5 	bl	8006178 <RadioRead>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80055f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055f8:	f023 031c 	bic.w	r3, r3, #28
 80055fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8005600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005604:	f043 0308 	orr.w	r3, r3, #8
 8005608:	b2db      	uxtb	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	f640 009b 	movw	r0, #2203	; 0x89b
 8005610:	f000 fda0 	bl	8006154 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8005614:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005618:	f000 fdae 	bl	8006178 <RadioRead>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005626:	f023 0318 	bic.w	r3, r3, #24
 800562a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800562e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005632:	f043 0318 	orr.w	r3, r3, #24
 8005636:	b2db      	uxtb	r3, r3
 8005638:	4619      	mov	r1, r3
 800563a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800563e:	f000 fd89 	bl	8006154 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8005642:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005646:	f000 fd97 	bl	8006178 <RadioRead>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8005650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800565c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005660:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8005664:	b2db      	uxtb	r3, r3
 8005666:	4619      	mov	r1, r3
 8005668:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800566c:	f000 fd72 	bl	8006154 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005670:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005672:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005682:	4a4f      	ldr	r2, [pc, #316]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005684:	6093      	str	r3, [r2, #8]
            break;
 8005686:	e118      	b.n	80058ba <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005688:	2000      	movs	r0, #0
 800568a:	f001 fe3d 	bl	8007308 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800568e:	4b4c      	ldr	r3, [pc, #304]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005696:	4a4a      	ldr	r2, [pc, #296]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800569c:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <RadioSetRxConfig+0x30c>)
 800569e:	220b      	movs	r2, #11
 80056a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80056a4:	68b8      	ldr	r0, [r7, #8]
 80056a6:	f002 fc2b 	bl	8007f00 <SUBGRF_GetFskBandwidthRegValue>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	4b44      	ldr	r3, [pc, #272]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80056b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80056b4:	4b42      	ldr	r3, [pc, #264]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80056ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	b29a      	uxth	r2, r3
 80056c0:	4b3f      	ldr	r3, [pc, #252]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80056c2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80056c4:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80056c6:	2204      	movs	r2, #4
 80056c8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80056ca:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80056cc:	2218      	movs	r2, #24
 80056ce:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80056d0:	4b3b      	ldr	r3, [pc, #236]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80056d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80056da:	f083 0301 	eor.w	r3, r3, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	4b37      	ldr	r3, [pc, #220]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80056e4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80056e6:	4b37      	ldr	r3, [pc, #220]	; (80057c4 <RadioSetRxConfig+0x310>)
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	4b35      	ldr	r3, [pc, #212]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80056ec:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80056ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80056f8:	22f2      	movs	r2, #242	; 0xf2
 80056fa:	75da      	strb	r2, [r3, #23]
 80056fc:	e002      	b.n	8005704 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80056fe:	4b30      	ldr	r3, [pc, #192]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005700:	2201      	movs	r2, #1
 8005702:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005704:	4b2e      	ldr	r3, [pc, #184]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005706:	2201      	movs	r2, #1
 8005708:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800570a:	f000 fc5e 	bl	8005fca <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800570e:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fe14 	bl	800534c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005724:	4828      	ldr	r0, [pc, #160]	; (80057c8 <RadioSetRxConfig+0x314>)
 8005726:	f002 f81d 	bl	8007764 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800572a:	4828      	ldr	r0, [pc, #160]	; (80057cc <RadioSetRxConfig+0x318>)
 800572c:	f002 f8e6 	bl	80078fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005730:	4a28      	ldr	r2, [pc, #160]	; (80057d4 <RadioSetRxConfig+0x320>)
 8005732:	f107 0314 	add.w	r3, r7, #20
 8005736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800573a:	e883 0003 	stmia.w	r3, {r0, r1}
 800573e:	f107 0314 	add.w	r3, r7, #20
 8005742:	4618      	mov	r0, r3
 8005744:	f001 fc19 	bl	8006f7a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005748:	f240 10ff 	movw	r0, #511	; 0x1ff
 800574c:	f001 fc64 	bl	8007018 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005750:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005752:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	461a      	mov	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	4a17      	ldr	r2, [pc, #92]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005764:	6093      	str	r3, [r2, #8]
            break;
 8005766:	e0a8      	b.n	80058ba <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005768:	2000      	movs	r0, #0
 800576a:	f001 fdcd 	bl	8007308 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800576e:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <RadioSetRxConfig+0x30c>)
 800577c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005780:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <RadioSetRxConfig+0x324>)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4413      	add	r3, r2
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <RadioSetRxConfig+0x30c>)
 800578a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800578e:	4a0c      	ldr	r2, [pc, #48]	; (80057c0 <RadioSetRxConfig+0x30c>)
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d105      	bne.n	80057a8 <RadioSetRxConfig+0x2f4>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b0b      	cmp	r3, #11
 80057a0:	d008      	beq.n	80057b4 <RadioSetRxConfig+0x300>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b0c      	cmp	r3, #12
 80057a6:	d005      	beq.n	80057b4 <RadioSetRxConfig+0x300>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d116      	bne.n	80057dc <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b0c      	cmp	r3, #12
 80057b2:	d113      	bne.n	80057dc <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <RadioSetRxConfig+0x30c>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80057bc:	e012      	b.n	80057e4 <RadioSetRxConfig+0x330>
 80057be:	bf00      	nop
 80057c0:	20000570 	.word	0x20000570
 80057c4:	20000009 	.word	0x20000009
 80057c8:	200005a8 	.word	0x200005a8
 80057cc:	2000057e 	.word	0x2000057e
 80057d0:	0800de50 	.word	0x0800de50
 80057d4:	0800de58 	.word	0x0800de58
 80057d8:	0800e268 	.word	0x0800e268
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80057dc:	4b39      	ldr	r3, [pc, #228]	; (80058c4 <RadioSetRxConfig+0x410>)
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80057e4:	4b37      	ldr	r3, [pc, #220]	; (80058c4 <RadioSetRxConfig+0x410>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80057ea:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <RadioSetRxConfig+0x410>)
 80057ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	d004      	beq.n	80057fe <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80057f4:	4b33      	ldr	r3, [pc, #204]	; (80058c4 <RadioSetRxConfig+0x410>)
 80057f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d10a      	bne.n	8005814 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 80057fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005800:	2b0b      	cmp	r3, #11
 8005802:	d803      	bhi.n	800580c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005804:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <RadioSetRxConfig+0x410>)
 8005806:	220c      	movs	r2, #12
 8005808:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800580a:	e006      	b.n	800581a <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800580c:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <RadioSetRxConfig+0x410>)
 800580e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005810:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005812:	e002      	b.n	800581a <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005814:	4a2b      	ldr	r2, [pc, #172]	; (80058c4 <RadioSetRxConfig+0x410>)
 8005816:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005818:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800581a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800581e:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <RadioSetRxConfig+0x410>)
 8005820:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005822:	4b29      	ldr	r3, [pc, #164]	; (80058c8 <RadioSetRxConfig+0x414>)
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <RadioSetRxConfig+0x410>)
 8005828:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800582a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800582e:	4b25      	ldr	r3, [pc, #148]	; (80058c4 <RadioSetRxConfig+0x410>)
 8005830:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005834:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005838:	4b22      	ldr	r3, [pc, #136]	; (80058c4 <RadioSetRxConfig+0x410>)
 800583a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800583e:	f000 fbc4 	bl	8005fca <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005842:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <RadioSetRxConfig+0x410>)
 8005844:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fd7a 	bl	800534c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005858:	481c      	ldr	r0, [pc, #112]	; (80058cc <RadioSetRxConfig+0x418>)
 800585a:	f001 ff83 	bl	8007764 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800585e:	481c      	ldr	r0, [pc, #112]	; (80058d0 <RadioSetRxConfig+0x41c>)
 8005860:	f002 f84c 	bl	80078fc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005864:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005866:	b2db      	uxtb	r3, r3
 8005868:	4618      	mov	r0, r3
 800586a:	f001 fd5c 	bl	8007326 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800586e:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <RadioSetRxConfig+0x410>)
 8005870:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005874:	2b01      	cmp	r3, #1
 8005876:	d10d      	bne.n	8005894 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8005878:	f240 7036 	movw	r0, #1846	; 0x736
 800587c:	f002 f99a 	bl	8007bb4 <SUBGRF_ReadRegister>
 8005880:	4603      	mov	r3, r0
 8005882:	f023 0304 	bic.w	r3, r3, #4
 8005886:	b2db      	uxtb	r3, r3
 8005888:	4619      	mov	r1, r3
 800588a:	f240 7036 	movw	r0, #1846	; 0x736
 800588e:	f002 f97d 	bl	8007b8c <SUBGRF_WriteRegister>
 8005892:	e00c      	b.n	80058ae <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8005894:	f240 7036 	movw	r0, #1846	; 0x736
 8005898:	f002 f98c 	bl	8007bb4 <SUBGRF_ReadRegister>
 800589c:	4603      	mov	r3, r0
 800589e:	f043 0304 	orr.w	r3, r3, #4
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	4619      	mov	r1, r3
 80058a6:	f240 7036 	movw	r0, #1846	; 0x736
 80058aa:	f002 f96f 	bl	8007b8c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <RadioSetRxConfig+0x410>)
 80058b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b4:	609a      	str	r2, [r3, #8]
            break;
 80058b6:	e000      	b.n	80058ba <RadioSetRxConfig+0x406>
            break;
 80058b8:	bf00      	nop
    }
}
 80058ba:	bf00      	nop
 80058bc:	3728      	adds	r7, #40	; 0x28
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000570 	.word	0x20000570
 80058c8:	20000009 	.word	0x20000009
 80058cc:	200005a8 	.word	0x200005a8
 80058d0:	2000057e 	.word	0x2000057e

080058d4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60ba      	str	r2, [r7, #8]
 80058dc:	607b      	str	r3, [r7, #4]
 80058de:	4603      	mov	r3, r0
 80058e0:	73fb      	strb	r3, [r7, #15]
 80058e2:	460b      	mov	r3, r1
 80058e4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80058e6:	f002 fbda 	bl	800809e <RFW_DeInit>
    switch( modem )
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	f000 80d7 	beq.w	8005aa0 <RadioSetTxConfig+0x1cc>
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	f300 80e6 	bgt.w	8005ac4 <RadioSetTxConfig+0x1f0>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <RadioSetTxConfig+0x2e>
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d061      	beq.n	80059c4 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8005900:	e0e0      	b.n	8005ac4 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005902:	4b7c      	ldr	r3, [pc, #496]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800590a:	4a7a      	ldr	r2, [pc, #488]	; (8005af4 <RadioSetTxConfig+0x220>)
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005910:	4b78      	ldr	r3, [pc, #480]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005912:	220b      	movs	r2, #11
 8005914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f002 faf1 	bl	8007f00 <SUBGRF_GetFskBandwidthRegValue>
 800591e:	4603      	mov	r3, r0
 8005920:	461a      	mov	r2, r3
 8005922:	4b74      	ldr	r3, [pc, #464]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005928:	4a72      	ldr	r2, [pc, #456]	; (8005af4 <RadioSetTxConfig+0x220>)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800592e:	4b71      	ldr	r3, [pc, #452]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005930:	2200      	movs	r2, #0
 8005932:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005934:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	b29a      	uxth	r2, r3
 800593a:	4b6e      	ldr	r3, [pc, #440]	; (8005af4 <RadioSetTxConfig+0x220>)
 800593c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800593e:	4b6d      	ldr	r3, [pc, #436]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005940:	2204      	movs	r2, #4
 8005942:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8005944:	4b6b      	ldr	r3, [pc, #428]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005946:	2218      	movs	r2, #24
 8005948:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800594a:	4b6a      	ldr	r3, [pc, #424]	; (8005af4 <RadioSetTxConfig+0x220>)
 800594c:	2200      	movs	r2, #0
 800594e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005950:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005954:	f083 0301 	eor.w	r3, r3, #1
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	4b65      	ldr	r3, [pc, #404]	; (8005af4 <RadioSetTxConfig+0x220>)
 800595e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8005960:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005968:	4b62      	ldr	r3, [pc, #392]	; (8005af4 <RadioSetTxConfig+0x220>)
 800596a:	22f2      	movs	r2, #242	; 0xf2
 800596c:	75da      	strb	r2, [r3, #23]
 800596e:	e002      	b.n	8005976 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005970:	4b60      	ldr	r3, [pc, #384]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005972:	2201      	movs	r2, #1
 8005974:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005976:	4b5f      	ldr	r3, [pc, #380]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005978:	2201      	movs	r2, #1
 800597a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800597c:	f000 fb25 	bl	8005fca <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005980:	4b5c      	ldr	r3, [pc, #368]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005982:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005986:	2b00      	cmp	r3, #0
 8005988:	bf14      	ite	ne
 800598a:	2301      	movne	r3, #1
 800598c:	2300      	moveq	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff fcdb 	bl	800534c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005996:	4858      	ldr	r0, [pc, #352]	; (8005af8 <RadioSetTxConfig+0x224>)
 8005998:	f001 fee4 	bl	8007764 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800599c:	4857      	ldr	r0, [pc, #348]	; (8005afc <RadioSetTxConfig+0x228>)
 800599e:	f001 ffad 	bl	80078fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80059a2:	4a57      	ldr	r2, [pc, #348]	; (8005b00 <RadioSetTxConfig+0x22c>)
 80059a4:	f107 0310 	add.w	r3, r7, #16
 80059a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80059b0:	f107 0310 	add.w	r3, r7, #16
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 fae0 	bl	8006f7a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80059ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059be:	f001 fb2b 	bl	8007018 <SUBGRF_SetWhiteningSeed>
            break;
 80059c2:	e080      	b.n	8005ac6 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80059c4:	4b4b      	ldr	r3, [pc, #300]	; (8005af4 <RadioSetTxConfig+0x220>)
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	4b48      	ldr	r3, [pc, #288]	; (8005af4 <RadioSetTxConfig+0x220>)
 80059d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80059d6:	4a4b      	ldr	r2, [pc, #300]	; (8005b04 <RadioSetTxConfig+0x230>)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	4b45      	ldr	r3, [pc, #276]	; (8005af4 <RadioSetTxConfig+0x220>)
 80059e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80059e4:	4a43      	ldr	r2, [pc, #268]	; (8005af4 <RadioSetTxConfig+0x220>)
 80059e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059ea:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <RadioSetTxConfig+0x12c>
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	2b0b      	cmp	r3, #11
 80059f8:	d008      	beq.n	8005a0c <RadioSetTxConfig+0x138>
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	d005      	beq.n	8005a0c <RadioSetTxConfig+0x138>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d107      	bne.n	8005a16 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	d104      	bne.n	8005a16 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005a0c:	4b39      	ldr	r3, [pc, #228]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005a14:	e003      	b.n	8005a1e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005a16:	4b37      	ldr	r3, [pc, #220]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005a1e:	4b35      	ldr	r3, [pc, #212]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005a24:	4b33      	ldr	r3, [pc, #204]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a2a:	2b05      	cmp	r3, #5
 8005a2c:	d004      	beq.n	8005a38 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005a2e:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005a34:	2b06      	cmp	r3, #6
 8005a36:	d10a      	bne.n	8005a4e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8005a38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a3a:	2b0b      	cmp	r3, #11
 8005a3c:	d803      	bhi.n	8005a46 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005a3e:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a40:	220c      	movs	r2, #12
 8005a42:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005a44:	e006      	b.n	8005a54 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005a46:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a4a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005a4c:	e002      	b.n	8005a54 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005a4e:	4a29      	ldr	r2, [pc, #164]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a52:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005a54:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005a58:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a5a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005a5c:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <RadioSetTxConfig+0x234>)
 8005a5e:	781a      	ldrb	r2, [r3, #0]
 8005a60:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a62:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005a64:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005a68:	4b22      	ldr	r3, [pc, #136]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a6a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005a6e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005a78:	f000 faa7 	bl	8005fca <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf14      	ite	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	2300      	moveq	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fc5d 	bl	800534c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005a92:	4819      	ldr	r0, [pc, #100]	; (8005af8 <RadioSetTxConfig+0x224>)
 8005a94:	f001 fe66 	bl	8007764 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005a98:	4818      	ldr	r0, [pc, #96]	; (8005afc <RadioSetTxConfig+0x228>)
 8005a9a:	f001 ff2f 	bl	80078fc <SUBGRF_SetPacketParams>
            break;
 8005a9e:	e012      	b.n	8005ac6 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8005aa0:	2003      	movs	r0, #3
 8005aa2:	f7ff fc53 	bl	800534c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005aa6:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8005aae:	4a11      	ldr	r2, [pc, #68]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005ab6:	2216      	movs	r2, #22
 8005ab8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005abc:	480e      	ldr	r0, [pc, #56]	; (8005af8 <RadioSetTxConfig+0x224>)
 8005abe:	f001 fe51 	bl	8007764 <SUBGRF_SetModulationParams>
            break;
 8005ac2:	e000      	b.n	8005ac6 <RadioSetTxConfig+0x1f2>
            break;
 8005ac4:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8005ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 f92a 	bl	8007d24 <SUBGRF_SetRfTxPower>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005ad6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005adc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f002 faf0 	bl	80080c6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8005ae6:	4a03      	ldr	r2, [pc, #12]	; (8005af4 <RadioSetTxConfig+0x220>)
 8005ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aea:	6053      	str	r3, [r2, #4]
}
 8005aec:	bf00      	nop
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000570 	.word	0x20000570
 8005af8:	200005a8 	.word	0x200005a8
 8005afc:	2000057e 	.word	0x2000057e
 8005b00:	0800de58 	.word	0x0800de58
 8005b04:	0800e268 	.word	0x0800e268
 8005b08:	20000009 	.word	0x20000009

08005b0c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
    return true;
 8005b14:	2301      	movs	r3, #1
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	2b0a      	cmp	r3, #10
 8005b32:	d83e      	bhi.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <RadioGetLoRaBandwidthInHz+0x1c>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b69 	.word	0x08005b69
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005b89 	.word	0x08005b89
 8005b48:	08005b99 	.word	0x08005b99
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005ba7 	.word	0x08005ba7
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bb3 	.word	0x08005bb3
 8005b5c:	08005b71 	.word	0x08005b71
 8005b60:	08005b81 	.word	0x08005b81
 8005b64:	08005b91 	.word	0x08005b91
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8005b68:	f641 6384 	movw	r3, #7812	; 0x1e84
 8005b6c:	60fb      	str	r3, [r7, #12]
        break;
 8005b6e:	e020      	b.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8005b70:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8005b74:	60fb      	str	r3, [r7, #12]
        break;
 8005b76:	e01c      	b.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8005b78:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005b7c:	60fb      	str	r3, [r7, #12]
        break;
 8005b7e:	e018      	b.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8005b80:	f245 1361 	movw	r3, #20833	; 0x5161
 8005b84:	60fb      	str	r3, [r7, #12]
        break;
 8005b86:	e014      	b.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8005b88:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005b8c:	60fb      	str	r3, [r7, #12]
        break;
 8005b8e:	e010      	b.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8005b90:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8005b94:	60fb      	str	r3, [r7, #12]
        break;
 8005b96:	e00c      	b.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8005b98:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b9c:	60fb      	str	r3, [r7, #12]
        break;
 8005b9e:	e008      	b.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8005ba2:	60fb      	str	r3, [r7, #12]
        break;
 8005ba4:	e005      	b.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8005ba8:	60fb      	str	r3, [r7, #12]
        break;
 8005baa:	e002      	b.n	8005bb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <RadioGetLoRaBandwidthInHz+0xa8>)
 8005bae:	60fb      	str	r3, [r7, #12]
        break;
 8005bb0:	bf00      	nop
    }

    return bandwidthInHz;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	0001e848 	.word	0x0001e848
 8005bc4:	0003d090 	.word	0x0003d090
 8005bc8:	0007a120 	.word	0x0007a120

08005bcc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	70fb      	strb	r3, [r7, #3]
 8005bde:	460b      	mov	r3, r1
 8005be0:	803b      	strh	r3, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8005be6:	883b      	ldrh	r3, [r7, #0]
 8005be8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005bea:	78ba      	ldrb	r2, [r7, #2]
 8005bec:	f082 0201 	eor.w	r2, r2, #1
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	2a00      	cmp	r2, #0
 8005bf4:	d001      	beq.n	8005bfa <RadioGetGfskTimeOnAirNumerator+0x2e>
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	e000      	b.n	8005bfc <RadioGetGfskTimeOnAirNumerator+0x30>
 8005bfa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8005bfc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005bfe:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005c02:	7c3b      	ldrb	r3, [r7, #16]
 8005c04:	7d39      	ldrb	r1, [r7, #20]
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d001      	beq.n	8005c0e <RadioGetGfskTimeOnAirNumerator+0x42>
 8005c0a:	2102      	movs	r1, #2
 8005c0c:	e000      	b.n	8005c10 <RadioGetGfskTimeOnAirNumerator+0x44>
 8005c0e:	2100      	movs	r1, #0
 8005c10:	440b      	add	r3, r1
 8005c12:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005c14:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr

08005c20 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005c20:	b480      	push	{r7}
 8005c22:	b08b      	sub	sp, #44	; 0x2c
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	460b      	mov	r3, r1
 8005c30:	71fb      	strb	r3, [r7, #7]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b05      	cmp	r3, #5
 8005c46:	d002      	beq.n	8005c4e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b06      	cmp	r3, #6
 8005c4c:	d104      	bne.n	8005c58 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8005c4e:	88bb      	ldrh	r3, [r7, #4]
 8005c50:	2b0b      	cmp	r3, #11
 8005c52:	d801      	bhi.n	8005c58 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8005c54:	230c      	movs	r3, #12
 8005c56:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d105      	bne.n	8005c6a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b0b      	cmp	r3, #11
 8005c62:	d008      	beq.n	8005c76 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d005      	beq.n	8005c76 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d105      	bne.n	8005c7c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b0c      	cmp	r3, #12
 8005c74:	d102      	bne.n	8005c7c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005c7c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c80:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8005c82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	d001      	beq.n	8005c8e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8005c8a:	2210      	movs	r2, #16
 8005c8c:	e000      	b.n	8005c90 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8005c8e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005c90:	4413      	add	r3, r2
 8005c92:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8005c98:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8005c9a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005c9e:	2a00      	cmp	r2, #0
 8005ca0:	d001      	beq.n	8005ca6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	e000      	b.n	8005ca8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8005ca6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8005ca8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005caa:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b06      	cmp	r3, #6
 8005cb0:	d803      	bhi.n	8005cba <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	623b      	str	r3, [r7, #32]
 8005cb8:	e00e      	b.n	8005cd8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8005cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	3b02      	subs	r3, #2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	623b      	str	r3, [r7, #32]
 8005cd0:	e002      	b.n	8005cd8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da01      	bge.n	8005ce2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	1e5a      	subs	r2, r3, #1
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	fb92 f3f3 	sdiv	r3, r2, r3
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	fb02 f203 	mul.w	r2, r2, r3
 8005cf6:	88bb      	ldrh	r3, [r7, #4]
 8005cf8:	4413      	add	r3, r2
    int32_t intermediate =
 8005cfa:	330c      	adds	r3, #12
 8005cfc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b06      	cmp	r3, #6
 8005d02:	d802      	bhi.n	8005d0a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	3302      	adds	r3, #2
 8005d08:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	3b02      	subs	r3, #2
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	372c      	adds	r7, #44	; 0x2c
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr
	...

08005d24 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af04      	add	r7, sp, #16
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]
 8005d34:	4613      	mov	r3, r2
 8005d36:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <RadioTimeOnAir+0x28>
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d017      	beq.n	8005d7a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8005d4a:	e035      	b.n	8005db8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005d4c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8005d50:	8c3a      	ldrh	r2, [r7, #32]
 8005d52:	7bb9      	ldrb	r1, [r7, #14]
 8005d54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	4603      	mov	r3, r0
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff ff32 	bl	8005bcc <RadioGetGfskTimeOnAirNumerator>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	613b      	str	r3, [r7, #16]
        break;
 8005d78:	e01e      	b.n	8005db8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005d7a:	8c39      	ldrh	r1, [r7, #32]
 8005d7c:	7bba      	ldrb	r2, [r7, #14]
 8005d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d82:	9302      	str	r3, [sp, #8]
 8005d84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	460b      	mov	r3, r1
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	68b8      	ldr	r0, [r7, #8]
 8005d96:	f7ff ff43 	bl	8005c20 <RadioGetLoRaTimeOnAirNumerator>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005da0:	fb02 f303 	mul.w	r3, r2, r3
 8005da4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <RadioTimeOnAir+0xac>)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4413      	add	r3, r2
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff feb6 	bl	8005b20 <RadioGetLoRaBandwidthInHz>
 8005db4:	6138      	str	r0, [r7, #16]
        break;
 8005db6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	0800e268 	.word	0x0800e268

08005dd4 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005de0:	2300      	movs	r3, #0
 8005de2:	2200      	movs	r2, #0
 8005de4:	f240 2101 	movw	r1, #513	; 0x201
 8005de8:	f240 2001 	movw	r0, #513	; 0x201
 8005dec:	f001 fb90 	bl	8007510 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8005df0:	4b69      	ldr	r3, [pc, #420]	; (8005f98 <RadioSend+0x1c4>)
 8005df2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005df6:	2101      	movs	r1, #1
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 ff6b 	bl	8007cd4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8005dfe:	4b66      	ldr	r3, [pc, #408]	; (8005f98 <RadioSend+0x1c4>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d112      	bne.n	8005e2c <RadioSend+0x58>
 8005e06:	4b64      	ldr	r3, [pc, #400]	; (8005f98 <RadioSend+0x1c4>)
 8005e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e0c:	2b06      	cmp	r3, #6
 8005e0e:	d10d      	bne.n	8005e2c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8005e10:	f640 0089 	movw	r0, #2185	; 0x889
 8005e14:	f001 fece 	bl	8007bb4 <SUBGRF_ReadRegister>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f023 0304 	bic.w	r3, r3, #4
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	4619      	mov	r1, r3
 8005e22:	f640 0089 	movw	r0, #2185	; 0x889
 8005e26:	f001 feb1 	bl	8007b8c <SUBGRF_WriteRegister>
 8005e2a:	e00c      	b.n	8005e46 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8005e2c:	f640 0089 	movw	r0, #2185	; 0x889
 8005e30:	f001 fec0 	bl	8007bb4 <SUBGRF_ReadRegister>
 8005e34:	4603      	mov	r3, r0
 8005e36:	f043 0304 	orr.w	r3, r3, #4
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f640 0089 	movw	r0, #2185	; 0x889
 8005e42:	f001 fea3 	bl	8007b8c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8005e46:	4b54      	ldr	r3, [pc, #336]	; (8005f98 <RadioSend+0x1c4>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	f200 809e 	bhi.w	8005f8c <RadioSend+0x1b8>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <RadioSend+0x84>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005e83 	.word	0x08005e83
 8005e5c:	08005e69 	.word	0x08005e69
 8005e60:	08005ed5 	.word	0x08005ed5
 8005e64:	08005ef5 	.word	0x08005ef5
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005e68:	4a4b      	ldr	r2, [pc, #300]	; (8005f98 <RadioSend+0x1c4>)
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005e6e:	484b      	ldr	r0, [pc, #300]	; (8005f9c <RadioSend+0x1c8>)
 8005e70:	f001 fd44 	bl	80078fc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	2200      	movs	r2, #0
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 f86a 	bl	8006f54 <SUBGRF_SendPayload>
            break;
 8005e80:	e087      	b.n	8005f92 <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8005e82:	f002 f912 	bl	80080aa <RFW_Is_Init>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d116      	bne.n	8005eba <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005e8c:	f107 020d 	add.w	r2, r7, #13
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f002 f920 	bl	80080da <RFW_TransmitInit>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d177      	bne.n	8005f90 <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005ea0:	7b7a      	ldrb	r2, [r7, #13]
 8005ea2:	4b3d      	ldr	r3, [pc, #244]	; (8005f98 <RadioSend+0x1c4>)
 8005ea4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005ea6:	483d      	ldr	r0, [pc, #244]	; (8005f9c <RadioSend+0x1c8>)
 8005ea8:	f001 fd28 	bl	80078fc <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8005eac:	7b7b      	ldrb	r3, [r7, #13]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 f84e 	bl	8006f54 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8005eb8:	e06b      	b.n	8005f92 <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005eba:	4a37      	ldr	r2, [pc, #220]	; (8005f98 <RadioSend+0x1c4>)
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005ec0:	4836      	ldr	r0, [pc, #216]	; (8005f9c <RadioSend+0x1c8>)
 8005ec2:	f001 fd1b 	bl	80078fc <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 f841 	bl	8006f54 <SUBGRF_SendPayload>
            break;
 8005ed2:	e05e      	b.n	8005f92 <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005ed4:	4b30      	ldr	r3, [pc, #192]	; (8005f98 <RadioSend+0x1c4>)
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005eda:	4a2f      	ldr	r2, [pc, #188]	; (8005f98 <RadioSend+0x1c4>)
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005ee0:	482e      	ldr	r0, [pc, #184]	; (8005f9c <RadioSend+0x1c8>)
 8005ee2:	f001 fd0b 	bl	80078fc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 f831 	bl	8006f54 <SUBGRF_SendPayload>
            break;
 8005ef2:	e04e      	b.n	8005f92 <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4829      	ldr	r0, [pc, #164]	; (8005fa0 <RadioSend+0x1cc>)
 8005efc:	f000 fbb1 	bl	8006662 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005f00:	4b25      	ldr	r3, [pc, #148]	; (8005f98 <RadioSend+0x1c4>)
 8005f02:	2202      	movs	r2, #2
 8005f04:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	4b22      	ldr	r3, [pc, #136]	; (8005f98 <RadioSend+0x1c4>)
 8005f0e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005f10:	4822      	ldr	r0, [pc, #136]	; (8005f9c <RadioSend+0x1c8>)
 8005f12:	f001 fcf3 	bl	80078fc <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8005f16:	2100      	movs	r1, #0
 8005f18:	20f1      	movs	r0, #241	; 0xf1
 8005f1a:	f000 f91b 	bl	8006154 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8005f1e:	2100      	movs	r1, #0
 8005f20:	20f0      	movs	r0, #240	; 0xf0
 8005f22:	f000 f917 	bl	8006154 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005f26:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <RadioSend+0x1c4>)
 8005f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2a:	2b64      	cmp	r3, #100	; 0x64
 8005f2c:	d108      	bne.n	8005f40 <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8005f2e:	2170      	movs	r1, #112	; 0x70
 8005f30:	20f3      	movs	r0, #243	; 0xf3
 8005f32:	f000 f90f 	bl	8006154 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8005f36:	211d      	movs	r1, #29
 8005f38:	20f2      	movs	r0, #242	; 0xf2
 8005f3a:	f000 f90b 	bl	8006154 <RadioWrite>
 8005f3e:	e007      	b.n	8005f50 <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8005f40:	21e1      	movs	r1, #225	; 0xe1
 8005f42:	20f3      	movs	r0, #243	; 0xf3
 8005f44:	f000 f906 	bl	8006154 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8005f48:	2104      	movs	r1, #4
 8005f4a:	20f2      	movs	r0, #242	; 0xf2
 8005f4c:	f000 f902 	bl	8006154 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3302      	adds	r3, #2
 8005f5a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005f5c:	89fb      	ldrh	r3, [r7, #14]
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	4619      	mov	r1, r3
 8005f66:	20f4      	movs	r0, #244	; 0xf4
 8005f68:	f000 f8f4 	bl	8006154 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8005f6c:	89fb      	ldrh	r3, [r7, #14]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	4619      	mov	r1, r3
 8005f72:	20f5      	movs	r0, #245	; 0xf5
 8005f74:	f000 f8ee 	bl	8006154 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005f82:	4619      	mov	r1, r3
 8005f84:	4806      	ldr	r0, [pc, #24]	; (8005fa0 <RadioSend+0x1cc>)
 8005f86:	f000 ffe5 	bl	8006f54 <SUBGRF_SendPayload>
            break;
 8005f8a:	e002      	b.n	8005f92 <RadioSend+0x1be>
        }
        default:
            break;
 8005f8c:	bf00      	nop
 8005f8e:	e000      	b.n	8005f92 <RadioSend+0x1be>
                return;
 8005f90:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000570 	.word	0x20000570
 8005f9c:	2000057e 	.word	0x2000057e
 8005fa0:	2000032c 	.word	0x2000032c

08005fa4 <RadioSleep>:

static void RadioSleep( void )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8005faa:	2300      	movs	r3, #0
 8005fac:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8005fae:	793b      	ldrb	r3, [r7, #4]
 8005fb0:	f043 0304 	orr.w	r3, r3, #4
 8005fb4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8005fb6:	7938      	ldrb	r0, [r7, #4]
 8005fb8:	f001 f8a8 	bl	800710c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8005fbc:	2002      	movs	r0, #2
 8005fbe:	f7fc f839 	bl	8002034 <HAL_Delay>
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <RadioStandby>:

static void RadioStandby( void )
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8005fce:	2000      	movs	r0, #0
 8005fd0:	f001 f8ce 	bl	8007170 <SUBGRF_SetStandby>
}
 8005fd4:	bf00      	nop
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8005fe0:	f002 f863 	bl	80080aa <RFW_Is_Init>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d102      	bne.n	8005ff0 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8005fea:	f002 f886 	bl	80080fa <RFW_ReceiveInit>
 8005fee:	e007      	b.n	8006000 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f240 2162 	movw	r1, #610	; 0x262
 8005ff8:	f240 2062 	movw	r0, #610	; 0x262
 8005ffc:	f001 fa88 	bl	8007510 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006000:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <RadioRx+0x5c>)
 8006002:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f001 fe63 	bl	8007cd4 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800600e:	4b09      	ldr	r3, [pc, #36]	; (8006034 <RadioRx+0x5c>)
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006016:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800601a:	f001 f8e5 	bl	80071e8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800601e:	e005      	b.n	800602c <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8006020:	4b04      	ldr	r3, [pc, #16]	; (8006034 <RadioRx+0x5c>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	019b      	lsls	r3, r3, #6
 8006026:	4618      	mov	r0, r3
 8006028:	f001 f8de 	bl	80071e8 <SUBGRF_SetRx>
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000570 	.word	0x20000570

08006038 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8006040:	f002 f833 	bl	80080aa <RFW_Is_Init>
 8006044:	4603      	mov	r3, r0
 8006046:	2b01      	cmp	r3, #1
 8006048:	d102      	bne.n	8006050 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 800604a:	f002 f856 	bl	80080fa <RFW_ReceiveInit>
 800604e:	e007      	b.n	8006060 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006050:	2300      	movs	r3, #0
 8006052:	2200      	movs	r2, #0
 8006054:	f240 2162 	movw	r1, #610	; 0x262
 8006058:	f240 2062 	movw	r0, #610	; 0x262
 800605c:	f001 fa58 	bl	8007510 <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <RadioRxBoosted+0x5c>)
 8006062:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f001 fe33 	bl	8007cd4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800606e:	4b09      	ldr	r3, [pc, #36]	; (8006094 <RadioRxBoosted+0x5c>)
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006076:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800607a:	f001 f8d5 	bl	8007228 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800607e:	e005      	b.n	800608c <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <RadioRxBoosted+0x5c>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	4618      	mov	r0, r3
 8006088:	f001 f8ce 	bl	8007228 <SUBGRF_SetRxBoosted>
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000570 	.word	0x20000570

08006098 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80060a2:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <RadioSetRxDutyCycle+0x28>)
 80060a4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fe12 	bl	8007cd4 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 f8dc 	bl	8007270 <SUBGRF_SetRxDutyCycle>
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000570 	.word	0x20000570

080060c4 <RadioStartCad>:

static void RadioStartCad( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <RadioStartCad+0x2c>)
 80060ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 fdff 	bl	8007cd4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80060d6:	2300      	movs	r3, #0
 80060d8:	2200      	movs	r2, #0
 80060da:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80060de:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80060e2:	f001 fa15 	bl	8007510 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80060e6:	f001 f8ef 	bl	80072c8 <SUBGRF_SetCad>
}
 80060ea:	bf00      	nop
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000570 	.word	0x20000570

080060f4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	70fb      	strb	r3, [r7, #3]
 8006100:	4613      	mov	r3, r2
 8006102:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8006104:	883b      	ldrh	r3, [r7, #0]
 8006106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800610a:	fb02 f303 	mul.w	r3, r2, r3
 800610e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fa59 	bl	80075c8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8006116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800611a:	4618      	mov	r0, r3
 800611c:	f001 fe02 	bl	8007d24 <SUBGRF_SetRfTxPower>
 8006120:	4603      	mov	r3, r0
 8006122:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8006124:	7afb      	ldrb	r3, [r7, #11]
 8006126:	2101      	movs	r1, #1
 8006128:	4618      	mov	r0, r3
 800612a:	f001 fdd3 	bl	8007cd4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800612e:	f001 f8d9 	bl	80072e4 <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	4603      	mov	r3, r0
 8006142:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8006144:	f001 fc8f 	bl	8007a66 <SUBGRF_GetRssiInst>
 8006148:	4603      	mov	r3, r0
 800614a:	b21b      	sxth	r3, r3
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	460a      	mov	r2, r1
 800615e:	80fb      	strh	r3, [r7, #6]
 8006160:	4613      	mov	r3, r2
 8006162:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8006164:	797a      	ldrb	r2, [r7, #5]
 8006166:	88fb      	ldrh	r3, [r7, #6]
 8006168:	4611      	mov	r1, r2
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fd0e 	bl	8007b8c <SUBGRF_WriteRegister>
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	4618      	mov	r0, r3
 8006186:	f001 fd15 	bl	8007bb4 <SUBGRF_ReadRegister>
 800618a:	4603      	mov	r3, r0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	6039      	str	r1, [r7, #0]
 800619e:	80fb      	strh	r3, [r7, #6]
 80061a0:	4613      	mov	r3, r2
 80061a2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80061a4:	797b      	ldrb	r3, [r7, #5]
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 fd15 	bl	8007bdc <SUBGRF_WriteRegisters>
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	4603      	mov	r3, r0
 80061c2:	6039      	str	r1, [r7, #0]
 80061c4:	80fb      	strh	r3, [r7, #6]
 80061c6:	4613      	mov	r3, r2
 80061c8:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80061ca:	797b      	ldrb	r3, [r7, #5]
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 fd16 	bl	8007c04 <SUBGRF_ReadRegisters>
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	460a      	mov	r2, r1
 80061ea:	71fb      	strb	r3, [r7, #7]
 80061ec:	4613      	mov	r3, r2
 80061ee:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d10a      	bne.n	800620c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80061f6:	4a0e      	ldr	r2, [pc, #56]	; (8006230 <RadioSetMaxPayloadLength+0x50>)
 80061f8:	79bb      	ldrb	r3, [r7, #6]
 80061fa:	7013      	strb	r3, [r2, #0]
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <RadioSetMaxPayloadLength+0x50>)
 80061fe:	781a      	ldrb	r2, [r3, #0]
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <RadioSetMaxPayloadLength+0x54>)
 8006202:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006204:	480c      	ldr	r0, [pc, #48]	; (8006238 <RadioSetMaxPayloadLength+0x58>)
 8006206:	f001 fb79 	bl	80078fc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800620a:	e00d      	b.n	8006228 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <RadioSetMaxPayloadLength+0x54>)
 800620e:	7d5b      	ldrb	r3, [r3, #21]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d109      	bne.n	8006228 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006214:	4a06      	ldr	r2, [pc, #24]	; (8006230 <RadioSetMaxPayloadLength+0x50>)
 8006216:	79bb      	ldrb	r3, [r7, #6]
 8006218:	7013      	strb	r3, [r2, #0]
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <RadioSetMaxPayloadLength+0x50>)
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <RadioSetMaxPayloadLength+0x54>)
 8006220:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006222:	4805      	ldr	r0, [pc, #20]	; (8006238 <RadioSetMaxPayloadLength+0x58>)
 8006224:	f001 fb6a 	bl	80078fc <SUBGRF_SetPacketParams>
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000009 	.word	0x20000009
 8006234:	20000570 	.word	0x20000570
 8006238:	2000057e 	.word	0x2000057e

0800623c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <RadioSetPublicNetwork+0x58>)
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	7313      	strb	r3, [r2, #12]
 800624c:	4b11      	ldr	r3, [pc, #68]	; (8006294 <RadioSetPublicNetwork+0x58>)
 800624e:	7b1a      	ldrb	r2, [r3, #12]
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <RadioSetPublicNetwork+0x58>)
 8006252:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8006254:	2001      	movs	r0, #1
 8006256:	f7ff f879 	bl	800534c <RadioSetModem>
    if( enable == true )
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006260:	2134      	movs	r1, #52	; 0x34
 8006262:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006266:	f001 fc91 	bl	8007b8c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800626a:	2144      	movs	r1, #68	; 0x44
 800626c:	f240 7041 	movw	r0, #1857	; 0x741
 8006270:	f001 fc8c 	bl	8007b8c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8006274:	e009      	b.n	800628a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8006276:	2114      	movs	r1, #20
 8006278:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800627c:	f001 fc86 	bl	8007b8c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006280:	2124      	movs	r1, #36	; 0x24
 8006282:	f240 7041 	movw	r0, #1857	; 0x741
 8006286:	f001 fc81 	bl	8007b8c <SUBGRF_WriteRegister>
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000570 	.word	0x20000570

08006298 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800629c:	f001 fd76 	bl	8007d8c <SUBGRF_GetRadioWakeUpTime>
 80062a0:	4603      	mov	r3, r0
 80062a2:	3303      	adds	r3, #3
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80062b2:	4a05      	ldr	r2, [pc, #20]	; (80062c8 <RadioOnDioIrq+0x20>)
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80062ba:	f000 f807 	bl	80062cc <RadioIrqProcess>
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000570 	.word	0x20000570

080062cc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 80062da:	4bab      	ldr	r3, [pc, #684]	; (8006588 <RadioIrqProcess+0x2bc>)
 80062dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80062e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e4:	f000 8104 	beq.w	80064f0 <RadioIrqProcess+0x224>
 80062e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ec:	f300 816e 	bgt.w	80065cc <RadioIrqProcess+0x300>
 80062f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f4:	f000 80ea 	beq.w	80064cc <RadioIrqProcess+0x200>
 80062f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fc:	f300 8166 	bgt.w	80065cc <RadioIrqProcess+0x300>
 8006300:	2b80      	cmp	r3, #128	; 0x80
 8006302:	f000 80cf 	beq.w	80064a4 <RadioIrqProcess+0x1d8>
 8006306:	2b80      	cmp	r3, #128	; 0x80
 8006308:	f300 8160 	bgt.w	80065cc <RadioIrqProcess+0x300>
 800630c:	2b20      	cmp	r3, #32
 800630e:	dc49      	bgt.n	80063a4 <RadioIrqProcess+0xd8>
 8006310:	2b00      	cmp	r3, #0
 8006312:	f340 815b 	ble.w	80065cc <RadioIrqProcess+0x300>
 8006316:	3b01      	subs	r3, #1
 8006318:	2b1f      	cmp	r3, #31
 800631a:	f200 8157 	bhi.w	80065cc <RadioIrqProcess+0x300>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <RadioIrqProcess+0x58>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	080063ad 	.word	0x080063ad
 8006328:	080063e1 	.word	0x080063e1
 800632c:	080065cd 	.word	0x080065cd
 8006330:	080065cd 	.word	0x080065cd
 8006334:	080065cd 	.word	0x080065cd
 8006338:	080065cd 	.word	0x080065cd
 800633c:	080065cd 	.word	0x080065cd
 8006340:	08006549 	.word	0x08006549
 8006344:	080065cd 	.word	0x080065cd
 8006348:	080065cd 	.word	0x080065cd
 800634c:	080065cd 	.word	0x080065cd
 8006350:	080065cd 	.word	0x080065cd
 8006354:	080065cd 	.word	0x080065cd
 8006358:	080065cd 	.word	0x080065cd
 800635c:	080065cd 	.word	0x080065cd
 8006360:	080065cd 	.word	0x080065cd
 8006364:	080065cd 	.word	0x080065cd
 8006368:	080065cd 	.word	0x080065cd
 800636c:	080065cd 	.word	0x080065cd
 8006370:	080065cd 	.word	0x080065cd
 8006374:	080065cd 	.word	0x080065cd
 8006378:	080065cd 	.word	0x080065cd
 800637c:	080065cd 	.word	0x080065cd
 8006380:	080065cd 	.word	0x080065cd
 8006384:	080065cd 	.word	0x080065cd
 8006388:	080065cd 	.word	0x080065cd
 800638c:	080065cd 	.word	0x080065cd
 8006390:	080065cd 	.word	0x080065cd
 8006394:	080065cd 	.word	0x080065cd
 8006398:	080065cd 	.word	0x080065cd
 800639c:	080065cd 	.word	0x080065cd
 80063a0:	08006559 	.word	0x08006559
 80063a4:	2b40      	cmp	r3, #64	; 0x40
 80063a6:	f000 80f9 	beq.w	800659c <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80063aa:	e10f      	b.n	80065cc <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 80063ac:	2000      	movs	r0, #0
 80063ae:	f000 fedf 	bl	8007170 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80063b2:	f001 fe81 	bl	80080b8 <RFW_Is_LongPacketModeEnabled>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 80063bc:	f001 fea5 	bl	800810a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80063c0:	4b72      	ldr	r3, [pc, #456]	; (800658c <RadioIrqProcess+0x2c0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8103 	beq.w	80065d0 <RadioIrqProcess+0x304>
 80063ca:	4b70      	ldr	r3, [pc, #448]	; (800658c <RadioIrqProcess+0x2c0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80fd 	beq.w	80065d0 <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 80063d6:	4b6d      	ldr	r3, [pc, #436]	; (800658c <RadioIrqProcess+0x2c0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4798      	blx	r3
        break;
 80063de:	e0f7      	b.n	80065d0 <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 80063e0:	4b69      	ldr	r3, [pc, #420]	; (8006588 <RadioIrqProcess+0x2bc>)
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	f083 0301 	eor.w	r3, r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d014      	beq.n	8006418 <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 80063ee:	2000      	movs	r0, #0
 80063f0:	f000 febe 	bl	8007170 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 80063f4:	2100      	movs	r1, #0
 80063f6:	f640 1002 	movw	r0, #2306	; 0x902
 80063fa:	f001 fbc7 	bl	8007b8c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80063fe:	f640 1044 	movw	r0, #2372	; 0x944
 8006402:	f001 fbd7 	bl	8007bb4 <SUBGRF_ReadRegister>
 8006406:	4603      	mov	r3, r0
 8006408:	f043 0302 	orr.w	r3, r3, #2
 800640c:	b2db      	uxtb	r3, r3
 800640e:	4619      	mov	r1, r3
 8006410:	f640 1044 	movw	r0, #2372	; 0x944
 8006414:	f001 fbba 	bl	8007b8c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8006418:	1dfb      	adds	r3, r7, #7
 800641a:	22ff      	movs	r2, #255	; 0xff
 800641c:	4619      	mov	r1, r3
 800641e:	485c      	ldr	r0, [pc, #368]	; (8006590 <RadioIrqProcess+0x2c4>)
 8006420:	f000 fd76 	bl	8006f10 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8006424:	485b      	ldr	r0, [pc, #364]	; (8006594 <RadioIrqProcess+0x2c8>)
 8006426:	f001 fb5f 	bl	8007ae8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800642a:	4b58      	ldr	r3, [pc, #352]	; (800658c <RadioIrqProcess+0x2c0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d036      	beq.n	80064a0 <RadioIrqProcess+0x1d4>
 8006432:	4b56      	ldr	r3, [pc, #344]	; (800658c <RadioIrqProcess+0x2c0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d031      	beq.n	80064a0 <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 800643c:	4b52      	ldr	r3, [pc, #328]	; (8006588 <RadioIrqProcess+0x2bc>)
 800643e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006442:	2b01      	cmp	r3, #1
 8006444:	d10e      	bne.n	8006464 <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8006446:	4b51      	ldr	r3, [pc, #324]	; (800658c <RadioIrqProcess+0x2c0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689c      	ldr	r4, [r3, #8]
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	b299      	uxth	r1, r3
 8006450:	4b4d      	ldr	r3, [pc, #308]	; (8006588 <RadioIrqProcess+0x2bc>)
 8006452:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8006456:	b21a      	sxth	r2, r3
 8006458:	4b4b      	ldr	r3, [pc, #300]	; (8006588 <RadioIrqProcess+0x2bc>)
 800645a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800645e:	484c      	ldr	r0, [pc, #304]	; (8006590 <RadioIrqProcess+0x2c4>)
 8006460:	47a0      	blx	r4
                break;
 8006462:	e01e      	b.n	80064a2 <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8006464:	4b48      	ldr	r3, [pc, #288]	; (8006588 <RadioIrqProcess+0x2bc>)
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	463a      	mov	r2, r7
 800646a:	4611      	mov	r1, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fd6f 	bl	8007f50 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8006472:	4b46      	ldr	r3, [pc, #280]	; (800658c <RadioIrqProcess+0x2c0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689c      	ldr	r4, [r3, #8]
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	b299      	uxth	r1, r3
 800647c:	4b42      	ldr	r3, [pc, #264]	; (8006588 <RadioIrqProcess+0x2bc>)
 800647e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8006482:	b218      	sxth	r0, r3
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800648a:	4a43      	ldr	r2, [pc, #268]	; (8006598 <RadioIrqProcess+0x2cc>)
 800648c:	fb82 c203 	smull	ip, r2, r2, r3
 8006490:	1192      	asrs	r2, r2, #6
 8006492:	17db      	asrs	r3, r3, #31
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	b25b      	sxtb	r3, r3
 8006498:	4602      	mov	r2, r0
 800649a:	483d      	ldr	r0, [pc, #244]	; (8006590 <RadioIrqProcess+0x2c4>)
 800649c:	47a0      	blx	r4
                break;
 800649e:	e000      	b.n	80064a2 <RadioIrqProcess+0x1d6>
        }
 80064a0:	bf00      	nop
        break;
 80064a2:	e0a2      	b.n	80065ea <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 80064a4:	2000      	movs	r0, #0
 80064a6:	f000 fe63 	bl	8007170 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80064aa:	4b38      	ldr	r3, [pc, #224]	; (800658c <RadioIrqProcess+0x2c0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8090 	beq.w	80065d4 <RadioIrqProcess+0x308>
 80064b4:	4b35      	ldr	r3, [pc, #212]	; (800658c <RadioIrqProcess+0x2c0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 808a 	beq.w	80065d4 <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 80064c0:	4b32      	ldr	r3, [pc, #200]	; (800658c <RadioIrqProcess+0x2c0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2000      	movs	r0, #0
 80064c8:	4798      	blx	r3
        break;
 80064ca:	e083      	b.n	80065d4 <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 80064cc:	2000      	movs	r0, #0
 80064ce:	f000 fe4f 	bl	8007170 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80064d2:	4b2e      	ldr	r3, [pc, #184]	; (800658c <RadioIrqProcess+0x2c0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d07e      	beq.n	80065d8 <RadioIrqProcess+0x30c>
 80064da:	4b2c      	ldr	r3, [pc, #176]	; (800658c <RadioIrqProcess+0x2c0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d079      	beq.n	80065d8 <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 80064e4:	4b29      	ldr	r3, [pc, #164]	; (800658c <RadioIrqProcess+0x2c0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	2001      	movs	r0, #1
 80064ec:	4798      	blx	r3
        break;
 80064ee:	e073      	b.n	80065d8 <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80064f0:	f000 fcf4 	bl	8006edc <SUBGRF_GetOperatingMode>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d110      	bne.n	800651c <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 80064fa:	2000      	movs	r0, #0
 80064fc:	f000 fe38 	bl	8007170 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006500:	4b22      	ldr	r3, [pc, #136]	; (800658c <RadioIrqProcess+0x2c0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d069      	beq.n	80065dc <RadioIrqProcess+0x310>
 8006508:	4b20      	ldr	r3, [pc, #128]	; (800658c <RadioIrqProcess+0x2c0>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d064      	beq.n	80065dc <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 8006512:	4b1e      	ldr	r3, [pc, #120]	; (800658c <RadioIrqProcess+0x2c0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	4798      	blx	r3
        break;
 800651a:	e05f      	b.n	80065dc <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800651c:	f000 fcde 	bl	8006edc <SUBGRF_GetOperatingMode>
 8006520:	4603      	mov	r3, r0
 8006522:	2b05      	cmp	r3, #5
 8006524:	d15a      	bne.n	80065dc <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8006526:	2000      	movs	r0, #0
 8006528:	f000 fe22 	bl	8007170 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800652c:	4b17      	ldr	r3, [pc, #92]	; (800658c <RadioIrqProcess+0x2c0>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d053      	beq.n	80065dc <RadioIrqProcess+0x310>
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <RadioIrqProcess+0x2c0>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d04e      	beq.n	80065dc <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <RadioIrqProcess+0x2c0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4798      	blx	r3
        break;
 8006546:	e049      	b.n	80065dc <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 8006548:	f001 fdaf 	bl	80080aa <RFW_Is_Init>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d146      	bne.n	80065e0 <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 8006552:	f001 fde0 	bl	8008116 <RFW_ReceivePayload>
        break;
 8006556:	e043      	b.n	80065e0 <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <RadioIrqProcess+0x2bc>)
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	f083 0301 	eor.w	r3, r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 8006566:	2000      	movs	r0, #0
 8006568:	f000 fe02 	bl	8007170 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800656c:	4b07      	ldr	r3, [pc, #28]	; (800658c <RadioIrqProcess+0x2c0>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d037      	beq.n	80065e4 <RadioIrqProcess+0x318>
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <RadioIrqProcess+0x2c0>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d032      	beq.n	80065e4 <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 800657e:	4b03      	ldr	r3, [pc, #12]	; (800658c <RadioIrqProcess+0x2c0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	4798      	blx	r3
        break;
 8006586:	e02d      	b.n	80065e4 <RadioIrqProcess+0x318>
 8006588:	20000570 	.word	0x20000570
 800658c:	2000042c 	.word	0x2000042c
 8006590:	2000032c 	.word	0x2000032c
 8006594:	20000594 	.word	0x20000594
 8006598:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 800659c:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <RadioIrqProcess+0x328>)
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	f083 0301 	eor.w	r3, r3, #1
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 80065aa:	2000      	movs	r0, #0
 80065ac:	f000 fde0 	bl	8007170 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80065b0:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <RadioIrqProcess+0x32c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d017      	beq.n	80065e8 <RadioIrqProcess+0x31c>
 80065b8:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <RadioIrqProcess+0x32c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d012      	beq.n	80065e8 <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 80065c2:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <RadioIrqProcess+0x32c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	4798      	blx	r3
        break;
 80065ca:	e00d      	b.n	80065e8 <RadioIrqProcess+0x31c>
        break;
 80065cc:	bf00      	nop
 80065ce:	e00c      	b.n	80065ea <RadioIrqProcess+0x31e>
        break;
 80065d0:	bf00      	nop
 80065d2:	e00a      	b.n	80065ea <RadioIrqProcess+0x31e>
        break;
 80065d4:	bf00      	nop
 80065d6:	e008      	b.n	80065ea <RadioIrqProcess+0x31e>
        break;
 80065d8:	bf00      	nop
 80065da:	e006      	b.n	80065ea <RadioIrqProcess+0x31e>
        break;
 80065dc:	bf00      	nop
 80065de:	e004      	b.n	80065ea <RadioIrqProcess+0x31e>
        break;
 80065e0:	bf00      	nop
 80065e2:	e002      	b.n	80065ea <RadioIrqProcess+0x31e>
        break;
 80065e4:	bf00      	nop
 80065e6:	e000      	b.n	80065ea <RadioIrqProcess+0x31e>
        break;
 80065e8:	bf00      	nop
  }
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd90      	pop	{r4, r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000570 	.word	0x20000570
 80065f8:	2000042c 	.word	0x2000042c

080065fc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <RadioTxPrbs+0x2c>)
 8006602:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006606:	2101      	movs	r1, #1
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fb63 	bl	8007cd4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <RadioTxPrbs+0x30>)
 8006610:	212d      	movs	r1, #45	; 0x2d
 8006612:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006616:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8006618:	f000 fe6d 	bl	80072f6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800661c:	4804      	ldr	r0, [pc, #16]	; (8006630 <RadioTxPrbs+0x34>)
 800661e:	f000 fdc3 	bl	80071a8 <SUBGRF_SetTx>
}
 8006622:	bf00      	nop
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000570 	.word	0x20000570
 800662c:	08006155 	.word	0x08006155
 8006630:	000fffff 	.word	0x000fffff

08006634 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800663e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006642:	4618      	mov	r0, r3
 8006644:	f001 fb6e 	bl	8007d24 <SUBGRF_SetRfTxPower>
 8006648:	4603      	mov	r3, r0
 800664a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	2101      	movs	r1, #1
 8006650:	4618      	mov	r0, r3
 8006652:	f001 fb3f 	bl	8007cd4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8006656:	f000 fe45 	bl	80072e4 <SUBGRF_SetTxContinuousWave>
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8006662:	b480      	push	{r7}
 8006664:	b089      	sub	sp, #36	; 0x24
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	4613      	mov	r3, r2
 800666e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8006678:	2300      	movs	r3, #0
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e011      	b.n	80066a2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	4413      	add	r3, r2
 8006684:	781a      	ldrb	r2, [r3, #0]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	440b      	add	r3, r1
 800668c:	43d2      	mvns	r2, r2
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	2200      	movs	r2, #0
 800669a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	3301      	adds	r3, #1
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	dbe9      	blt.n	800667e <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e049      	b.n	8006744 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	425a      	negs	r2, r3
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	f002 0207 	and.w	r2, r2, #7
 80066bc:	bf58      	it	pl
 80066be:	4253      	negpl	r3, r2
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f1c3 0307 	rsb	r3, r3, #7
 80066c6:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	da00      	bge.n	80066d0 <payload_integration+0x6e>
 80066ce:	3307      	adds	r3, #7
 80066d0:	10db      	asrs	r3, r3, #3
 80066d2:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	3301      	adds	r3, #1
 80066d8:	425a      	negs	r2, r3
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	f002 0207 	and.w	r2, r2, #7
 80066e2:	bf58      	it	pl
 80066e4:	4253      	negpl	r3, r2
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f1c3 0307 	rsb	r3, r3, #7
 80066ec:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	3301      	adds	r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	da00      	bge.n	80066f8 <payload_integration+0x96>
 80066f6:	3307      	adds	r3, #7
 80066f8:	10db      	asrs	r3, r3, #3
 80066fa:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80066fc:	7dbb      	ldrb	r3, [r7, #22]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	4413      	add	r3, r2
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	fa42 f303 	asr.w	r3, r2, r3
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8006714:	7ffa      	ldrb	r2, [r7, #31]
 8006716:	7cfb      	ldrb	r3, [r7, #19]
 8006718:	4053      	eors	r3, r2
 800671a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800671c:	7d3b      	ldrb	r3, [r7, #20]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b25a      	sxtb	r2, r3
 8006726:	7ff9      	ldrb	r1, [r7, #31]
 8006728:	7d7b      	ldrb	r3, [r7, #21]
 800672a:	fa01 f303 	lsl.w	r3, r1, r3
 800672e:	b25b      	sxtb	r3, r3
 8006730:	4313      	orrs	r3, r2
 8006732:	b259      	sxtb	r1, r3
 8006734:	7d3b      	ldrb	r3, [r7, #20]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	b2ca      	uxtb	r2, r1
 800673c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	3301      	adds	r3, #1
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	429a      	cmp	r2, r3
 800674c:	dbb0      	blt.n	80066b0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800674e:	7ffb      	ldrb	r3, [r7, #31]
 8006750:	01db      	lsls	r3, r3, #7
 8006752:	b25a      	sxtb	r2, r3
 8006754:	7ffb      	ldrb	r3, [r7, #31]
 8006756:	019b      	lsls	r3, r3, #6
 8006758:	b25b      	sxtb	r3, r3
 800675a:	4313      	orrs	r3, r2
 800675c:	b25b      	sxtb	r3, r3
 800675e:	7ffa      	ldrb	r2, [r7, #31]
 8006760:	2a00      	cmp	r2, #0
 8006762:	d101      	bne.n	8006768 <payload_integration+0x106>
 8006764:	2220      	movs	r2, #32
 8006766:	e000      	b.n	800676a <payload_integration+0x108>
 8006768:	2200      	movs	r2, #0
 800676a:	4313      	orrs	r3, r2
 800676c:	b259      	sxtb	r1, r3
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	b2ca      	uxtb	r2, r1
 8006776:	701a      	strb	r2, [r3, #0]
}
 8006778:	bf00      	nop
 800677a:	3724      	adds	r7, #36	; 0x24
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
	...

08006784 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08c      	sub	sp, #48	; 0x30
 8006788:	af00      	add	r7, sp, #0
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8006798:	2300      	movs	r3, #0
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	2300      	movs	r3, #0
 800679e:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80067a0:	f001 fc7d 	bl	800809e <RFW_DeInit>

    if( rxContinuous != 0 )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf14      	ite	ne
 80067b4:	2301      	movne	r3, #1
 80067b6:	2300      	moveq	r3, #0
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	4ba9      	ldr	r3, [pc, #676]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 80067bc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <RadioSetRxGenericConfig+0x48>
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f000 80e8 	beq.w	800699a <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80067ca:	e1a0      	b.n	8006b0e <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <RadioSetRxGenericConfig+0x58>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	e196      	b.n	8006b10 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	7d5b      	ldrb	r3, [r3, #21]
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d902      	bls.n	80067f0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80067ea:	f04f 33ff 	mov.w	r3, #4294967295
 80067ee:	e18f      	b.n	8006b10 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80067f0:	2300      	movs	r3, #0
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f4:	e00d      	b.n	8006812 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	4413      	add	r3, r2
 80067fe:	7819      	ldrb	r1, [r3, #0]
 8006800:	f107 021c 	add.w	r2, r7, #28
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	4413      	add	r3, r2
 8006808:	460a      	mov	r2, r1
 800680a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	3301      	adds	r3, #1
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	7d5b      	ldrb	r3, [r3, #21]
 8006816:	461a      	mov	r2, r3
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	4293      	cmp	r3, r2
 800681c:	dbeb      	blt.n	80067f6 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf14      	ite	ne
 8006826:	2301      	movne	r3, #1
 8006828:	2300      	moveq	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fd6b 	bl	8007308 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006832:	4b8b      	ldr	r3, [pc, #556]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	4a88      	ldr	r2, [pc, #544]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006840:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	791a      	ldrb	r2, [r3, #4]
 8006846:	4b86      	ldr	r3, [pc, #536]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	4618      	mov	r0, r3
 8006852:	f001 fb55 	bl	8007f00 <SUBGRF_GetFskBandwidthRegValue>
 8006856:	4603      	mov	r3, r0
 8006858:	461a      	mov	r2, r3
 800685a:	4b81      	ldr	r3, [pc, #516]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 800685c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006860:	4b7f      	ldr	r3, [pc, #508]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006862:	2200      	movs	r2, #0
 8006864:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	b29b      	uxth	r3, r3
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	b29a      	uxth	r2, r3
 8006870:	4b7b      	ldr	r3, [pc, #492]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006872:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	7d1a      	ldrb	r2, [r3, #20]
 8006878:	4b79      	ldr	r3, [pc, #484]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 800687a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	7d5b      	ldrb	r3, [r3, #21]
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	b2da      	uxtb	r2, r3
 8006884:	4b76      	ldr	r3, [pc, #472]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006886:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800688e:	4b74      	ldr	r3, [pc, #464]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006890:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	4b6f      	ldr	r3, [pc, #444]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 80068a4:	759a      	strb	r2, [r3, #22]
 80068a6:	e00b      	b.n	80068c0 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d103      	bne.n	80068ba <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80068b2:	4b6b      	ldr	r3, [pc, #428]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 80068b4:	22ff      	movs	r2, #255	; 0xff
 80068b6:	759a      	strb	r2, [r3, #22]
 80068b8:	e002      	b.n	80068c0 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80068ba:	4b69      	ldr	r3, [pc, #420]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 80068bc:	22ff      	movs	r2, #255	; 0xff
 80068be:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d004      	beq.n	80068d4 <RadioSetRxGenericConfig+0x150>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d12d      	bne.n	8006930 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068da:	2bf1      	cmp	r3, #241	; 0xf1
 80068dc:	d00c      	beq.n	80068f8 <RadioSetRxGenericConfig+0x174>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068e4:	2bf2      	cmp	r3, #242	; 0xf2
 80068e6:	d007      	beq.n	80068f8 <RadioSetRxGenericConfig+0x174>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d002      	beq.n	80068f8 <RadioSetRxGenericConfig+0x174>
            return -1;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	e10b      	b.n	8006b10 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80068f8:	2300      	movs	r3, #0
 80068fa:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006900:	4b58      	ldr	r3, [pc, #352]	; (8006a64 <RadioSetRxGenericConfig+0x2e0>)
 8006902:	6819      	ldr	r1, [r3, #0]
 8006904:	f107 0310 	add.w	r3, r7, #16
 8006908:	4a57      	ldr	r2, [pc, #348]	; (8006a68 <RadioSetRxGenericConfig+0x2e4>)
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fbba 	bl	8008084 <RFW_Init>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <RadioSetRxGenericConfig+0x198>
            return -1;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
 800691a:	e0f9      	b.n	8006b10 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800691c:	4b50      	ldr	r3, [pc, #320]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 800691e:	2200      	movs	r2, #0
 8006920:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006922:	4b4f      	ldr	r3, [pc, #316]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006924:	2201      	movs	r2, #1
 8006926:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006928:	4b4d      	ldr	r3, [pc, #308]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 800692a:	2200      	movs	r2, #0
 800692c:	755a      	strb	r2, [r3, #21]
        {
 800692e:	e00e      	b.n	800694e <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006936:	4b4a      	ldr	r3, [pc, #296]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006938:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006940:	4b47      	ldr	r3, [pc, #284]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006942:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800694a:	4b45      	ldr	r3, [pc, #276]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 800694c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800694e:	f7ff fb3c 	bl	8005fca <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006952:	2000      	movs	r0, #0
 8006954:	f7fe fcfa 	bl	800534c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006958:	4844      	ldr	r0, [pc, #272]	; (8006a6c <RadioSetRxGenericConfig+0x2e8>)
 800695a:	f000 ff03 	bl	8007764 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800695e:	4844      	ldr	r0, [pc, #272]	; (8006a70 <RadioSetRxGenericConfig+0x2ec>)
 8006960:	f000 ffcc 	bl	80078fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006964:	f107 031c 	add.w	r3, r7, #28
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fb06 	bl	8006f7a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	8c1b      	ldrh	r3, [r3, #32]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fb50 	bl	8007018 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fb2b 	bl	8006fd8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006988:	fb02 f203 	mul.w	r2, r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	fbb2 f3f3 	udiv	r3, r2, r3
 8006994:	4a32      	ldr	r2, [pc, #200]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006996:	6093      	str	r3, [r2, #8]
        break;
 8006998:	e0b9      	b.n	8006b0e <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d102      	bne.n	80069a8 <RadioSetRxGenericConfig+0x224>
            return -1;
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295
 80069a6:	e0b3      	b.n	8006b10 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d104      	bne.n	80069bc <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80069ba:	e002      	b.n	80069c2 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 80069bc:	23ff      	movs	r3, #255	; 0xff
 80069be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bf14      	ite	ne
 80069ca:	2301      	movne	r3, #1
 80069cc:	2300      	moveq	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fc99 	bl	8007308 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fca3 	bl	8007326 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80069e0:	4b1f      	ldr	r3, [pc, #124]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80069ee:	4b1c      	ldr	r3, [pc, #112]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 80069f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80069fa:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 80069fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006a06:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006a08:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d010      	beq.n	8006a38 <RadioSetRxGenericConfig+0x2b4>
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	dc2c      	bgt.n	8006a74 <RadioSetRxGenericConfig+0x2f0>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <RadioSetRxGenericConfig+0x2a0>
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d005      	beq.n	8006a2e <RadioSetRxGenericConfig+0x2aa>
            break;
 8006a22:	e027      	b.n	8006a74 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006a24:	4b0e      	ldr	r3, [pc, #56]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a2c:	e023      	b.n	8006a76 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a36:	e01e      	b.n	8006a76 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a3e:	2b0b      	cmp	r3, #11
 8006a40:	d004      	beq.n	8006a4c <RadioSetRxGenericConfig+0x2c8>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a48:	2b0c      	cmp	r3, #12
 8006a4a:	d104      	bne.n	8006a56 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a54:	e00f      	b.n	8006a76 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006a56:	4b02      	ldr	r3, [pc, #8]	; (8006a60 <RadioSetRxGenericConfig+0x2dc>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a5e:	e00a      	b.n	8006a76 <RadioSetRxGenericConfig+0x2f2>
 8006a60:	20000570 	.word	0x20000570
 8006a64:	2000042c 	.word	0x2000042c
 8006a68:	200005c9 	.word	0x200005c9
 8006a6c:	200005a8 	.word	0x200005a8
 8006a70:	2000057e 	.word	0x2000057e
            break;
 8006a74:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006a76:	4b28      	ldr	r3, [pc, #160]	; (8006b18 <RadioSetRxGenericConfig+0x394>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8006a80:	4b25      	ldr	r3, [pc, #148]	; (8006b18 <RadioSetRxGenericConfig+0x394>)
 8006a82:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006a8a:	4b23      	ldr	r3, [pc, #140]	; (8006b18 <RadioSetRxGenericConfig+0x394>)
 8006a8c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006a8e:	4a22      	ldr	r2, [pc, #136]	; (8006b18 <RadioSetRxGenericConfig+0x394>)
 8006a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a94:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006a9c:	4b1e      	ldr	r3, [pc, #120]	; (8006b18 <RadioSetRxGenericConfig+0x394>)
 8006a9e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006aa8:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <RadioSetRxGenericConfig+0x394>)
 8006aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006aae:	f7ff fa8c 	bl	8005fca <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	f7fe fc4a 	bl	800534c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006ab8:	4818      	ldr	r0, [pc, #96]	; (8006b1c <RadioSetRxGenericConfig+0x398>)
 8006aba:	f000 fe53 	bl	8007764 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006abe:	4818      	ldr	r0, [pc, #96]	; (8006b20 <RadioSetRxGenericConfig+0x39c>)
 8006ac0:	f000 ff1c 	bl	80078fc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006ac4:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <RadioSetRxGenericConfig+0x394>)
 8006ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d10d      	bne.n	8006aea <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8006ace:	f240 7036 	movw	r0, #1846	; 0x736
 8006ad2:	f001 f86f 	bl	8007bb4 <SUBGRF_ReadRegister>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f023 0304 	bic.w	r3, r3, #4
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	4619      	mov	r1, r3
 8006ae0:	f240 7036 	movw	r0, #1846	; 0x736
 8006ae4:	f001 f852 	bl	8007b8c <SUBGRF_WriteRegister>
 8006ae8:	e00c      	b.n	8006b04 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8006aea:	f240 7036 	movw	r0, #1846	; 0x736
 8006aee:	f001 f861 	bl	8007bb4 <SUBGRF_ReadRegister>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f043 0304 	orr.w	r3, r3, #4
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	4619      	mov	r1, r3
 8006afc:	f240 7036 	movw	r0, #1846	; 0x736
 8006b00:	f001 f844 	bl	8007b8c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006b04:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <RadioSetRxGenericConfig+0x394>)
 8006b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b0a:	609a      	str	r2, [r3, #8]
        break;
 8006b0c:	bf00      	nop
    }
    return status;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3730      	adds	r7, #48	; 0x30
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000570 	.word	0x20000570
 8006b1c:	200005a8 	.word	0x200005a8
 8006b20:	2000057e 	.word	0x2000057e

08006b24 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607b      	str	r3, [r7, #4]
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	4613      	mov	r3, r2
 8006b34:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006b3e:	f001 faae 	bl	800809e <RFW_DeInit>
    switch( modem )
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f000 8144 	beq.w	8006dd2 <RadioSetTxGenericConfig+0x2ae>
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	f300 8160 	bgt.w	8006e10 <RadioSetTxGenericConfig+0x2ec>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <RadioSetTxGenericConfig+0x38>
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	f000 80b7 	beq.w	8006cc8 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8006b5a:	e159      	b.n	8006e10 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <RadioSetTxGenericConfig+0x48>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <RadioSetTxGenericConfig+0x4e>
            return -1;
 8006b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b70:	e163      	b.n	8006e3a <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	7d1b      	ldrb	r3, [r3, #20]
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d902      	bls.n	8006b80 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7e:	e15c      	b.n	8006e3a <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006b80:	2300      	movs	r3, #0
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
 8006b84:	e00d      	b.n	8006ba2 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	4413      	add	r3, r2
 8006b8e:	7819      	ldrb	r1, [r3, #0]
 8006b90:	f107 021c 	add.w	r2, r7, #28
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	4413      	add	r3, r2
 8006b98:	460a      	mov	r2, r1
 8006b9a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	7d1b      	ldrb	r3, [r3, #20]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	4293      	cmp	r3, r2
 8006bac:	dbeb      	blt.n	8006b86 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006bae:	4ba5      	ldr	r3, [pc, #660]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	4aa2      	ldr	r2, [pc, #648]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006bbc:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	781a      	ldrb	r2, [r3, #0]
 8006bc2:	4ba0      	ldr	r3, [pc, #640]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f997 	bl	8007f00 <SUBGRF_GetFskBandwidthRegValue>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4b9b      	ldr	r3, [pc, #620]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	4a98      	ldr	r2, [pc, #608]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006be2:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006be4:	4b97      	ldr	r3, [pc, #604]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	4b93      	ldr	r3, [pc, #588]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006bf6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006bf8:	4b92      	ldr	r3, [pc, #584]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	7d1b      	ldrb	r3, [r3, #20]
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	4b8f      	ldr	r3, [pc, #572]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006c08:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006c0a:	4b8e      	ldr	r3, [pc, #568]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d003      	beq.n	8006c22 <RadioSetTxGenericConfig+0xfe>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	7f9b      	ldrb	r3, [r3, #30]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d12a      	bne.n	8006c78 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	7fdb      	ldrb	r3, [r3, #31]
 8006c26:	2bf1      	cmp	r3, #241	; 0xf1
 8006c28:	d00a      	beq.n	8006c40 <RadioSetTxGenericConfig+0x11c>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	7fdb      	ldrb	r3, [r3, #31]
 8006c2e:	2bf2      	cmp	r3, #242	; 0xf2
 8006c30:	d006      	beq.n	8006c40 <RadioSetTxGenericConfig+0x11c>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	7fdb      	ldrb	r3, [r3, #31]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d002      	beq.n	8006c40 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8006c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3e:	e0fc      	b.n	8006e3a <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8006c40:	2301      	movs	r3, #1
 8006c42:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006c48:	4b7f      	ldr	r3, [pc, #508]	; (8006e48 <RadioSetTxGenericConfig+0x324>)
 8006c4a:	6819      	ldr	r1, [r3, #0]
 8006c4c:	f107 0310 	add.w	r3, r7, #16
 8006c50:	4a7e      	ldr	r2, [pc, #504]	; (8006e4c <RadioSetTxGenericConfig+0x328>)
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fa16 	bl	8008084 <RFW_Init>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <RadioSetTxGenericConfig+0x140>
              return -1;
 8006c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c62:	e0ea      	b.n	8006e3a <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006c64:	4b77      	ldr	r3, [pc, #476]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8006c6a:	4b76      	ldr	r3, [pc, #472]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006c70:	4b74      	ldr	r3, [pc, #464]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	755a      	strb	r2, [r3, #21]
        {
 8006c76:	e00c      	b.n	8006c92 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	7fda      	ldrb	r2, [r3, #31]
 8006c7c:	4b71      	ldr	r3, [pc, #452]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006c7e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006c86:	4b6f      	ldr	r3, [pc, #444]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006c88:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	7f9a      	ldrb	r2, [r3, #30]
 8006c8e:	4b6d      	ldr	r3, [pc, #436]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006c90:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006c92:	f7ff f99a 	bl	8005fca <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006c96:	2000      	movs	r0, #0
 8006c98:	f7fe fb58 	bl	800534c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006c9c:	486c      	ldr	r0, [pc, #432]	; (8006e50 <RadioSetTxGenericConfig+0x32c>)
 8006c9e:	f000 fd61 	bl	8007764 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006ca2:	486c      	ldr	r0, [pc, #432]	; (8006e54 <RadioSetTxGenericConfig+0x330>)
 8006ca4:	f000 fe2a 	bl	80078fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006ca8:	f107 031c 	add.w	r3, r7, #28
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f964 	bl	8006f7a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	8b9b      	ldrh	r3, [r3, #28]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f9ae 	bl	8007018 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	8c1b      	ldrh	r3, [r3, #32]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 f989 	bl	8006fd8 <SUBGRF_SetCrcPolynomial>
        break;
 8006cc6:	e0a4      	b.n	8006e12 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006cc8:	4b5e      	ldr	r3, [pc, #376]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006cd6:	4b5b      	ldr	r3, [pc, #364]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006ce2:	4b58      	ldr	r3, [pc, #352]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006cee:	4b55      	ldr	r3, [pc, #340]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006cf0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d010      	beq.n	8006d20 <RadioSetTxGenericConfig+0x1fc>
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	dc22      	bgt.n	8006d48 <RadioSetTxGenericConfig+0x224>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <RadioSetTxGenericConfig+0x1e8>
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d005      	beq.n	8006d16 <RadioSetTxGenericConfig+0x1f2>
            break;
 8006d0a:	e01d      	b.n	8006d48 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006d0c:	4b4d      	ldr	r3, [pc, #308]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006d14:	e019      	b.n	8006d4a <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006d16:	4b4b      	ldr	r3, [pc, #300]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006d1e:	e014      	b.n	8006d4a <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d26:	2b0b      	cmp	r3, #11
 8006d28:	d004      	beq.n	8006d34 <RadioSetTxGenericConfig+0x210>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d30:	2b0c      	cmp	r3, #12
 8006d32:	d104      	bne.n	8006d3e <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006d34:	4b43      	ldr	r3, [pc, #268]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006d3c:	e005      	b.n	8006d4a <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006d3e:	4b41      	ldr	r3, [pc, #260]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006d46:	e000      	b.n	8006d4a <RadioSetTxGenericConfig+0x226>
            break;
 8006d48:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006d4a:	4b3e      	ldr	r3, [pc, #248]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d54:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d56:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8006d5e:	4b39      	ldr	r3, [pc, #228]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d60:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006d68:	4b36      	ldr	r3, [pc, #216]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d6a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006d74:	4b33      	ldr	r3, [pc, #204]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006d7a:	f7ff f926 	bl	8005fca <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006d7e:	2001      	movs	r0, #1
 8006d80:	f7fe fae4 	bl	800534c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006d84:	4832      	ldr	r0, [pc, #200]	; (8006e50 <RadioSetTxGenericConfig+0x32c>)
 8006d86:	f000 fced 	bl	8007764 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006d8a:	4832      	ldr	r0, [pc, #200]	; (8006e54 <RadioSetTxGenericConfig+0x330>)
 8006d8c:	f000 fdb6 	bl	80078fc <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8006d90:	4b2c      	ldr	r3, [pc, #176]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006d92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d96:	2b06      	cmp	r3, #6
 8006d98:	d10d      	bne.n	8006db6 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006d9a:	f640 0089 	movw	r0, #2185	; 0x889
 8006d9e:	f000 ff09 	bl	8007bb4 <SUBGRF_ReadRegister>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f023 0304 	bic.w	r3, r3, #4
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	4619      	mov	r1, r3
 8006dac:	f640 0089 	movw	r0, #2185	; 0x889
 8006db0:	f000 feec 	bl	8007b8c <SUBGRF_WriteRegister>
        break;
 8006db4:	e02d      	b.n	8006e12 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006db6:	f640 0089 	movw	r0, #2185	; 0x889
 8006dba:	f000 fefb 	bl	8007bb4 <SUBGRF_ReadRegister>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f043 0304 	orr.w	r3, r3, #4
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f640 0089 	movw	r0, #2185	; 0x889
 8006dcc:	f000 fede 	bl	8007b8c <SUBGRF_WriteRegister>
        break;
 8006dd0:	e01f      	b.n	8006e12 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <RadioSetTxGenericConfig+0x2c0>
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006de2:	d902      	bls.n	8006dea <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8006de4:	f04f 33ff 	mov.w	r3, #4294967295
 8006de8:	e027      	b.n	8006e3a <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8006dea:	2002      	movs	r0, #2
 8006dec:	f7fe faae 	bl	800534c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006df0:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfc:	4a11      	ldr	r2, [pc, #68]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006dfe:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006e00:	4b10      	ldr	r3, [pc, #64]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006e02:	2216      	movs	r2, #22
 8006e04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e08:	4811      	ldr	r0, [pc, #68]	; (8006e50 <RadioSetTxGenericConfig+0x32c>)
 8006e0a:	f000 fcab 	bl	8007764 <SUBGRF_SetModulationParams>
        break;
 8006e0e:	e000      	b.n	8006e12 <RadioSetTxGenericConfig+0x2ee>
        break;
 8006e10:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 ff84 	bl	8007d24 <SUBGRF_SetRfTxPower>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006e22:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006e26:	4b07      	ldr	r3, [pc, #28]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006e28:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f001 f94a 	bl	80080c6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006e32:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <RadioSetTxGenericConfig+0x320>)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6053      	str	r3, [r2, #4]
    return 0;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3728      	adds	r7, #40	; 0x28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20000570 	.word	0x20000570
 8006e48:	2000042c 	.word	0x2000042c
 8006e4c:	200005c8 	.word	0x200005c8
 8006e50:	200005a8 	.word	0x200005a8
 8006e54:	2000057e 	.word	0x2000057e

08006e58 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006e66:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <SUBGRF_Init+0x78>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8006e6c:	f7fa fcfe 	bl	800186c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006e70:	2002      	movs	r0, #2
 8006e72:	f001 f823 	bl	8007ebc <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006e76:	4b17      	ldr	r3, [pc, #92]	; (8006ed4 <SUBGRF_Init+0x7c>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	f000 f977 	bl	8007170 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006e82:	f7fa fb5d 	bl	8001540 <RBI_IsTCXO>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d10e      	bne.n	8006eaa <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006e8c:	2140      	movs	r1, #64	; 0x40
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f000 fb78 	bl	8007584 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006e94:	2100      	movs	r1, #0
 8006e96:	f640 1011 	movw	r0, #2321	; 0x911
 8006e9a:	f000 fe77 	bl	8007b8c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006e9e:	237f      	movs	r3, #127	; 0x7f
 8006ea0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006ea2:	7b38      	ldrb	r0, [r7, #12]
 8006ea4:	f000 fa85 	bl	80073b2 <SUBGRF_Calibrate>
 8006ea8:	e009      	b.n	8006ebe <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006eaa:	2120      	movs	r1, #32
 8006eac:	f640 1011 	movw	r0, #2321	; 0x911
 8006eb0:	f000 fe6c 	bl	8007b8c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006eb4:	2120      	movs	r1, #32
 8006eb6:	f640 1012 	movw	r0, #2322	; 0x912
 8006eba:	f000 fe67 	bl	8007b8c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8006ebe:	f7fa fb23 	bl	8001508 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <SUBGRF_Init+0x80>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	701a      	strb	r2, [r3, #0]
}
 8006ec8:	bf00      	nop
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	2000043c 	.word	0x2000043c
 8006ed4:	20000438 	.word	0x20000438
 8006ed8:	20000430 	.word	0x20000430

08006edc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
    return OperatingMode;
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <SUBGRF_GetOperatingMode+0x10>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr
 8006eec:	20000430 	.word	0x20000430

08006ef0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	2000      	movs	r0, #0
 8006f04:	f000 fe92 	bl	8007c2c <SUBGRF_WriteBuffer>
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8006f22:	f107 0317 	add.w	r3, r7, #23
 8006f26:	4619      	mov	r1, r3
 8006f28:	68b8      	ldr	r0, [r7, #8]
 8006f2a:	f000 fdb1 	bl	8007a90 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	79fa      	ldrb	r2, [r7, #7]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d201      	bcs.n	8006f3c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e007      	b.n	8006f4c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8006f3c:	7df8      	ldrb	r0, [r7, #23]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	68f9      	ldr	r1, [r7, #12]
 8006f46:	f000 fe87 	bl	8007c58 <SUBGRF_ReadBuffer>

    return 0;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	4619      	mov	r1, r3
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7ff ffc2 	bl	8006ef0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f91b 	bl	80071a8 <SUBGRF_SetTx>
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006f82:	2208      	movs	r2, #8
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8006f8a:	f000 fe27 	bl	8007bdc <SUBGRF_WriteRegisters>
    return 0;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006fa2:	88fb      	ldrh	r3, [r7, #6]
 8006fa4:	0a1b      	lsrs	r3, r3, #8
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006fb2:	f000 fb67 	bl	8007684 <SUBGRF_GetPacketType>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d108      	bne.n	8006fce <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006fbc:	f107 030c 	add.w	r3, r7, #12
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006fc8:	f000 fe08 	bl	8007bdc <SUBGRF_WriteRegisters>
            break;
 8006fcc:	e000      	b.n	8006fd0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006fce:	bf00      	nop
    }
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	0a1b      	lsrs	r3, r3, #8
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006ff2:	f000 fb47 	bl	8007684 <SUBGRF_GetPacketType>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d108      	bne.n	800700e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	2202      	movs	r2, #2
 8007002:	4619      	mov	r1, r3
 8007004:	f240 60be 	movw	r0, #1726	; 0x6be
 8007008:	f000 fde8 	bl	8007bdc <SUBGRF_WriteRegisters>
            break;
 800700c:	e000      	b.n	8007010 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800700e:	bf00      	nop
    }
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8007026:	f000 fb2d 	bl	8007684 <SUBGRF_GetPacketType>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d121      	bne.n	8007074 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8007030:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007034:	f000 fdbe 	bl	8007bb4 <SUBGRF_ReadRegister>
 8007038:	4603      	mov	r3, r0
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007040:	88fb      	ldrh	r3, [r7, #6]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	b29b      	uxth	r3, r3
 8007046:	b25b      	sxtb	r3, r3
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	b25a      	sxtb	r2, r3
 800704e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007052:	4313      	orrs	r3, r2
 8007054:	b25b      	sxtb	r3, r3
 8007056:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	4619      	mov	r1, r3
 800705c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007060:	f000 fd94 	bl	8007b8c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	4619      	mov	r1, r3
 800706a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800706e:	f000 fd8d 	bl	8007b8c <SUBGRF_WriteRegister>
            break;
 8007072:	e000      	b.n	8007076 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8007074:	bf00      	nop
    }
}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8007090:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007094:	f000 fd8e 	bl	8007bb4 <SUBGRF_ReadRegister>
 8007098:	4603      	mov	r3, r0
 800709a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	f023 0301 	bic.w	r3, r3, #1
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	4619      	mov	r1, r3
 80070a6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80070aa:	f000 fd6f 	bl	8007b8c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80070ae:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80070b2:	f000 fd7f 	bl	8007bb4 <SUBGRF_ReadRegister>
 80070b6:	4603      	mov	r3, r0
 80070b8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80070ba:	79bb      	ldrb	r3, [r7, #6]
 80070bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	4619      	mov	r1, r3
 80070c4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80070c8:	f000 fd60 	bl	8007b8c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80070cc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80070d0:	f000 f88a 	bl	80071e8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80070d4:	463b      	mov	r3, r7
 80070d6:	2204      	movs	r2, #4
 80070d8:	4619      	mov	r1, r3
 80070da:	f640 0019 	movw	r0, #2073	; 0x819
 80070de:	f000 fd91 	bl	8007c04 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80070e2:	2000      	movs	r0, #0
 80070e4:	f000 f844 	bl	8007170 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	4619      	mov	r1, r3
 80070ec:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80070f0:	f000 fd4c 	bl	8007b8c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80070f4:	79bb      	ldrb	r3, [r7, #6]
 80070f6:	4619      	mov	r1, r3
 80070f8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80070fc:	f000 fd46 	bl	8007b8c <SUBGRF_WriteRegister>

    return number;
 8007100:	683b      	ldr	r3, [r7, #0]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8007114:	2000      	movs	r0, #0
 8007116:	f7fa f9fe 	bl	8001516 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800711a:	2002      	movs	r0, #2
 800711c:	f000 fece 	bl	8007ebc <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007120:	793b      	ldrb	r3, [r7, #4]
 8007122:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007126:	b2db      	uxtb	r3, r3
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800712c:	793b      	ldrb	r3, [r7, #4]
 800712e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007136:	b25b      	sxtb	r3, r3
 8007138:	4313      	orrs	r3, r2
 800713a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800713c:	793b      	ldrb	r3, [r7, #4]
 800713e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007142:	b2db      	uxtb	r3, r3
 8007144:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007146:	4313      	orrs	r3, r2
 8007148:	b25b      	sxtb	r3, r3
 800714a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800714c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800714e:	f107 030f 	add.w	r3, r7, #15
 8007152:	2201      	movs	r2, #1
 8007154:	4619      	mov	r1, r3
 8007156:	2084      	movs	r0, #132	; 0x84
 8007158:	f000 fd94 	bl	8007c84 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800715c:	4b03      	ldr	r3, [pc, #12]	; (800716c <SUBGRF_SetSleep+0x60>)
 800715e:	2200      	movs	r2, #0
 8007160:	701a      	strb	r2, [r3, #0]
}
 8007162:	bf00      	nop
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000430 	.word	0x20000430

08007170 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800717a:	1dfb      	adds	r3, r7, #7
 800717c:	2201      	movs	r2, #1
 800717e:	4619      	mov	r1, r3
 8007180:	2080      	movs	r0, #128	; 0x80
 8007182:	f000 fd7f 	bl	8007c84 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d103      	bne.n	8007194 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <SUBGRF_SetStandby+0x34>)
 800718e:	2201      	movs	r2, #1
 8007190:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8007192:	e002      	b.n	800719a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8007194:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <SUBGRF_SetStandby+0x34>)
 8007196:	2202      	movs	r2, #2
 8007198:	701a      	strb	r2, [r3, #0]
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000430 	.word	0x20000430

080071a8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80071b0:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <SUBGRF_SetTx+0x3c>)
 80071b2:	2204      	movs	r2, #4
 80071b4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	0c1b      	lsrs	r3, r3, #16
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	0a1b      	lsrs	r3, r3, #8
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80071cc:	f107 030c 	add.w	r3, r7, #12
 80071d0:	2203      	movs	r2, #3
 80071d2:	4619      	mov	r1, r3
 80071d4:	2083      	movs	r0, #131	; 0x83
 80071d6:	f000 fd55 	bl	8007c84 <SUBGRF_WriteCommand>
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000430 	.word	0x20000430

080071e8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80071f0:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <SUBGRF_SetRx+0x3c>)
 80071f2:	2205      	movs	r2, #5
 80071f4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	0a1b      	lsrs	r3, r3, #8
 8007202:	b2db      	uxtb	r3, r3
 8007204:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	2203      	movs	r2, #3
 8007212:	4619      	mov	r1, r3
 8007214:	2082      	movs	r0, #130	; 0x82
 8007216:	f000 fd35 	bl	8007c84 <SUBGRF_WriteCommand>
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000430 	.word	0x20000430

08007228 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007230:	4b0e      	ldr	r3, [pc, #56]	; (800726c <SUBGRF_SetRxBoosted+0x44>)
 8007232:	2205      	movs	r2, #5
 8007234:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8007236:	2197      	movs	r1, #151	; 0x97
 8007238:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800723c:	f000 fca6 	bl	8007b8c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	b2db      	uxtb	r3, r3
 8007246:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	0a1b      	lsrs	r3, r3, #8
 800724c:	b2db      	uxtb	r3, r3
 800724e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8007256:	f107 030c 	add.w	r3, r7, #12
 800725a:	2203      	movs	r2, #3
 800725c:	4619      	mov	r1, r3
 800725e:	2082      	movs	r0, #130	; 0x82
 8007260:	f000 fd10 	bl	8007c84 <SUBGRF_WriteCommand>
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000430 	.word	0x20000430

08007270 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	b2db      	uxtb	r3, r3
 8007280:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	0a1b      	lsrs	r3, r3, #8
 8007286:	b2db      	uxtb	r3, r3
 8007288:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	0c1b      	lsrs	r3, r3, #16
 8007294:	b2db      	uxtb	r3, r3
 8007296:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	0a1b      	lsrs	r3, r3, #8
 800729c:	b2db      	uxtb	r3, r3
 800729e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80072a6:	f107 0308 	add.w	r3, r7, #8
 80072aa:	2206      	movs	r2, #6
 80072ac:	4619      	mov	r1, r3
 80072ae:	2094      	movs	r0, #148	; 0x94
 80072b0:	f000 fce8 	bl	8007c84 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80072b4:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <SUBGRF_SetRxDutyCycle+0x54>)
 80072b6:	2206      	movs	r2, #6
 80072b8:	701a      	strb	r2, [r3, #0]
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000430 	.word	0x20000430

080072c8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80072cc:	2200      	movs	r2, #0
 80072ce:	2100      	movs	r1, #0
 80072d0:	20c5      	movs	r0, #197	; 0xc5
 80072d2:	f000 fcd7 	bl	8007c84 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80072d6:	4b02      	ldr	r3, [pc, #8]	; (80072e0 <SUBGRF_SetCad+0x18>)
 80072d8:	2207      	movs	r2, #7
 80072da:	701a      	strb	r2, [r3, #0]
}
 80072dc:	bf00      	nop
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000430 	.word	0x20000430

080072e4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80072e8:	2200      	movs	r2, #0
 80072ea:	2100      	movs	r1, #0
 80072ec:	20d1      	movs	r0, #209	; 0xd1
 80072ee:	f000 fcc9 	bl	8007c84 <SUBGRF_WriteCommand>
}
 80072f2:	bf00      	nop
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80072fa:	2200      	movs	r2, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	20d2      	movs	r0, #210	; 0xd2
 8007300:	f000 fcc0 	bl	8007c84 <SUBGRF_WriteCommand>
}
 8007304:	bf00      	nop
 8007306:	bd80      	pop	{r7, pc}

08007308 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8007312:	1dfb      	adds	r3, r7, #7
 8007314:	2201      	movs	r2, #1
 8007316:	4619      	mov	r1, r3
 8007318:	209f      	movs	r0, #159	; 0x9f
 800731a:	f000 fcb3 	bl	8007c84 <SUBGRF_WriteCommand>
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	4603      	mov	r3, r0
 800732e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007330:	1dfb      	adds	r3, r7, #7
 8007332:	2201      	movs	r2, #1
 8007334:	4619      	mov	r1, r3
 8007336:	20a0      	movs	r0, #160	; 0xa0
 8007338:	f000 fca4 	bl	8007c84 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	2b3f      	cmp	r3, #63	; 0x3f
 8007340:	d91c      	bls.n	800737c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	085b      	lsrs	r3, r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8007350:	e005      	b.n	800735e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	089b      	lsrs	r3, r3, #2
 8007356:	73fb      	strb	r3, [r7, #15]
            exp++;
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	3301      	adds	r3, #1
 800735c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b1f      	cmp	r3, #31
 8007362:	d8f6      	bhi.n	8007352 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	b2da      	uxtb	r2, r3
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	4413      	add	r3, r2
 800736e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8007370:	7b7b      	ldrb	r3, [r7, #13]
 8007372:	4619      	mov	r1, r3
 8007374:	f240 7006 	movw	r0, #1798	; 0x706
 8007378:	f000 fc08 	bl	8007b8c <SUBGRF_WriteRegister>
    }
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800738a:	f7fa f8e0 	bl	800154e <RBI_IsDCDC>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d102      	bne.n	800739a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8007394:	2301      	movs	r3, #1
 8007396:	71fb      	strb	r3, [r7, #7]
 8007398:	e001      	b.n	800739e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800739a:	2300      	movs	r3, #0
 800739c:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800739e:	1dfb      	adds	r3, r7, #7
 80073a0:	2201      	movs	r2, #1
 80073a2:	4619      	mov	r1, r3
 80073a4:	2096      	movs	r0, #150	; 0x96
 80073a6:	f000 fc6d 	bl	8007c84 <SUBGRF_WriteCommand>
}
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80073ba:	793b      	ldrb	r3, [r7, #4]
 80073bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	019b      	lsls	r3, r3, #6
 80073c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80073c6:	793b      	ldrb	r3, [r7, #4]
 80073c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80073d0:	b25b      	sxtb	r3, r3
 80073d2:	4313      	orrs	r3, r2
 80073d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80073d6:	793b      	ldrb	r3, [r7, #4]
 80073d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80073e0:	b25b      	sxtb	r3, r3
 80073e2:	4313      	orrs	r3, r2
 80073e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80073e6:	793b      	ldrb	r3, [r7, #4]
 80073e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80073f0:	b25b      	sxtb	r3, r3
 80073f2:	4313      	orrs	r3, r2
 80073f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80073f6:	793b      	ldrb	r3, [r7, #4]
 80073f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007400:	b25b      	sxtb	r3, r3
 8007402:	4313      	orrs	r3, r2
 8007404:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007406:	793b      	ldrb	r3, [r7, #4]
 8007408:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800740c:	b2db      	uxtb	r3, r3
 800740e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007410:	b25b      	sxtb	r3, r3
 8007412:	4313      	orrs	r3, r2
 8007414:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8007416:	793b      	ldrb	r3, [r7, #4]
 8007418:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800741c:	b2db      	uxtb	r3, r3
 800741e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007420:	4313      	orrs	r3, r2
 8007422:	b25b      	sxtb	r3, r3
 8007424:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007426:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007428:	f107 030f 	add.w	r3, r7, #15
 800742c:	2201      	movs	r2, #1
 800742e:	4619      	mov	r1, r3
 8007430:	2089      	movs	r0, #137	; 0x89
 8007432:	f000 fc27 	bl	8007c84 <SUBGRF_WriteCommand>
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <SUBGRF_CalibrateImage+0x78>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d904      	bls.n	800745a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8007450:	23e1      	movs	r3, #225	; 0xe1
 8007452:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8007454:	23e9      	movs	r3, #233	; 0xe9
 8007456:	737b      	strb	r3, [r7, #13]
 8007458:	e022      	b.n	80074a0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a17      	ldr	r2, [pc, #92]	; (80074bc <SUBGRF_CalibrateImage+0x7c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d904      	bls.n	800746c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8007462:	23d7      	movs	r3, #215	; 0xd7
 8007464:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8007466:	23db      	movs	r3, #219	; 0xdb
 8007468:	737b      	strb	r3, [r7, #13]
 800746a:	e019      	b.n	80074a0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a14      	ldr	r2, [pc, #80]	; (80074c0 <SUBGRF_CalibrateImage+0x80>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d904      	bls.n	800747e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8007474:	23c1      	movs	r3, #193	; 0xc1
 8007476:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8007478:	23c5      	movs	r3, #197	; 0xc5
 800747a:	737b      	strb	r3, [r7, #13]
 800747c:	e010      	b.n	80074a0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a10      	ldr	r2, [pc, #64]	; (80074c4 <SUBGRF_CalibrateImage+0x84>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d904      	bls.n	8007490 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8007486:	2375      	movs	r3, #117	; 0x75
 8007488:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800748a:	2381      	movs	r3, #129	; 0x81
 800748c:	737b      	strb	r3, [r7, #13]
 800748e:	e007      	b.n	80074a0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <SUBGRF_CalibrateImage+0x88>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d903      	bls.n	80074a0 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8007498:	236b      	movs	r3, #107	; 0x6b
 800749a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800749c:	236f      	movs	r3, #111	; 0x6f
 800749e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80074a0:	f107 030c 	add.w	r3, r7, #12
 80074a4:	2202      	movs	r2, #2
 80074a6:	4619      	mov	r1, r3
 80074a8:	2098      	movs	r0, #152	; 0x98
 80074aa:	f000 fbeb 	bl	8007c84 <SUBGRF_WriteCommand>
}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	35a4e900 	.word	0x35a4e900
 80074bc:	32a9f880 	.word	0x32a9f880
 80074c0:	2de54480 	.word	0x2de54480
 80074c4:	1b6b0b00 	.word	0x1b6b0b00
 80074c8:	1954fc40 	.word	0x1954fc40

080074cc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80074cc:	b590      	push	{r4, r7, lr}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4604      	mov	r4, r0
 80074d4:	4608      	mov	r0, r1
 80074d6:	4611      	mov	r1, r2
 80074d8:	461a      	mov	r2, r3
 80074da:	4623      	mov	r3, r4
 80074dc:	71fb      	strb	r3, [r7, #7]
 80074de:	4603      	mov	r3, r0
 80074e0:	71bb      	strb	r3, [r7, #6]
 80074e2:	460b      	mov	r3, r1
 80074e4:	717b      	strb	r3, [r7, #5]
 80074e6:	4613      	mov	r3, r2
 80074e8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80074ee:	79bb      	ldrb	r3, [r7, #6]
 80074f0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80074f2:	797b      	ldrb	r3, [r7, #5]
 80074f4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80074f6:	793b      	ldrb	r3, [r7, #4]
 80074f8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80074fa:	f107 030c 	add.w	r3, r7, #12
 80074fe:	2204      	movs	r2, #4
 8007500:	4619      	mov	r1, r3
 8007502:	2095      	movs	r0, #149	; 0x95
 8007504:	f000 fbbe 	bl	8007c84 <SUBGRF_WriteCommand>
}
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bd90      	pop	{r4, r7, pc}

08007510 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007510:	b590      	push	{r4, r7, lr}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	4611      	mov	r1, r2
 800751c:	461a      	mov	r2, r3
 800751e:	4623      	mov	r3, r4
 8007520:	80fb      	strh	r3, [r7, #6]
 8007522:	4603      	mov	r3, r0
 8007524:	80bb      	strh	r3, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	807b      	strh	r3, [r7, #2]
 800752a:	4613      	mov	r3, r2
 800752c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	0a1b      	lsrs	r3, r3, #8
 8007532:	b29b      	uxth	r3, r3
 8007534:	b2db      	uxtb	r3, r3
 8007536:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007538:	88fb      	ldrh	r3, [r7, #6]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800753e:	88bb      	ldrh	r3, [r7, #4]
 8007540:	0a1b      	lsrs	r3, r3, #8
 8007542:	b29b      	uxth	r3, r3
 8007544:	b2db      	uxtb	r3, r3
 8007546:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007548:	88bb      	ldrh	r3, [r7, #4]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800754e:	887b      	ldrh	r3, [r7, #2]
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	b29b      	uxth	r3, r3
 8007554:	b2db      	uxtb	r3, r3
 8007556:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007558:	887b      	ldrh	r3, [r7, #2]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800755e:	883b      	ldrh	r3, [r7, #0]
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	b29b      	uxth	r3, r3
 8007564:	b2db      	uxtb	r3, r3
 8007566:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8007568:	883b      	ldrh	r3, [r7, #0]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800756e:	f107 0308 	add.w	r3, r7, #8
 8007572:	2208      	movs	r2, #8
 8007574:	4619      	mov	r1, r3
 8007576:	2008      	movs	r0, #8
 8007578:	f000 fb84 	bl	8007c84 <SUBGRF_WriteCommand>
}
 800757c:	bf00      	nop
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	bd90      	pop	{r4, r7, pc}

08007584 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	b2db      	uxtb	r3, r3
 8007598:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	0a1b      	lsrs	r3, r3, #8
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80075b0:	f107 030c 	add.w	r3, r7, #12
 80075b4:	2204      	movs	r2, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	2097      	movs	r0, #151	; 0x97
 80075ba:	f000 fb63 	bl	8007c84 <SUBGRF_WriteCommand>
}
 80075be:	bf00      	nop
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80075d4:	4b1b      	ldr	r3, [pc, #108]	; (8007644 <SUBGRF_SetRfFrequency+0x7c>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	f083 0301 	eor.w	r3, r3, #1
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff ff2c 	bl	8007440 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80075e8:	4b16      	ldr	r3, [pc, #88]	; (8007644 <SUBGRF_SetRfFrequency+0x7c>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	461a      	mov	r2, r3
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	09d5      	lsrs	r5, r2, #7
 80075f8:	0654      	lsls	r4, r2, #25
 80075fa:	4a13      	ldr	r2, [pc, #76]	; (8007648 <SUBGRF_SetRfFrequency+0x80>)
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	4620      	mov	r0, r4
 8007602:	4629      	mov	r1, r5
 8007604:	f7f9 fb28 	bl	8000c58 <__aeabi_uldivmod>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4613      	mov	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	0e1b      	lsrs	r3, r3, #24
 8007614:	b2db      	uxtb	r3, r3
 8007616:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	0c1b      	lsrs	r3, r3, #16
 800761c:	b2db      	uxtb	r3, r3
 800761e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	0a1b      	lsrs	r3, r3, #8
 8007624:	b2db      	uxtb	r3, r3
 8007626:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	2204      	movs	r2, #4
 8007634:	4619      	mov	r1, r3
 8007636:	2086      	movs	r0, #134	; 0x86
 8007638:	f000 fb24 	bl	8007c84 <SUBGRF_WriteCommand>
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bdb0      	pop	{r4, r5, r7, pc}
 8007644:	20000438 	.word	0x20000438
 8007648:	01e84800 	.word	0x01e84800

0800764c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8007656:	79fa      	ldrb	r2, [r7, #7]
 8007658:	4b09      	ldr	r3, [pc, #36]	; (8007680 <SUBGRF_SetPacketType+0x34>)
 800765a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d104      	bne.n	800766c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8007662:	2100      	movs	r1, #0
 8007664:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007668:	f000 fa90 	bl	8007b8c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800766c:	1dfb      	adds	r3, r7, #7
 800766e:	2201      	movs	r2, #1
 8007670:	4619      	mov	r1, r3
 8007672:	208a      	movs	r0, #138	; 0x8a
 8007674:	f000 fb06 	bl	8007c84 <SUBGRF_WriteCommand>
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000431 	.word	0x20000431

08007684 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
    return PacketType;
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <SUBGRF_GetPacketType+0x10>)
 800768a:	781b      	ldrb	r3, [r3, #0]
}
 800768c:	4618      	mov	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	bc80      	pop	{r7}
 8007692:	4770      	bx	lr
 8007694:	20000431 	.word	0x20000431

08007698 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	71fb      	strb	r3, [r7, #7]
 80076a2:	460b      	mov	r3, r1
 80076a4:	71bb      	strb	r3, [r7, #6]
 80076a6:	4613      	mov	r3, r2
 80076a8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d124      	bne.n	80076fa <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 80076b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80076b4:	2b0f      	cmp	r3, #15
 80076b6:	d106      	bne.n	80076c6 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80076b8:	2301      	movs	r3, #1
 80076ba:	2201      	movs	r2, #1
 80076bc:	2100      	movs	r1, #0
 80076be:	2006      	movs	r0, #6
 80076c0:	f7ff ff04 	bl	80074cc <SUBGRF_SetPaConfig>
 80076c4:	e005      	b.n	80076d2 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80076c6:	2301      	movs	r3, #1
 80076c8:	2201      	movs	r2, #1
 80076ca:	2100      	movs	r1, #0
 80076cc:	2004      	movs	r0, #4
 80076ce:	f7ff fefd 	bl	80074cc <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 80076d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80076d6:	2b0d      	cmp	r3, #13
 80076d8:	dd02      	ble.n	80076e0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 80076da:	230e      	movs	r3, #14
 80076dc:	71bb      	strb	r3, [r7, #6]
 80076de:	e006      	b.n	80076ee <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 80076e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80076e4:	f113 0f11 	cmn.w	r3, #17
 80076e8:	da01      	bge.n	80076ee <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 80076ea:	23ef      	movs	r3, #239	; 0xef
 80076ec:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80076ee:	2118      	movs	r1, #24
 80076f0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80076f4:	f000 fa4a 	bl	8007b8c <SUBGRF_WriteRegister>
 80076f8:	e025      	b.n	8007746 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80076fa:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80076fe:	f000 fa59 	bl	8007bb4 <SUBGRF_ReadRegister>
 8007702:	4603      	mov	r3, r0
 8007704:	f043 031e 	orr.w	r3, r3, #30
 8007708:	b2db      	uxtb	r3, r3
 800770a:	4619      	mov	r1, r3
 800770c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007710:	f000 fa3c 	bl	8007b8c <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8007714:	2301      	movs	r3, #1
 8007716:	2200      	movs	r2, #0
 8007718:	2107      	movs	r1, #7
 800771a:	2004      	movs	r0, #4
 800771c:	f7ff fed6 	bl	80074cc <SUBGRF_SetPaConfig>
        if( power > 22 )
 8007720:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007724:	2b16      	cmp	r3, #22
 8007726:	dd02      	ble.n	800772e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8007728:	2316      	movs	r3, #22
 800772a:	71bb      	strb	r3, [r7, #6]
 800772c:	e006      	b.n	800773c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800772e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007732:	f113 0f09 	cmn.w	r3, #9
 8007736:	da01      	bge.n	800773c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8007738:	23f7      	movs	r3, #247	; 0xf7
 800773a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800773c:	2138      	movs	r1, #56	; 0x38
 800773e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007742:	f000 fa23 	bl	8007b8c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8007746:	79bb      	ldrb	r3, [r7, #6]
 8007748:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800774a:	797b      	ldrb	r3, [r7, #5]
 800774c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800774e:	f107 030c 	add.w	r3, r7, #12
 8007752:	2202      	movs	r2, #2
 8007754:	4619      	mov	r1, r3
 8007756:	208e      	movs	r0, #142	; 0x8e
 8007758:	f000 fa94 	bl	8007c84 <SUBGRF_WriteCommand>
}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8007764:	b5b0      	push	{r4, r5, r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007770:	4a5e      	ldr	r2, [pc, #376]	; (80078ec <SUBGRF_SetModulationParams+0x188>)
 8007772:	f107 0308 	add.w	r3, r7, #8
 8007776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800777a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	4b5b      	ldr	r3, [pc, #364]	; (80078f0 <SUBGRF_SetModulationParams+0x18c>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d004      	beq.n	8007794 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff ff5c 	bl	800764c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b03      	cmp	r3, #3
 800779a:	f200 80a2 	bhi.w	80078e2 <SUBGRF_SetModulationParams+0x17e>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <SUBGRF_SetModulationParams+0x40>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077b5 	.word	0x080077b5
 80077a8:	08007871 	.word	0x08007871
 80077ac:	08007833 	.word	0x08007833
 80077b0:	0800789f 	.word	0x0800789f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80077b4:	2308      	movs	r3, #8
 80077b6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	4a4d      	ldr	r2, [pc, #308]	; (80078f4 <SUBGRF_SetModulationParams+0x190>)
 80077be:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	0c1b      	lsrs	r3, r3, #16
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	0a1b      	lsrs	r3, r3, #8
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	7b1b      	ldrb	r3, [r3, #12]
 80077de:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7b5b      	ldrb	r3, [r3, #13]
 80077e4:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	461a      	mov	r2, r3
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	09d5      	lsrs	r5, r2, #7
 80077f2:	0654      	lsls	r4, r2, #25
 80077f4:	4a40      	ldr	r2, [pc, #256]	; (80078f8 <SUBGRF_SetModulationParams+0x194>)
 80077f6:	f04f 0300 	mov.w	r3, #0
 80077fa:	4620      	mov	r0, r4
 80077fc:	4629      	mov	r1, r5
 80077fe:	f7f9 fa2b 	bl	8000c58 <__aeabi_uldivmod>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4613      	mov	r3, r2
 8007808:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	b2db      	uxtb	r3, r3
 8007810:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	0a1b      	lsrs	r3, r3, #8
 8007816:	b2db      	uxtb	r3, r3
 8007818:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007820:	7cfb      	ldrb	r3, [r7, #19]
 8007822:	b29a      	uxth	r2, r3
 8007824:	f107 0308 	add.w	r3, r7, #8
 8007828:	4619      	mov	r1, r3
 800782a:	208b      	movs	r0, #139	; 0x8b
 800782c:	f000 fa2a 	bl	8007c84 <SUBGRF_WriteCommand>
        break;
 8007830:	e058      	b.n	80078e4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007832:	2304      	movs	r3, #4
 8007834:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	4a2e      	ldr	r2, [pc, #184]	; (80078f4 <SUBGRF_SetModulationParams+0x190>)
 800783c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007840:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	0c1b      	lsrs	r3, r3, #16
 8007846:	b2db      	uxtb	r3, r3
 8007848:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	0a1b      	lsrs	r3, r3, #8
 800784e:	b2db      	uxtb	r3, r3
 8007850:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	7d1b      	ldrb	r3, [r3, #20]
 800785c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800785e:	7cfb      	ldrb	r3, [r7, #19]
 8007860:	b29a      	uxth	r2, r3
 8007862:	f107 0308 	add.w	r3, r7, #8
 8007866:	4619      	mov	r1, r3
 8007868:	208b      	movs	r0, #139	; 0x8b
 800786a:	f000 fa0b 	bl	8007c84 <SUBGRF_WriteCommand>
        break;
 800786e:	e039      	b.n	80078e4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8007870:	2304      	movs	r3, #4
 8007872:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	7e1b      	ldrb	r3, [r3, #24]
 8007878:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7e5b      	ldrb	r3, [r3, #25]
 800787e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	7e9b      	ldrb	r3, [r3, #26]
 8007884:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7edb      	ldrb	r3, [r3, #27]
 800788a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800788c:	7cfb      	ldrb	r3, [r7, #19]
 800788e:	b29a      	uxth	r2, r3
 8007890:	f107 0308 	add.w	r3, r7, #8
 8007894:	4619      	mov	r1, r3
 8007896:	208b      	movs	r0, #139	; 0x8b
 8007898:	f000 f9f4 	bl	8007c84 <SUBGRF_WriteCommand>

        break;
 800789c:	e022      	b.n	80078e4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 800789e:	2305      	movs	r3, #5
 80078a0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	4a13      	ldr	r2, [pc, #76]	; (80078f4 <SUBGRF_SetModulationParams+0x190>)
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	0c1b      	lsrs	r3, r3, #16
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	0a1b      	lsrs	r3, r3, #8
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	7b1b      	ldrb	r3, [r3, #12]
 80078c8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7b5b      	ldrb	r3, [r3, #13]
 80078ce:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80078d0:	7cfb      	ldrb	r3, [r7, #19]
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	f107 0308 	add.w	r3, r7, #8
 80078d8:	4619      	mov	r1, r3
 80078da:	208b      	movs	r0, #139	; 0x8b
 80078dc:	f000 f9d2 	bl	8007c84 <SUBGRF_WriteCommand>
        break;
 80078e0:	e000      	b.n	80078e4 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80078e2:	bf00      	nop
    }
}
 80078e4:	bf00      	nop
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bdb0      	pop	{r4, r5, r7, pc}
 80078ec:	0800de60 	.word	0x0800de60
 80078f0:	20000431 	.word	0x20000431
 80078f4:	3d090000 	.word	0x3d090000
 80078f8:	01e84800 	.word	0x01e84800

080078fc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007908:	4a48      	ldr	r2, [pc, #288]	; (8007a2c <SUBGRF_SetPacketParams+0x130>)
 800790a:	f107 030c 	add.w	r3, r7, #12
 800790e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007910:	c303      	stmia	r3!, {r0, r1}
 8007912:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	781a      	ldrb	r2, [r3, #0]
 8007918:	4b45      	ldr	r3, [pc, #276]	; (8007a30 <SUBGRF_SetPacketParams+0x134>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d004      	beq.n	800792a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fe91 	bl	800764c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b03      	cmp	r3, #3
 8007930:	d878      	bhi.n	8007a24 <SUBGRF_SetPacketParams+0x128>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <SUBGRF_SetPacketParams+0x3c>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007949 	.word	0x08007949
 800793c:	080079d9 	.word	0x080079d9
 8007940:	080079cd 	.word	0x080079cd
 8007944:	08007949 	.word	0x08007949
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7a5b      	ldrb	r3, [r3, #9]
 800794c:	2bf1      	cmp	r3, #241	; 0xf1
 800794e:	d10a      	bne.n	8007966 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007950:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007954:	f7ff fb20 	bl	8006f98 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007958:	f248 0005 	movw	r0, #32773	; 0x8005
 800795c:	f7ff fb3c 	bl	8006fd8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007960:	2302      	movs	r3, #2
 8007962:	75bb      	strb	r3, [r7, #22]
 8007964:	e011      	b.n	800798a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7a5b      	ldrb	r3, [r3, #9]
 800796a:	2bf2      	cmp	r3, #242	; 0xf2
 800796c:	d10a      	bne.n	8007984 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800796e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8007972:	f7ff fb11 	bl	8006f98 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007976:	f241 0021 	movw	r0, #4129	; 0x1021
 800797a:	f7ff fb2d 	bl	8006fd8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800797e:	2306      	movs	r3, #6
 8007980:	75bb      	strb	r3, [r7, #22]
 8007982:	e002      	b.n	800798a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7a5b      	ldrb	r3, [r3, #9]
 8007988:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800798a:	2309      	movs	r3, #9
 800798c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	b29b      	uxth	r3, r3
 8007996:	b2db      	uxtb	r3, r3
 8007998:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	795b      	ldrb	r3, [r3, #5]
 80079ac:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	799b      	ldrb	r3, [r3, #6]
 80079b2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	79db      	ldrb	r3, [r3, #7]
 80079b8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7a1b      	ldrb	r3, [r3, #8]
 80079be:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80079c0:	7dbb      	ldrb	r3, [r7, #22]
 80079c2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7a9b      	ldrb	r3, [r3, #10]
 80079c8:	753b      	strb	r3, [r7, #20]
        break;
 80079ca:	e022      	b.n	8007a12 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7b1b      	ldrb	r3, [r3, #12]
 80079d4:	733b      	strb	r3, [r7, #12]
        break;
 80079d6:	e01c      	b.n	8007a12 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80079d8:	2306      	movs	r3, #6
 80079da:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	89db      	ldrh	r3, [r3, #14]
 80079e0:	0a1b      	lsrs	r3, r3, #8
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	89db      	ldrh	r3, [r3, #14]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	7c1a      	ldrb	r2, [r3, #16]
 80079f4:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <SUBGRF_SetPacketParams+0x138>)
 80079f6:	4611      	mov	r1, r2
 80079f8:	7019      	strb	r1, [r3, #0]
 80079fa:	4613      	mov	r3, r2
 80079fc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7c5b      	ldrb	r3, [r3, #17]
 8007a02:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7c9b      	ldrb	r3, [r3, #18]
 8007a08:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7cdb      	ldrb	r3, [r3, #19]
 8007a0e:	747b      	strb	r3, [r7, #17]
        break;
 8007a10:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	f107 030c 	add.w	r3, r7, #12
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	208c      	movs	r0, #140	; 0x8c
 8007a1e:	f000 f931 	bl	8007c84 <SUBGRF_WriteCommand>
 8007a22:	e000      	b.n	8007a26 <SUBGRF_SetPacketParams+0x12a>
        return;
 8007a24:	bf00      	nop
}
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	0800de68 	.word	0x0800de68
 8007a30:	20000431 	.word	0x20000431
 8007a34:	20000432 	.word	0x20000432

08007a38 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	460a      	mov	r2, r1
 8007a42:	71fb      	strb	r3, [r7, #7]
 8007a44:	4613      	mov	r3, r2
 8007a46:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007a4c:	79bb      	ldrb	r3, [r7, #6]
 8007a4e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007a50:	f107 030c 	add.w	r3, r7, #12
 8007a54:	2202      	movs	r2, #2
 8007a56:	4619      	mov	r1, r3
 8007a58:	208f      	movs	r0, #143	; 0x8f
 8007a5a:	f000 f913 	bl	8007c84 <SUBGRF_WriteCommand>
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8007a70:	1d3b      	adds	r3, r7, #4
 8007a72:	2201      	movs	r2, #1
 8007a74:	4619      	mov	r1, r3
 8007a76:	2015      	movs	r0, #21
 8007a78:	f000 f918 	bl	8007cac <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8007a7c:	793b      	ldrb	r3, [r7, #4]
 8007a7e:	425b      	negs	r3, r3
 8007a80:	105b      	asrs	r3, r3, #1
 8007a82:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8007a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007a9a:	f107 030c 	add.w	r3, r7, #12
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	2013      	movs	r0, #19
 8007aa4:	f000 f902 	bl	8007cac <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007aa8:	f7ff fdec 	bl	8007684 <SUBGRF_GetPacketType>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d10d      	bne.n	8007ace <SUBGRF_GetRxBufferStatus+0x3e>
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <SUBGRF_GetRxBufferStatus+0x54>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d108      	bne.n	8007ace <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007abc:	f240 7002 	movw	r0, #1794	; 0x702
 8007ac0:	f000 f878 	bl	8007bb4 <SUBGRF_ReadRegister>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e002      	b.n	8007ad4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8007ace:	7b3a      	ldrb	r2, [r7, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007ad4:	7b7a      	ldrb	r2, [r7, #13]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	701a      	strb	r2, [r3, #0]
}
 8007ada:	bf00      	nop
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000432 	.word	0x20000432

08007ae8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007af0:	f107 030c 	add.w	r3, r7, #12
 8007af4:	2203      	movs	r2, #3
 8007af6:	4619      	mov	r1, r3
 8007af8:	2014      	movs	r0, #20
 8007afa:	f000 f8d7 	bl	8007cac <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007afe:	f7ff fdc1 	bl	8007684 <SUBGRF_GetPacketType>
 8007b02:	4603      	mov	r3, r0
 8007b04:	461a      	mov	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <SUBGRF_GetPacketStatus+0x30>
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d013      	beq.n	8007b3e <SUBGRF_GetPacketStatus+0x56>
 8007b16:	e02a      	b.n	8007b6e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007b18:	7b3a      	ldrb	r2, [r7, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007b1e:	7b7b      	ldrb	r3, [r7, #13]
 8007b20:	425b      	negs	r3, r3
 8007b22:	105b      	asrs	r3, r3, #1
 8007b24:	b25a      	sxtb	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	425b      	negs	r3, r3
 8007b2e:	105b      	asrs	r3, r3, #1
 8007b30:	b25a      	sxtb	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	609a      	str	r2, [r3, #8]
            break;
 8007b3c:	e020      	b.n	8007b80 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007b3e:	7b3b      	ldrb	r3, [r7, #12]
 8007b40:	425b      	negs	r3, r3
 8007b42:	105b      	asrs	r3, r3, #1
 8007b44:	b25a      	sxtb	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8007b4a:	7b7b      	ldrb	r3, [r7, #13]
 8007b4c:	b25b      	sxtb	r3, r3
 8007b4e:	3302      	adds	r3, #2
 8007b50:	109b      	asrs	r3, r3, #2
 8007b52:	b25a      	sxtb	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	425b      	negs	r3, r3
 8007b5c:	105b      	asrs	r3, r3, #1
 8007b5e:	b25a      	sxtb	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007b64:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <SUBGRF_GetPacketStatus+0xa0>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	611a      	str	r2, [r3, #16]
            break;
 8007b6c:	e008      	b.n	8007b80 <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 8007b6e:	2214      	movs	r2, #20
 8007b70:	2100      	movs	r1, #0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fae4 	bl	8009140 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	220f      	movs	r2, #15
 8007b7c:	701a      	strb	r2, [r3, #0]
            break;
 8007b7e:	bf00      	nop
    }
}
 8007b80:	bf00      	nop
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20000434 	.word	0x20000434

08007b8c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	460a      	mov	r2, r1
 8007b96:	80fb      	strh	r3, [r7, #6]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007b9c:	1d7a      	adds	r2, r7, #5
 8007b9e:	88f9      	ldrh	r1, [r7, #6]
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	4803      	ldr	r0, [pc, #12]	; (8007bb0 <SUBGRF_WriteRegister+0x24>)
 8007ba4:	f7fc f8ea 	bl	8003d7c <HAL_SUBGHZ_WriteRegisters>
}
 8007ba8:	bf00      	nop
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200004ec 	.word	0x200004ec

08007bb4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8007bbe:	f107 020f 	add.w	r2, r7, #15
 8007bc2:	88f9      	ldrh	r1, [r7, #6]
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4804      	ldr	r0, [pc, #16]	; (8007bd8 <SUBGRF_ReadRegister+0x24>)
 8007bc8:	f7fc f937 	bl	8003e3a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	200004ec 	.word	0x200004ec

08007bdc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	80fb      	strh	r3, [r7, #6]
 8007be8:	4613      	mov	r3, r2
 8007bea:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007bec:	88bb      	ldrh	r3, [r7, #4]
 8007bee:	88f9      	ldrh	r1, [r7, #6]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	4803      	ldr	r0, [pc, #12]	; (8007c00 <SUBGRF_WriteRegisters+0x24>)
 8007bf4:	f7fc f8c2 	bl	8003d7c <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	200004ec 	.word	0x200004ec

08007c04 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	6039      	str	r1, [r7, #0]
 8007c0e:	80fb      	strh	r3, [r7, #6]
 8007c10:	4613      	mov	r3, r2
 8007c12:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8007c14:	88bb      	ldrh	r3, [r7, #4]
 8007c16:	88f9      	ldrh	r1, [r7, #6]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	4803      	ldr	r0, [pc, #12]	; (8007c28 <SUBGRF_ReadRegisters+0x24>)
 8007c1c:	f7fc f90d 	bl	8003e3a <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	200004ec 	.word	0x200004ec

08007c2c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007c3c:	79bb      	ldrb	r3, [r7, #6]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	79f9      	ldrb	r1, [r7, #7]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	4803      	ldr	r0, [pc, #12]	; (8007c54 <SUBGRF_WriteBuffer+0x28>)
 8007c46:	f7fc fa0c 	bl	8004062 <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	200004ec 	.word	0x200004ec

08007c58 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	6039      	str	r1, [r7, #0]
 8007c62:	71fb      	strb	r3, [r7, #7]
 8007c64:	4613      	mov	r3, r2
 8007c66:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007c68:	79bb      	ldrb	r3, [r7, #6]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	79f9      	ldrb	r1, [r7, #7]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4803      	ldr	r0, [pc, #12]	; (8007c80 <SUBGRF_ReadBuffer+0x28>)
 8007c72:	f7fc fa49 	bl	8004108 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	200004ec 	.word	0x200004ec

08007c84 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	71fb      	strb	r3, [r7, #7]
 8007c90:	4613      	mov	r3, r2
 8007c92:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007c94:	88bb      	ldrh	r3, [r7, #4]
 8007c96:	79f9      	ldrb	r1, [r7, #7]
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	4803      	ldr	r0, [pc, #12]	; (8007ca8 <SUBGRF_WriteCommand+0x24>)
 8007c9c:	f7fc f92e 	bl	8003efc <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	200004ec 	.word	0x200004ec

08007cac <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	6039      	str	r1, [r7, #0]
 8007cb6:	71fb      	strb	r3, [r7, #7]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007cbc:	88bb      	ldrh	r3, [r7, #4]
 8007cbe:	79f9      	ldrb	r1, [r7, #7]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	4803      	ldr	r0, [pc, #12]	; (8007cd0 <SUBGRF_ReadCommand+0x24>)
 8007cc4:	f7fc f979 	bl	8003fba <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	200004ec 	.word	0x200004ec

08007cd4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	460a      	mov	r2, r1
 8007cde:	71fb      	strb	r3, [r7, #7]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007ce8:	79bb      	ldrb	r3, [r7, #6]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d10d      	bne.n	8007d0a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d104      	bne.n	8007cfe <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007cf8:	2004      	movs	r0, #4
 8007cfa:	f000 f8df 	bl	8007ebc <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d107      	bne.n	8007d14 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8007d04:	2303      	movs	r3, #3
 8007d06:	73fb      	strb	r3, [r7, #15]
 8007d08:	e004      	b.n	8007d14 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8007d0a:	79bb      	ldrb	r3, [r7, #6]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7f9 fbfd 	bl	8001516 <RBI_ConfigRFSwitch>
}
 8007d1c:	bf00      	nop
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007d32:	f7f9 fbfe 	bl	8001532 <RBI_GetTxConfig>
 8007d36:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d016      	beq.n	8007d6c <SUBGRF_SetRfTxPower+0x48>
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	dc16      	bgt.n	8007d72 <SUBGRF_SetRfTxPower+0x4e>
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <SUBGRF_SetRfTxPower+0x2e>
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d00a      	beq.n	8007d66 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8007d50:	e00f      	b.n	8007d72 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8007d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d56:	2b0f      	cmp	r3, #15
 8007d58:	dd02      	ble.n	8007d60 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	73fb      	strb	r3, [r7, #15]
            break;
 8007d5e:	e009      	b.n	8007d74 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
            break;
 8007d64:	e006      	b.n	8007d74 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8007d66:	2301      	movs	r3, #1
 8007d68:	73fb      	strb	r3, [r7, #15]
            break;
 8007d6a:	e003      	b.n	8007d74 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	73fb      	strb	r3, [r7, #15]
            break;
 8007d70:	e000      	b.n	8007d74 <SUBGRF_SetRfTxPower+0x50>
            break;
 8007d72:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007d74:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff fc8b 	bl	8007698 <SUBGRF_SetTxParams>

    return paSelect;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8007d90:	2301      	movs	r3, #1
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr
	...

08007d9c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8007da4:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2001      	movs	r0, #1
 8007daa:	4798      	blx	r3
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	2000043c 	.word	0x2000043c

08007db8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007dc0:	4b03      	ldr	r3, [pc, #12]	; (8007dd0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2002      	movs	r0, #2
 8007dc6:	4798      	blx	r3
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	2000043c 	.word	0x2000043c

08007dd4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8007ddc:	4b03      	ldr	r3, [pc, #12]	; (8007dec <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2040      	movs	r0, #64	; 0x40
 8007de2:	4798      	blx	r3
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	2000043c 	.word	0x2000043c

08007df0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d005      	beq.n	8007e12 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8007e06:	e00a      	b.n	8007e1e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007e08:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2080      	movs	r0, #128	; 0x80
 8007e0e:	4798      	blx	r3
            break;
 8007e10:	e005      	b.n	8007e1e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8007e12:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007e1a:	4798      	blx	r3
            break;
 8007e1c:	bf00      	nop
    }
}
 8007e1e:	bf00      	nop
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	2000043c 	.word	0x2000043c

08007e2c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8007e34:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007e3c:	4798      	blx	r3
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	2000043c 	.word	0x2000043c

08007e4c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8007e54:	4b03      	ldr	r3, [pc, #12]	; (8007e64 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2020      	movs	r0, #32
 8007e5a:	4798      	blx	r3
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	2000043c 	.word	0x2000043c

08007e68 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8007e70:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2004      	movs	r0, #4
 8007e76:	4798      	blx	r3
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	2000043c 	.word	0x2000043c

08007e84 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8007e8c:	4b03      	ldr	r3, [pc, #12]	; (8007e9c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2008      	movs	r0, #8
 8007e92:	4798      	blx	r3
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	2000043c 	.word	0x2000043c

08007ea0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8007ea8:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2010      	movs	r0, #16
 8007eae:	4798      	blx	r3
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	2000043c 	.word	0x2000043c

08007ebc <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8007ec6:	f7f9 fb42 	bl	800154e <RBI_IsDCDC>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d112      	bne.n	8007ef6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8007ed0:	f640 1023 	movw	r0, #2339	; 0x923
 8007ed4:	f7ff fe6e 	bl	8007bb4 <SUBGRF_ReadRegister>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	f023 0306 	bic.w	r3, r3, #6
 8007ee2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8007ee4:	7bfa      	ldrb	r2, [r7, #15]
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	4619      	mov	r1, r3
 8007eee:	f640 1023 	movw	r0, #2339	; 0x923
 8007ef2:	f7ff fe4b 	bl	8007b8c <SUBGRF_WriteRegister>
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8007f0e:	231f      	movs	r3, #31
 8007f10:	e016      	b.n	8007f40 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]
 8007f16:	e00f      	b.n	8007f38 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	4a0c      	ldr	r2, [pc, #48]	; (8007f4c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007f1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d205      	bcs.n	8007f32 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	4a08      	ldr	r2, [pc, #32]	; (8007f4c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	791b      	ldrb	r3, [r3, #4]
 8007f30:	e006      	b.n	8007f40 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	3301      	adds	r3, #1
 8007f36:	73fb      	strb	r3, [r7, #15]
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	2b15      	cmp	r3, #21
 8007f3c:	d9ec      	bls.n	8007f18 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8007f3e:	e7fe      	b.n	8007f3e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	0800e26c 	.word	0x0800e26c

08007f50 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	; 0x28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8007f5a:	4b36      	ldr	r3, [pc, #216]	; (8008034 <SUBGRF_GetCFO+0xe4>)
 8007f5c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8007f5e:	f640 0007 	movw	r0, #2055	; 0x807
 8007f62:	f7ff fe27 	bl	8007bb4 <SUBGRF_ReadRegister>
 8007f66:	4603      	mov	r3, r0
 8007f68:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007f6a:	7ffb      	ldrb	r3, [r7, #31]
 8007f6c:	08db      	lsrs	r3, r3, #3
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007f78:	4413      	add	r3, r2
 8007f7a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007f7e:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8007f80:	7ffb      	ldrb	r3, [r7, #31]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8007f88:	7fba      	ldrb	r2, [r7, #30]
 8007f8a:	7f7b      	ldrb	r3, [r7, #29]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	4b28      	ldr	r3, [pc, #160]	; (8008038 <SUBGRF_GetCFO+0xe8>)
 8007f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f9a:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa4:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	fb02 f303 	mul.w	r3, r2, r3
 8007fb6:	2b07      	cmp	r3, #7
 8007fb8:	d802      	bhi.n	8007fc0 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8007fba:	2302      	movs	r3, #2
 8007fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8007fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d802      	bhi.n	8007fd4 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8007fce:	2304      	movs	r3, #4
 8007fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8007fd4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	fb02 f303 	mul.w	r3, r2, r3
 8007fde:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8007fe0:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8007fe4:	f7ff fde6 	bl	8007bb4 <SUBGRF_ReadRegister>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	021b      	lsls	r3, r3, #8
 8007fec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ff0:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8007ff2:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8007ff6:	f7ff fddd 	bl	8007bb4 <SUBGRF_ReadRegister>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	4313      	orrs	r3, r2
 8008002:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800800a:	2b00      	cmp	r3, #0
 800800c:	d005      	beq.n	800801a <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8008014:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8008018:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	095b      	lsrs	r3, r3, #5
 800801e:	6a3a      	ldr	r2, [r7, #32]
 8008020:	fb02 f303 	mul.w	r3, r2, r3
 8008024:	11da      	asrs	r2, r3, #7
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	601a      	str	r2, [r3, #0]
}
 800802a:	bf00      	nop
 800802c:	3728      	adds	r7, #40	; 0x28
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	0c0a0804 	.word	0x0c0a0804
 8008038:	01e84800 	.word	0x01e84800

0800803c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800804e:	f04f 33ff 	mov.w	r3, #4294967295
 8008052:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008054:	697b      	ldr	r3, [r7, #20]
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	bc80      	pop	{r7}
 800805e:	4770      	bx	lr

08008060 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8008072:	f04f 33ff 	mov.w	r3, #4294967295
 8008076:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008078:	697b      	ldr	r3, [r7, #20]
}
 800807a:	4618      	mov	r0, r3
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr

08008084 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8008090:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr

0800809e <RFW_DeInit>:

void RFW_DeInit( void)
{
 800809e:	b480      	push	{r7}
 80080a0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80080a2:	bf00      	nop
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc80      	pop	{r7}
 80080a8:	4770      	bx	lr

080080aa <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 80080aa:	b480      	push	{r7}
 80080ac:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 80080ae:	2300      	movs	r3, #0
#endif
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr

080080b8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 80080bc:	2300      	movs	r3, #0
#endif
}
 80080be:	4618      	mov	r0, r3
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bc80      	pop	{r7}
 80080c4:	4770      	bx	lr

080080c6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	4603      	mov	r3, r0
 80080ce:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 80080da:	b480      	push	{r7}
 80080dc:	b087      	sub	sp, #28
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	460b      	mov	r3, r1
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 80080e8:	f04f 33ff 	mov.w	r3, #4294967295
 80080ec:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 80080ee:	697b      	ldr	r3, [r7, #20]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr

080080fa <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 80080fa:	b480      	push	{r7}
 80080fc:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 80080fe:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8008102:	4618      	mov	r0, r3
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr

0800810a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800810a:	b480      	push	{r7}
 800810c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800810e:	bf00      	nop
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr

08008116 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8008116:	b480      	push	{r7}
 8008118:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800811a:	bf00      	nop
 800811c:	46bd      	mov	sp, r7
 800811e:	bc80      	pop	{r7}
 8008120:	4770      	bx	lr

08008122 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	4603      	mov	r3, r0
 800812a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr
	...

08008138 <list_new>:
/*
 * Returns allocated list with uncounted sentinel element.
 */
struct list *list_new(bool (*compare)(void *a, void *b),
                      void (*delete_)(void *data))
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
	struct list *l = malloc(sizeof(*l));
 8008142:	2010      	movs	r0, #16
 8008144:	f000 ffde 	bl	8009104 <malloc>
 8008148:	4603      	mov	r3, r0
 800814a:	60fb      	str	r3, [r7, #12]
	if (l == NULL) {
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d104      	bne.n	800815c <list_new+0x24>
		perror("list_new()");
 8008152:	4818      	ldr	r0, [pc, #96]	; (80081b4 <list_new+0x7c>)
 8008154:	f001 fd9a 	bl	8009c8c <perror>
		return NULL;
 8008158:	2300      	movs	r3, #0
 800815a:	e027      	b.n	80081ac <list_new+0x74>
	}

	/* A sentinel is used to elimnate edge cases everywhere else */
	struct list_node *sentinel = list_node_new(NULL ,0);
 800815c:	2100      	movs	r1, #0
 800815e:	2000      	movs	r0, #0
 8008160:	f000 f958 	bl	8008414 <list_node_new>
 8008164:	60b8      	str	r0, [r7, #8]
	if (sentinel == NULL) {
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <list_new+0x3e>
		free(l);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 ffd1 	bl	8009114 <free>
		return NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	e01a      	b.n	80081ac <list_new+0x74>
	}

	l->sentinel = sentinel;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	601a      	str	r2, [r3, #0]
	l->size = 0;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	605a      	str	r2, [r3, #4]

	sentinel->sentinel = true;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2201      	movs	r2, #1
 8008186:	721a      	strb	r2, [r3, #8]
	sentinel->next = sentinel;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	601a      	str	r2, [r3, #0]
	sentinel->prev = sentinel;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	605a      	str	r2, [r3, #4]


	l->compare = (compare == NULL)
		? &list_default_compare
		: compare;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <list_new+0x66>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	e000      	b.n	80081a0 <list_new+0x68>
 800819e:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <list_new+0x80>)
	l->compare = (compare == NULL)
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	6093      	str	r3, [r2, #8]

	l->delete_ = delete_;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	60da      	str	r2, [r3, #12]

	return l;
 80081aa:	68fb      	ldr	r3, [r7, #12]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	0800de74 	.word	0x0800de74
 80081b8:	080083ed 	.word	0x080083ed

080081bc <list_insert>:
 * Inserts n at pos in O(n/2). Returns n if successful, else NULL.
 *
 * Position 0 inserts at the front and n inserts at the end in O(1).
 */
struct list_node *list_insert(struct list *self, int pos, struct list_node *n)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
	if (self == NULL) {
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <list_insert+0x1c>
		list_debug("list_insert(): self was NULL");
 80081ce:	480e      	ldr	r0, [pc, #56]	; (8008208 <list_insert+0x4c>)
 80081d0:	f000 f99b 	bl	800850a <list_debug>
		return NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	e012      	b.n	80081fe <list_insert+0x42>
	}

	n = list_node_link(n, list_index(self, pos));
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 f89c 	bl	8008318 <list_index>
 80081e0:	4603      	mov	r3, r0
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f945 	bl	8008474 <list_node_link>
 80081ea:	6078      	str	r0, [r7, #4]
	if (n)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <list_insert+0x40>
		++self->size;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	605a      	str	r2, [r3, #4]
	return n;
 80081fc:	687b      	ldr	r3, [r7, #4]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	0800de80 	.word	0x0800de80

0800820c <list_search>:

/*
 * Use compare function to return found node, else NULL.
 */
struct list_node *list_search(struct list *self, void *data) 
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	struct list_node *n = list_head(self);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f856 	bl	80082c8 <list_head>
 800821c:	60f8      	str	r0, [r7, #12]
	
	while (!list_end(n)) {
 800821e:	e00e      	b.n	800823e <list_search+0x32>
		
		if (self->compare(data, n->data))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	68d2      	ldr	r2, [r2, #12]
 8008228:	4611      	mov	r1, r2
 800822a:	6838      	ldr	r0, [r7, #0]
 800822c:	4798      	blx	r3
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <list_search+0x2c>
			return n;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	e00c      	b.n	8008252 <list_search+0x46>
		n = n->next;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60fb      	str	r3, [r7, #12]
	while (!list_end(n)) {
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f8c0 	bl	80083c4 <list_end>
 8008244:	4603      	mov	r3, r0
 8008246:	f083 0301 	eor.w	r3, r3, #1
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e7      	bne.n	8008220 <list_search+0x14>
	}
	return NULL;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <list_remove>:
 * Unlinks node from list at pos, returns node (to be freed).
 *
 * 0 is front, -1 (or n - 1), both are done in O(1). Else O(n/2).
 */
void list_remove(struct list *self, struct list_node * node)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	
	if (self == NULL) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d103      	bne.n	8008274 <list_remove+0x18>
		//list_debug("list_delete(): self was NULL");
		printf("list_delete(): self was NULL");
 800826c:	480b      	ldr	r0, [pc, #44]	; (800829c <list_remove+0x40>)
 800826e:	f001 fd15 	bl	8009c9c <iprintf>
		return ;
 8008272:	e010      	b.n	8008296 <list_remove+0x3a>
	}

	if(node == NULL)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00c      	beq.n	8008294 <list_remove+0x38>
	{
		
		return ;
	}
		
	struct list_node *n = list_node_unlink(node);
 800827a:	6838      	ldr	r0, [r7, #0]
 800827c:	f000 f928 	bl	80084d0 <list_node_unlink>
 8008280:	60f8      	str	r0, [r7, #12]
	if (n)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d006      	beq.n	8008296 <list_remove+0x3a>
	{
		--self->size;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	1e5a      	subs	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	605a      	str	r2, [r3, #4]
 8008292:	e000      	b.n	8008296 <list_remove+0x3a>
		return ;
 8008294:	bf00      	nop
	
	}

}
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	0800dea0 	.word	0x0800dea0

080082a0 <list_push_back>:

/*
 * Pushes n to back of list in O(1).
 */
struct list_node *list_push_back(struct list *self, struct list_node *n)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
	return list_insert(self, list_size(self), n);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f876 	bl	800839c <list_size>
 80082b0:	4603      	mov	r3, r0
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff ff80 	bl	80081bc <list_insert>
 80082bc:	4603      	mov	r3, r0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <list_head>:

/*
 * Returns pointer to head node of list in O(1).
 */
struct list_node *list_head(struct list *self)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <list_head+0x18>
		list_debug("list_head(): self was NULL");
 80082d6:	480e      	ldr	r0, [pc, #56]	; (8008310 <list_head+0x48>)
 80082d8:	f000 f917 	bl	800850a <list_debug>
		return NULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	e012      	b.n	8008306 <list_head+0x3e>
	}

	if (!list_end(self->sentinel)) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f86d 	bl	80083c4 <list_end>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f083 0301 	eor.w	r3, r3, #1
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <list_head+0x38>
		list_debug("list_head(): sentinel was malformed");
 80082f6:	4807      	ldr	r0, [pc, #28]	; (8008314 <list_head+0x4c>)
 80082f8:	f000 f907 	bl	800850a <list_debug>
		return NULL;
 80082fc:	2300      	movs	r3, #0
 80082fe:	e002      	b.n	8008306 <list_head+0x3e>
	}

	return self->sentinel->next;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	0800dec0 	.word	0x0800dec0
 8008314:	0800dedc 	.word	0x0800dedc

08008318 <list_index>:
 * Returns node at pos in O(n/2).
 *
 * Iterates from the closest end. Supports negative pos arguments.
 */
struct list_node *list_index(struct list *self, int pos)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
	int s = list_size(self);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f83a 	bl	800839c <list_size>
 8008328:	4603      	mov	r3, r0
 800832a:	60bb      	str	r3, [r7, #8]

	/* handle negative positions */
	if (pos < 0)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	da03      	bge.n	800833a <list_index+0x22>
		pos += s;
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	4413      	add	r3, r2
 8008338:	603b      	str	r3, [r7, #0]

	struct list_node *n = NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]


	if (pos <= s/2) {
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	0fda      	lsrs	r2, r3, #31
 8008342:	4413      	add	r3, r2
 8008344:	105b      	asrs	r3, r3, #1
 8008346:	461a      	mov	r2, r3
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	4293      	cmp	r3, r2
 800834c:	dc11      	bgt.n	8008372 <list_index+0x5a>
		n = list_head(self);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff ffba 	bl	80082c8 <list_head>
 8008354:	6178      	str	r0, [r7, #20]
		for (int i = 0; i < pos; ++i)
 8008356:	2300      	movs	r3, #0
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	e005      	b.n	8008368 <list_index+0x50>
			n = n->next;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < pos; ++i)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3301      	adds	r3, #1
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	dbf5      	blt.n	800835c <list_index+0x44>
 8008370:	e00f      	b.n	8008392 <list_index+0x7a>
	} else {
		n = self->sentinel; /* for push_back */
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e005      	b.n	800838a <list_index+0x72>
			n = n->prev;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3b01      	subs	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	dcf5      	bgt.n	800837e <list_index+0x66>
	}

	return n;
 8008392:	697b      	ldr	r3, [r7, #20]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <list_size>:

/*
 * Returns the number of nodes in list. Does not count the sentinel.
 */
size_t list_size(struct list *self)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d104      	bne.n	80083b4 <list_size+0x18>
		list_debug("list_size(): self was NULL");
 80083aa:	4805      	ldr	r0, [pc, #20]	; (80083c0 <list_size+0x24>)
 80083ac:	f000 f8ad 	bl	800850a <list_debug>
		return 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	e001      	b.n	80083b8 <list_size+0x1c>
	}

	return self->size;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	0800df40 	.word	0x0800df40

080083c4 <list_end>:
 *
 * This is an indication that an iteration has reached the end of the
 * list. *Not* the last data-carrying node of the list.
 */
bool list_end(struct list_node *n)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
	if (n == NULL) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <list_end+0x18>
		list_debug("list_end(): n was NULL");
 80083d2:	4805      	ldr	r0, [pc, #20]	; (80083e8 <list_end+0x24>)
 80083d4:	f000 f899 	bl	800850a <list_debug>
		return false;
 80083d8:	2300      	movs	r3, #0
 80083da:	e001      	b.n	80083e0 <list_end+0x1c>
	}

	return n->sentinel;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	7a1b      	ldrb	r3, [r3, #8]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	0800df5c 	.word	0x0800df5c

080083ec <list_default_compare>:

/*
 * Default comparison for list of strings.
 */
static bool list_default_compare(void *a, void *b)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
	return (strcmp((char *)a, (char *)b) == 0);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7f7 fec1 	bl	8000180 <strcmp>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	bf0c      	ite	eq
 8008404:	2301      	moveq	r3, #1
 8008406:	2300      	movne	r3, #0
 8008408:	b2db      	uxtb	r3, r3
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <list_node_new>:
 * Allocates new list_node with data.
 *
 * Sentinel flag is false. The next and prev pointers are null.
 */
struct list_node *list_node_new(void *data , size_t siz)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
	struct list_node *n = malloc(sizeof(*n));
 800841e:	2010      	movs	r0, #16
 8008420:	f000 fe70 	bl	8009104 <malloc>
 8008424:	4603      	mov	r3, r0
 8008426:	60fb      	str	r3, [r7, #12]
	if (n == NULL) {
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <list_node_new+0x24>
		perror("list_node_new()");
 800842e:	4810      	ldr	r0, [pc, #64]	; (8008470 <list_node_new+0x5c>)
 8008430:	f001 fc2c 	bl	8009c8c <perror>
		return NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	e017      	b.n	8008468 <list_node_new+0x54>
	}

	n->sentinel = false;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	721a      	strb	r2, [r3, #8]
	n->next = NULL;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
	n->prev = NULL;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	605a      	str	r2, [r3, #4]
	n->data =  malloc(siz) ;//data;
 800844a:	6838      	ldr	r0, [r7, #0]
 800844c:	f000 fe5a 	bl	8009104 <malloc>
 8008450:	4603      	mov	r3, r0
 8008452:	461a      	mov	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	60da      	str	r2, [r3, #12]
	memcpy(n->data , data , siz);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fe5f 	bl	8009124 <memcpy>
	return n;
 8008466:	68fb      	ldr	r3, [r7, #12]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	0800dfe8 	.word	0x0800dfe8

08008474 <list_node_link>:
 * prepends (think cons).
 *
 * Size is not incremented!
 */
struct list_node *list_node_link(struct list_node *b, struct list_node *c)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
	if (b == NULL) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <list_node_link+0x1a>
		list_debug("list_node_link(): b was NULL");
 8008484:	4810      	ldr	r0, [pc, #64]	; (80084c8 <list_node_link+0x54>)
 8008486:	f000 f840 	bl	800850a <list_debug>
		return NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	e017      	b.n	80084be <list_node_link+0x4a>
	}

	if (c == NULL) {
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <list_node_link+0x2a>
		list_debug("list_node_link(): c was NULL");
 8008494:	480d      	ldr	r0, [pc, #52]	; (80084cc <list_node_link+0x58>)
 8008496:	f000 f838 	bl	800850a <list_debug>
		return NULL;
 800849a:	2300      	movs	r3, #0
 800849c:	e00f      	b.n	80084be <list_node_link+0x4a>
	}

	struct list_node *a = c->prev;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	60fb      	str	r3, [r7, #12]

	a->next = b;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	601a      	str	r2, [r3, #0]
	b->prev = a;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	605a      	str	r2, [r3, #4]
	b->next = c;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	601a      	str	r2, [r3, #0]
	c->prev = b;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	605a      	str	r2, [r3, #4]

	return b;
 80084bc:	687b      	ldr	r3, [r7, #4]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	0800dff8 	.word	0x0800dff8
 80084cc:	0800e018 	.word	0x0800e018

080084d0 <list_node_unlink>:
 * Nodes a and c are found from b. Yay double links.
 *
 * Size is not decremented!
 */
struct list_node *list_node_unlink(struct list_node *b)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	if (list_end(b)) {
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff ff73 	bl	80083c4 <list_end>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <list_node_unlink+0x18>
		return NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	e00c      	b.n	8008502 <list_node_unlink+0x32>
	}

	struct list_node *a = b->prev;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	60fb      	str	r3, [r7, #12]
	struct list_node *c = b->next;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60bb      	str	r3, [r7, #8]

	a->next = c;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	601a      	str	r2, [r3, #0]
	c->prev = a;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	605a      	str	r2, [r3, #4]

	return b;
 8008500:	687b      	ldr	r3, [r7, #4]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <list_debug>:

static void list_debug(const char *format, ...)
{
 800850a:	b40f      	push	{r0, r1, r2, r3}
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
	fprintf(stderr, "debug: ");
	vfprintf(stderr, format, ap);
	fprintf(stderr, "\n");

	va_end(ap);
}
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	b004      	add	sp, #16
 800851a:	4770      	bx	lr

0800851c <find_packet_by_Id>:
	State_tran_valide_packet = true ;
}
*/

bool find_packet_by_Id(void* packet_id ,void* arg2 )
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
    int id = (int)packet_id;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	60fb      	str	r3, [r7, #12]
    packet_t * p2 = (packet_t*)arg2;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	60bb      	str	r3, [r7, #8]

    if(id == p2->id)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	789b      	ldrb	r3, [r3, #2]
 8008532:	461a      	mov	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4293      	cmp	r3, r2
 8008538:	d101      	bne.n	800853e <find_packet_by_Id+0x22>
    {
        return true ;
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <find_packet_by_Id+0x24>
    }
    else{
        return false ;
 800853e:	2300      	movs	r3, #0
    }
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr

0800854a <rx_find_by_id>:

bool rx_find_by_id(void * pid , void * arg2)
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
	int id = (int)pid;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	60fb      	str	r3, [r7, #12]
	packet_t * p2 = (packet_t*)arg2;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	60bb      	str	r3, [r7, #8]

	if(id == p2->id)
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	789b      	ldrb	r3, [r3, #2]
 8008560:	461a      	mov	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4293      	cmp	r3, r2
 8008566:	d101      	bne.n	800856c <rx_find_by_id+0x22>
	{
		return true ;
 8008568:	2301      	movs	r3, #1
 800856a:	e000      	b.n	800856e <rx_find_by_id+0x24>
	}
	else{
		return false ;
 800856c:	2300      	movs	r3, #0
	}
}
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr

08008578 <ll_init>:
/**
 * initialize Rx and Tx lists of packets
 * and mode device in Receive Mode
 */
int ll_init(u8 addr)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	4603      	mov	r3, r0
 8008580:	71fb      	strb	r3, [r7, #7]
	device_address = addr ;
 8008582:	4a0d      	ldr	r2, [pc, #52]	; (80085b8 <ll_init+0x40>)
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	7013      	strb	r3, [r2, #0]

	Tx_packet_list = list_new(&find_packet_by_Id , &free) ;//find packet by id to remove it later
 8008588:	490c      	ldr	r1, [pc, #48]	; (80085bc <ll_init+0x44>)
 800858a:	480d      	ldr	r0, [pc, #52]	; (80085c0 <ll_init+0x48>)
 800858c:	f7ff fdd4 	bl	8008138 <list_new>
 8008590:	4603      	mov	r3, r0
 8008592:	4a0c      	ldr	r2, [pc, #48]	; (80085c4 <ll_init+0x4c>)
 8008594:	6013      	str	r3, [r2, #0]
	Rx_packet_list = list_new(&rx_find_by_id , &free) ;//find packet by src
 8008596:	4909      	ldr	r1, [pc, #36]	; (80085bc <ll_init+0x44>)
 8008598:	480b      	ldr	r0, [pc, #44]	; (80085c8 <ll_init+0x50>)
 800859a:	f7ff fdcd 	bl	8008138 <list_new>
 800859e:	4603      	mov	r3, r0
 80085a0:	4a0a      	ldr	r2, [pc, #40]	; (80085cc <ll_init+0x54>)
 80085a2:	6013      	str	r3, [r2, #0]


	Radio.Rx(LL_RX_TIMEOUT);
 80085a4:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <ll_init+0x58>)
 80085a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085ac:	4798      	blx	r3

	return 0 ;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	2000000a 	.word	0x2000000a
 80085bc:	08009115 	.word	0x08009115
 80085c0:	0800851d 	.word	0x0800851d
 80085c4:	200005d0 	.word	0x200005d0
 80085c8:	0800854b 	.word	0x0800854b
 80085cc:	200005cc 	.word	0x200005cc
 80085d0:	0800e1e4 	.word	0x0800e1e4

080085d4 <ll_send_packet>:

static int ll_send_packet(u8 dest,u8 type ,u8 id, u8 * data ,u8 len ,ask_received_callback CallBack)
{
 80085d4:	b590      	push	{r4, r7, lr}
 80085d6:	b091      	sub	sp, #68	; 0x44
 80085d8:	af04      	add	r7, sp, #16
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	4603      	mov	r3, r0
 80085de:	71fb      	strb	r3, [r7, #7]
 80085e0:	460b      	mov	r3, r1
 80085e2:	71bb      	strb	r3, [r7, #6]
 80085e4:	4613      	mov	r3, r2
 80085e6:	717b      	strb	r3, [r7, #5]
	if(list_size(Tx_packet_list) >= TX_PACKET_LIST_SIZE )
 80085e8:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <ll_send_packet+0x84>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff fed5 	bl	800839c <list_size>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b09      	cmp	r3, #9
 80085f6:	d902      	bls.n	80085fe <ll_send_packet+0x2a>
	{
		return BUFFER_FULL ;
 80085f8:	f06f 0309 	mvn.w	r3, #9
 80085fc:	e028      	b.n	8008650 <ll_send_packet+0x7c>
	}
	
	packet_t  tmp  ;
	packet_holder_t tmp_holder ;
	tmp_holder.Ask_callback = CallBack ;
 80085fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008600:	623b      	str	r3, [r7, #32]
	
	packet(&tmp , device_address , dest , type ,id,data , len);
 8008602:	4b16      	ldr	r3, [pc, #88]	; (800865c <ll_send_packet+0x88>)
 8008604:	7819      	ldrb	r1, [r3, #0]
 8008606:	79bc      	ldrb	r4, [r7, #6]
 8008608:	79fa      	ldrb	r2, [r7, #7]
 800860a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800860e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	797b      	ldrb	r3, [r7, #5]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4623      	mov	r3, r4
 800861e:	f000 fb43 	bl	8008ca8 <packet>
	
	tmp_holder.packet = tmp ;
 8008622:	f107 0308 	add.w	r3, r7, #8
 8008626:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800862a:	ca07      	ldmia	r2, {r0, r1, r2}
 800862c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tmp_holder.number_of_transmition = 0 ;
 8008630:	2300      	movs	r3, #0
 8008632:	61fb      	str	r3, [r7, #28]
	
	list_push_back(Tx_packet_list , list_node_new(&tmp_holder ,sizeof(packet_holder_t))) ;
 8008634:	4b08      	ldr	r3, [pc, #32]	; (8008658 <ll_send_packet+0x84>)
 8008636:	681c      	ldr	r4, [r3, #0]
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	211c      	movs	r1, #28
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff fee8 	bl	8008414 <list_node_new>
 8008644:	4603      	mov	r3, r0
 8008646:	4619      	mov	r1, r3
 8008648:	4620      	mov	r0, r4
 800864a:	f7ff fe29 	bl	80082a0 <list_push_back>
	
	(void) tmp ;
	(void) tmp_holder ;

	return 0 ;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3734      	adds	r7, #52	; 0x34
 8008654:	46bd      	mov	sp, r7
 8008656:	bd90      	pop	{r4, r7, pc}
 8008658:	200005d0 	.word	0x200005d0
 800865c:	2000000a 	.word	0x2000000a

08008660 <ll_send_ASK>:

int ll_send_ASK(u8 dest ,u8 id)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af02      	add	r7, sp, #8
 8008666:	4603      	mov	r3, r0
 8008668:	460a      	mov	r2, r1
 800866a:	71fb      	strb	r3, [r7, #7]
 800866c:	4613      	mov	r3, r2
 800866e:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_ASK ,id ,NULL , 0 ,NULL);
 8008670:	79ba      	ldrb	r2, [r7, #6]
 8008672:	79f8      	ldrb	r0, [r7, #7]
 8008674:	2300      	movs	r3, #0
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	2300      	movs	r3, #0
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	2300      	movs	r3, #0
 800867e:	2102      	movs	r1, #2
 8008680:	f7ff ffa8 	bl	80085d4 <ll_send_packet>
 8008684:	4603      	mov	r3, r0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <ll_send_NANK>:

int ll_send_NANK(u8 dest,u8 id)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af02      	add	r7, sp, #8
 8008694:	4603      	mov	r3, r0
 8008696:	460a      	mov	r2, r1
 8008698:	71fb      	strb	r3, [r7, #7]
 800869a:	4613      	mov	r3, r2
 800869c:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_NANK,id ,NULL , 0 ,NULL);
 800869e:	79ba      	ldrb	r2, [r7, #6]
 80086a0:	79f8      	ldrb	r0, [r7, #7]
 80086a2:	2300      	movs	r3, #0
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	2300      	movs	r3, #0
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	2300      	movs	r3, #0
 80086ac:	2103      	movs	r1, #3
 80086ae:	f7ff ff91 	bl	80085d4 <ll_send_packet>
 80086b2:	4603      	mov	r3, r0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <ll_send_to>:

int ll_send_to(u8 dest ,u8 *data ,int data_len ,ask_received_callback CallBack )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	607a      	str	r2, [r7, #4]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]
	u8 id = sys_random() ;
 80086cc:	f7f8 fee6 	bl	800149c <sys_random>
 80086d0:	4603      	mov	r3, r0
 80086d2:	75fb      	strb	r3, [r7, #23]

	return ll_send_packet(dest , PACK_TYPE_DATA,id ,data , data_len , CallBack);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	7df9      	ldrb	r1, [r7, #23]
 80086da:	7bf8      	ldrb	r0, [r7, #15]
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	9201      	str	r2, [sp, #4]
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	460a      	mov	r2, r1
 80086e6:	2101      	movs	r1, #1
 80086e8:	f7ff ff74 	bl	80085d4 <ll_send_packet>
 80086ec:	4603      	mov	r3, r0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <get_tx_size>:

int get_tx_size()
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
	return list_size(Tx_packet_list)  ;
 80086fc:	4b03      	ldr	r3, [pc, #12]	; (800870c <get_tx_size+0x14>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f7ff fe4b 	bl	800839c <list_size>
 8008706:	4603      	mov	r3, r0
}
 8008708:	4618      	mov	r0, r3
 800870a:	bd80      	pop	{r7, pc}
 800870c:	200005d0 	.word	0x200005d0

08008710 <get_rx_size>:

int get_rx_size()
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
	return list_size(Rx_packet_list)  ;
 8008714:	4b03      	ldr	r3, [pc, #12]	; (8008724 <get_rx_size+0x14>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff fe3f 	bl	800839c <list_size>
 800871e:	4603      	mov	r3, r0
}
 8008720:	4618      	mov	r0, r3
 8008722:	bd80      	pop	{r7, pc}
 8008724:	200005cc 	.word	0x200005cc

08008728 <ll_transmit>:



void ll_transmit(void) 
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
	//pop from TX queue , serialize and send to network
	// no data in tx list exit 
	if(list_size(Tx_packet_list) == 0)
 800872e:	4b54      	ldr	r3, [pc, #336]	; (8008880 <ll_transmit+0x158>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff fe32 	bl	800839c <list_size>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 809c 	beq.w	8008878 <ll_transmit+0x150>
	// in case there is  data 
#ifdef PROT_DEBUG
	printf("\nNetwork Transmit number of Packet %d\n" ,list_size(Tx_packet_list) );
#endif
	// add timer here
	while(network_transmit_index < list_size(Tx_packet_list))
 8008740:	e081      	b.n	8008846 <ll_transmit+0x11e>
	{

		struct list_node * node = list_index(Tx_packet_list , network_transmit_index) ;
 8008742:	4b4f      	ldr	r3, [pc, #316]	; (8008880 <ll_transmit+0x158>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a4f      	ldr	r2, [pc, #316]	; (8008884 <ll_transmit+0x15c>)
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	4611      	mov	r1, r2
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff fde3 	bl	8008318 <list_index>
 8008752:	6178      	str	r0, [r7, #20]
		packet_holder_t	* holder = (packet_holder_t*)node->data ;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	613b      	str	r3, [r7, #16]
		packet_t * pack = &(holder)->packet ;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	60fb      	str	r3, [r7, #12]
#ifdef PROT_DEBUG
		debug_packet(pack) ;
#endif
		//packet serialize and send to hardware 
		int packet_size = packet_get_size(pack) ;
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 fc93 	bl	800908a <packet_get_size>
 8008764:	60b8      	str	r0, [r7, #8]

		u8 * buff = (u8 *) malloc(sizeof(u8) * packet_size) ;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fccb 	bl	8009104 <malloc>
 800876e:	4603      	mov	r3, r0
 8008770:	607b      	str	r3, [r7, #4]

		packet_serialize(pack , buff) ;
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fb8d 	bl	8008e94 <packet_serialize>

		//send to network
		if(buff != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d02a      	beq.n	80087d6 <ll_transmit+0xae>
		{
			network_transmit_index++;
 8008780:	4b40      	ldr	r3, [pc, #256]	; (8008884 <ll_transmit+0x15c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3301      	adds	r3, #1
 8008786:	4a3f      	ldr	r2, [pc, #252]	; (8008884 <ll_transmit+0x15c>)
 8008788:	6013      	str	r3, [r2, #0]
			holder->number_of_transmition++ ;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	615a      	str	r2, [r3, #20]
			//disable exti
			//
			//sys_disable_exti_irq() ;
			Radio.Send(buff , packet_size) ;
 8008794:	4b3c      	ldr	r3, [pc, #240]	; (8008888 <ll_transmit+0x160>)
 8008796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	4611      	mov	r1, r2
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3

			uint32_t start_transmit_time = sys_get_tick() ;
 80087a2:	f7f8 fe73 	bl	800148c <sys_get_tick>
 80087a6:	6038      	str	r0, [r7, #0]

			//wait for the transmition to complete
			while(tarnsmition_done == false)
 80087a8:	e00a      	b.n	80087c0 <ll_transmit+0x98>
			{
				if(sys_get_tick() - start_transmit_time > 50)
 80087aa:	f7f8 fe6f 	bl	800148c <sys_get_tick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b32      	cmp	r3, #50	; 0x32
 80087b6:	d903      	bls.n	80087c0 <ll_transmit+0x98>
				{
					printf("TiOut\n");
 80087b8:	4834      	ldr	r0, [pc, #208]	; (800888c <ll_transmit+0x164>)
 80087ba:	f001 fb09 	bl	8009dd0 <puts>
					break ;
 80087be:	e006      	b.n	80087ce <ll_transmit+0xa6>
			while(tarnsmition_done == false)
 80087c0:	4b33      	ldr	r3, [pc, #204]	; (8008890 <ll_transmit+0x168>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f083 0301 	eor.w	r3, r3, #1
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1ed      	bne.n	80087aa <ll_transmit+0x82>
				}
			}

			free(buff) ;
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fca0 	bl	8009114 <free>
 80087d4:	e005      	b.n	80087e2 <ll_transmit+0xba>
		}
		else if(buff == NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <ll_transmit+0xba>
		{
			printf("\npacket_serialize FAILED\n");
 80087dc:	482d      	ldr	r0, [pc, #180]	; (8008894 <ll_transmit+0x16c>)
 80087de:	f001 faf7 	bl	8009dd0 <puts>
		}

		

		tarnsmition_done = false ;
 80087e2:	4b2b      	ldr	r3, [pc, #172]	; (8008890 <ll_transmit+0x168>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	701a      	strb	r2, [r3, #0]
		/*
		 * if packet is a NANK then remove the packet from Tx list
		 */
		//printf("\nclear tx done for next packet\n");
		if(pack->type == PACK_TYPE_NANK)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	78db      	ldrb	r3, [r3, #3]
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d10e      	bne.n	800880e <ll_transmit+0xe6>
		{
#ifdef PROT_DEBUG
			printf("\rm NANK Packet\n");
#endif
			list_remove(Tx_packet_list ,node) ;
 80087f0:	4b23      	ldr	r3, [pc, #140]	; (8008880 <ll_transmit+0x158>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6979      	ldr	r1, [r7, #20]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7ff fd30 	bl	800825c <list_remove>
			//free(pack->payload) ;
			free(pack) ;
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 fc89 	bl	8009114 <free>
			free(holder);
 8008802:	6938      	ldr	r0, [r7, #16]
 8008804:	f000 fc86 	bl	8009114 <free>
			free(node) ;
 8008808:	6978      	ldr	r0, [r7, #20]
 800880a:	f000 fc83 	bl	8009114 <free>
		// should remove packets with number of transmition >= 2 (packet transmited 3 time) 
		
		// can define a time out for the packet to leave the list 

		// remove the packet that sent equal or more than the maximum
		if(holder->number_of_transmition >= MAX_NUMBER_OF_TRANSMITION)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	2b04      	cmp	r3, #4
 8008814:	dd17      	ble.n	8008846 <ll_transmit+0x11e>
		{
#ifdef PROT_DEBUG

			printf("FREEING MEMORY :packet transmitted 5 remove from Tx\n");
#endif
			list_remove(Tx_packet_list , node) ;
 8008816:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <ll_transmit+0x158>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6979      	ldr	r1, [r7, #20]
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff fd1d 	bl	800825c <list_remove>
			if(pack->type == PACK_TYPE_DATA)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	78db      	ldrb	r3, [r3, #3]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d104      	bne.n	8008834 <ll_transmit+0x10c>
			{
				free(pack->payload) ;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 fc70 	bl	8009114 <free>
			}

			free(pack) ;
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 fc6d 	bl	8009114 <free>
			free(holder);
 800883a:	6938      	ldr	r0, [r7, #16]
 800883c:	f000 fc6a 	bl	8009114 <free>
			free(node);
 8008840:	6978      	ldr	r0, [r7, #20]
 8008842:	f000 fc67 	bl	8009114 <free>
	while(network_transmit_index < list_size(Tx_packet_list))
 8008846:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <ll_transmit+0x158>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fda6 	bl	800839c <list_size>
 8008850:	4602      	mov	r2, r0
 8008852:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <ll_transmit+0x15c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	f63f af73 	bhi.w	8008742 <ll_transmit+0x1a>

#ifdef PROT_DEBUG
	printf("\nNetwork Transmit Done\n");
#endif

	if(network_transmit_index >= list_size(Tx_packet_list))
 800885c:	4b08      	ldr	r3, [pc, #32]	; (8008880 <ll_transmit+0x158>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fd9b 	bl	800839c <list_size>
 8008866:	4602      	mov	r2, r0
 8008868:	4b06      	ldr	r3, [pc, #24]	; (8008884 <ll_transmit+0x15c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d804      	bhi.n	800887a <ll_transmit+0x152>
	{
		network_transmit_index = 0 ;	
 8008870:	4b04      	ldr	r3, [pc, #16]	; (8008884 <ll_transmit+0x15c>)
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	e000      	b.n	800887a <ll_transmit+0x152>
		return ;
 8008878:	bf00      	nop
	}
}
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	200005d0 	.word	0x200005d0
 8008884:	20000440 	.word	0x20000440
 8008888:	0800e1e4 	.word	0x0800e1e4
 800888c:	0800e038 	.word	0x0800e038
 8008890:	2000044c 	.word	0x2000044c
 8008894:	0800e040 	.word	0x0800e040

08008898 <ll_receive>:
	}
}


void ll_receive(u8 * payload , int size)
{
 8008898:	b590      	push	{r4, r7, lr}
 800889a:	b091      	sub	sp, #68	; 0x44
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]

	//should check packet for duplication and may be respond to corrupt packet
	packet_t p;
	if(packet_desirialize(payload , size , &p) == PACK_OK)
 80088a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088a6:	461a      	mov	r2, r3
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fb4e 	bl	8008f4c <packet_desirialize>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d152      	bne.n	800895c <ll_receive+0xc4>
	{
		//if the packet is for this device add it to rx list
		if(p.dest == device_address && list_size(Rx_packet_list) < RX_PACKET_LIST_SIZE )
 80088b6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80088ba:	4b2e      	ldr	r3, [pc, #184]	; (8008974 <ll_receive+0xdc>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d14f      	bne.n	8008962 <ll_receive+0xca>
 80088c2:	4b2d      	ldr	r3, [pc, #180]	; (8008978 <ll_receive+0xe0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fd68 	bl	800839c <list_size>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b09      	cmp	r3, #9
 80088d0:	d847      	bhi.n	8008962 <ll_receive+0xca>
		{
			//remove duplication
			if(list_size(Rx_packet_list) > 0)
 80088d2:	4b29      	ldr	r3, [pc, #164]	; (8008978 <ll_receive+0xe0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fd60 	bl	800839c <list_size>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d021      	beq.n	8008926 <ll_receive+0x8e>
			{
				struct list_node *n = list_search(Rx_packet_list,(void*)p.id) ;
 80088e2:	4b25      	ldr	r3, [pc, #148]	; (8008978 <ll_receive+0xe0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff fc8d 	bl	800820c <list_search>
 80088f2:	63f8      	str	r0, [r7, #60]	; 0x3c
				if(n != NULL )
 80088f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d015      	beq.n	8008926 <ll_receive+0x8e>
				{
					packet_holder_t * holder = n->data ;
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	63bb      	str	r3, [r7, #56]	; 0x38
					packet_t * pack = (packet_t*) &(holder)->packet ;
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	637b      	str	r3, [r7, #52]	; 0x34

					if((pack->type == p.type) && (pack->payload_length == p.payload_length))
 8008904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008906:	78da      	ldrb	r2, [r3, #3]
 8008908:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800890c:	429a      	cmp	r2, r3
 800890e:	d10a      	bne.n	8008926 <ll_receive+0x8e>
 8008910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008912:	791a      	ldrb	r2, [r3, #4]
 8008914:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008918:	429a      	cmp	r2, r3
 800891a:	d104      	bne.n	8008926 <ll_receive+0x8e>
					{
						//duplication
#ifdef PROT_DEBUG
						printf("duplication \n");
#endif
						free(p.payload);
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fbf8 	bl	8009114 <free>
 8008924:	e022      	b.n	800896c <ll_receive+0xd4>
					}
				}
			}

			packet_holder_t packet_holder;
			packet_holder.packet = p ;
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800892e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			packet_holder.recv_time = sys_get_tick() ;
 8008934:	f7f8 fdaa 	bl	800148c <sys_get_tick>
 8008938:	4603      	mov	r3, r0
 800893a:	61fb      	str	r3, [r7, #28]
			packet_holder.number_of_transmition = 0 ;
 800893c:	2300      	movs	r3, #0
 800893e:	623b      	str	r3, [r7, #32]
			list_push_back(Rx_packet_list , list_node_new(&packet_holder , sizeof(packet_holder_t))) ;
 8008940:	4b0d      	ldr	r3, [pc, #52]	; (8008978 <ll_receive+0xe0>)
 8008942:	681c      	ldr	r4, [r3, #0]
 8008944:	f107 030c 	add.w	r3, r7, #12
 8008948:	211c      	movs	r1, #28
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff fd62 	bl	8008414 <list_node_new>
 8008950:	4603      	mov	r3, r0
 8008952:	4619      	mov	r1, r3
 8008954:	4620      	mov	r0, r4
 8008956:	f7ff fca3 	bl	80082a0 <list_push_back>
 800895a:	e002      	b.n	8008962 <ll_receive+0xca>
		}
	}

	else
	{
		printf("packet corrupt\n");
 800895c:	4807      	ldr	r0, [pc, #28]	; (800897c <ll_receive+0xe4>)
 800895e:	f001 fa37 	bl	8009dd0 <puts>
	}
	(void) p ;

	number_of_received_packet++; // this variable to count number of coming packet
 8008962:	4b07      	ldr	r3, [pc, #28]	; (8008980 <ll_receive+0xe8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3301      	adds	r3, #1
 8008968:	4a05      	ldr	r2, [pc, #20]	; (8008980 <ll_receive+0xe8>)
 800896a:	6013      	str	r3, [r2, #0]

}
 800896c:	3744      	adds	r7, #68	; 0x44
 800896e:	46bd      	mov	sp, r7
 8008970:	bd90      	pop	{r4, r7, pc}
 8008972:	bf00      	nop
 8008974:	2000000a 	.word	0x2000000a
 8008978:	200005cc 	.word	0x200005cc
 800897c:	0800e05c 	.word	0x0800e05c
 8008980:	20000448 	.word	0x20000448

08008984 <ll_process_received>:

void ll_process_received()
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08a      	sub	sp, #40	; 0x28
 8008988:	af00      	add	r7, sp, #0
	//can add a timer to break the loop
	//parse rx list for ask and nank packet or data packets
	while(list_size(Rx_packet_list) > rx_packet_index)
 800898a:	e0ab      	b.n	8008ae4 <ll_process_received+0x160>
	{

		struct list_node * n = list_index(Rx_packet_list ,rx_packet_index);
 800898c:	4b63      	ldr	r3, [pc, #396]	; (8008b1c <ll_process_received+0x198>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a63      	ldr	r2, [pc, #396]	; (8008b20 <ll_process_received+0x19c>)
 8008992:	6812      	ldr	r2, [r2, #0]
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff fcbe 	bl	8008318 <list_index>
 800899c:	6278      	str	r0, [r7, #36]	; 0x24
		packet_holder_t * holder = (packet_holder_t *) n->data ;
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	623b      	str	r3, [r7, #32]

		packet_t * packet = (packet_t *) &(holder)->packet ;
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	61fb      	str	r3, [r7, #28]
			free(holder) ;
			free(n) ;
			printf("removed from list\n");
		}
#endif /*LL_RX_TIMEOUT_REMOVE*/
		if(packet->type == PACK_TYPE_DATA)
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	78db      	ldrb	r3, [r3, #3]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d110      	bne.n	80089d2 <ll_process_received+0x4e>
			//data packet will be removed by ll_get_recv_from
			/*
			 * holder->number_of_transmition is used here to indicate if an ASK packet
			 * was sent to confirm the receive
			 */
			if( holder->number_of_transmition == 0)
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f040 8090 	bne.w	8008ada <ll_process_received+0x156>
			{
#ifdef PROT_DEBUG
				printf("ASK has been send for id = %d\n" , packet->id);
#endif

				ll_send_ASK(packet->src , packet->id) ;
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	789b      	ldrb	r3, [r3, #2]
 80089c2:	4619      	mov	r1, r3
 80089c4:	4610      	mov	r0, r2
 80089c6:	f7ff fe4b 	bl	8008660 <ll_send_ASK>
				holder->number_of_transmition = 1 ;
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	2201      	movs	r2, #1
 80089ce:	615a      	str	r2, [r3, #20]
 80089d0:	e083      	b.n	8008ada <ll_process_received+0x156>
			}

		}

		//ASK confirm Data recv , so first look for a data match in tx list
		else if(packet->type == PACK_TYPE_ASK)
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	78db      	ldrb	r3, [r3, #3]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d148      	bne.n	8008a6c <ll_process_received+0xe8>
		{
			// search for packet by id in tx list
			struct list_node * tx_data_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 80089da:	4b52      	ldr	r3, [pc, #328]	; (8008b24 <ll_process_received+0x1a0>)
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	789b      	ldrb	r3, [r3, #2]
 80089e2:	4619      	mov	r1, r3
 80089e4:	4610      	mov	r0, r2
 80089e6:	f7ff fc11 	bl	800820c <list_search>
 80089ea:	60f8      	str	r0, [r7, #12]

			//if no match in tx list drop the packet
			if(tx_data_node == NULL )
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10f      	bne.n	8008a12 <ll_process_received+0x8e>
			{
				//drop the ASK packet from Rx list


				list_remove(Rx_packet_list , n);
 80089f2:	4b4a      	ldr	r3, [pc, #296]	; (8008b1c <ll_process_received+0x198>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fc2f 	bl	800825c <list_remove>

				//free memory
				//free(packet->payload) ;
				free(packet) ;
 80089fe:	69f8      	ldr	r0, [r7, #28]
 8008a00:	f000 fb88 	bl	8009114 <free>
				free(holder) ;
 8008a04:	6a38      	ldr	r0, [r7, #32]
 8008a06:	f000 fb85 	bl	8009114 <free>
				free(n);
 8008a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a0c:	f000 fb82 	bl	8009114 <free>
 8008a10:	e063      	b.n	8008ada <ll_process_received+0x156>
			else
			{
#ifdef PROT_DEBUG
				printf("ASK match packet ");
#endif
				packet_holder_t* h =(packet_holder_t*)tx_data_node->data ;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	60bb      	str	r3, [r7, #8]
				packet_t * pack_p = (packet_t *)&(h->packet);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	607b      	str	r3, [r7, #4]
				if(pack_p->type == PACK_TYPE_DATA)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	78db      	ldrb	r3, [r3, #3]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d15a      	bne.n	8008ada <ll_process_received+0x156>
				{
					//send NANK
					ll_send_NANK(packet->src , packet->id) ;
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	789b      	ldrb	r3, [r3, #2]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7ff fe2d 	bl	800868e <ll_send_NANK>

					//execute callback function
					if(h->Ask_callback != NULL)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <ll_process_received+0xbe>
					{
						h->Ask_callback();
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	4798      	blx	r3
					}
					//remove data from Tx list to do not get send again

					list_remove( Tx_packet_list ,tx_data_node) ;
 8008a42:	4b38      	ldr	r3, [pc, #224]	; (8008b24 <ll_process_received+0x1a0>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68f9      	ldr	r1, [r7, #12]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff fc07 	bl	800825c <list_remove>
					//free memory
					free(pack_p->payload) ;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fb5e 	bl	8009114 <free>
					free(pack_p) ;
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fb5b 	bl	8009114 <free>
					free(h);
 8008a5e:	68b8      	ldr	r0, [r7, #8]
 8008a60:	f000 fb58 	bl	8009114 <free>
					free(tx_data_node) ;
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fb55 	bl	8009114 <free>
 8008a6a:	e036      	b.n	8008ada <ll_process_received+0x156>

			}

		}

		else if(packet->type == PACK_TYPE_NANK)
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	78db      	ldrb	r3, [r3, #3]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d132      	bne.n	8008ada <ll_process_received+0x156>
			// check the packet id in Tx list if exist resent the data and remove the packet
			// NANK indicate data received by receiver
#ifdef PROT_DEBUG
			printf("\nNANK RECV  id %d\n" , packet->id);
#endif
			struct list_node * tx_ask_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8008a74:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <ll_process_received+0x1a0>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	789b      	ldrb	r3, [r3, #2]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f7ff fbc4 	bl	800820c <list_search>
 8008a84:	61b8      	str	r0, [r7, #24]

			if(tx_ask_node != NULL)
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d017      	beq.n	8008abc <ll_process_received+0x138>
			{
				packet_holder_t * p_holder = tx_ask_node->data ;
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	617b      	str	r3, [r7, #20]
				packet_t * ask_packet = &(p_holder)->packet ;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	613b      	str	r3, [r7, #16]
				if( ask_packet->type == PACK_TYPE_ASK )
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	78db      	ldrb	r3, [r3, #3]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d10e      	bne.n	8008abc <ll_process_received+0x138>
				{
					//remove the ask packet from
#ifdef PROT_DEBUG
					printf("transmition end\n");
#endif
					list_remove(Tx_packet_list , tx_ask_node) ;
 8008a9e:	4b21      	ldr	r3, [pc, #132]	; (8008b24 <ll_process_received+0x1a0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69b9      	ldr	r1, [r7, #24]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff fbd9 	bl	800825c <list_remove>

					//release memory

					free(ask_packet);
 8008aaa:	6938      	ldr	r0, [r7, #16]
 8008aac:	f000 fb32 	bl	8009114 <free>
					free(p_holder) ;
 8008ab0:	6978      	ldr	r0, [r7, #20]
 8008ab2:	f000 fb2f 	bl	8009114 <free>
					free(tx_ask_node) ;
 8008ab6:	69b8      	ldr	r0, [r7, #24]
 8008ab8:	f000 fb2c 	bl	8009114 <free>
			{
				// in case of null remove the packet
			}

			// in case of NANK remove the packet from Rx list
			list_remove(Rx_packet_list , n) ;
 8008abc:	4b17      	ldr	r3, [pc, #92]	; (8008b1c <ll_process_received+0x198>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7ff fbca 	bl	800825c <list_remove>
			free(packet);
 8008ac8:	69f8      	ldr	r0, [r7, #28]
 8008aca:	f000 fb23 	bl	8009114 <free>
			free(holder);
 8008ace:	6a38      	ldr	r0, [r7, #32]
 8008ad0:	f000 fb20 	bl	8009114 <free>
			free(n);
 8008ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ad6:	f000 fb1d 	bl	8009114 <free>
		}

		rx_packet_index++;
 8008ada:	4b11      	ldr	r3, [pc, #68]	; (8008b20 <ll_process_received+0x19c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	4a0f      	ldr	r2, [pc, #60]	; (8008b20 <ll_process_received+0x19c>)
 8008ae2:	6013      	str	r3, [r2, #0]
	while(list_size(Rx_packet_list) > rx_packet_index)
 8008ae4:	4b0d      	ldr	r3, [pc, #52]	; (8008b1c <ll_process_received+0x198>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fc57 	bl	800839c <list_size>
 8008aee:	4602      	mov	r2, r0
 8008af0:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <ll_process_received+0x19c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	f63f af49 	bhi.w	800898c <ll_process_received+0x8>
		(void) packet ;
		(void) holder ;
		(void) n ;
	}

	if(rx_packet_index >= list_size(Rx_packet_list))
 8008afa:	4b08      	ldr	r3, [pc, #32]	; (8008b1c <ll_process_received+0x198>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff fc4c 	bl	800839c <list_size>
 8008b04:	4602      	mov	r2, r0
 8008b06:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <ll_process_received+0x19c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d802      	bhi.n	8008b14 <ll_process_received+0x190>
	{
		rx_packet_index = 0;
 8008b0e:	4b04      	ldr	r3, [pc, #16]	; (8008b20 <ll_process_received+0x19c>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
	}

}
 8008b14:	bf00      	nop
 8008b16:	3728      	adds	r7, #40	; 0x28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	200005cc 	.word	0x200005cc
 8008b20:	20000444 	.word	0x20000444
 8008b24:	200005d0 	.word	0x200005d0

08008b28 <ll_get_recv_from>:
	*len = 0;
	return -1 ;
}

int  ll_get_recv_from(u8 src ,u8 *data )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	6039      	str	r1, [r7, #0]
 8008b32:	71fb      	strb	r3, [r7, #7]

	int rx_list_size = list_size(Rx_packet_list) ;
 8008b34:	4b2d      	ldr	r3, [pc, #180]	; (8008bec <ll_get_recv_from+0xc4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff fc2f 	bl	800839c <list_size>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	61bb      	str	r3, [r7, #24]

	if(rx_list_size == 0)
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <ll_get_recv_from+0x24>
		return 0 ;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e04b      	b.n	8008be4 <ll_get_recv_from+0xbc>

	struct list_node* node ;
	packet_holder_t * holder ;
	packet_t * pack ;

	for(int i = 0 ; i < rx_list_size ; i++)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
 8008b50:	e043      	b.n	8008bda <ll_get_recv_from+0xb2>
	{
		node = list_index(Rx_packet_list , i) ;
 8008b52:	4b26      	ldr	r3, [pc, #152]	; (8008bec <ll_get_recv_from+0xc4>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69f9      	ldr	r1, [r7, #28]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff fbdd 	bl	8008318 <list_index>
 8008b5e:	6178      	str	r0, [r7, #20]
		holder = (packet_holder_t *) node->data ;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	613b      	str	r3, [r7, #16]
		pack = (packet_t*)&(holder)->packet ;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	60fb      	str	r3, [r7, #12]


		if(pack->type == PACK_TYPE_DATA && pack->src == src)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	78db      	ldrb	r3, [r3, #3]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d130      	bne.n	8008bd4 <ll_get_recv_from+0xac>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	79fa      	ldrb	r2, [r7, #7]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d12b      	bne.n	8008bd4 <ll_get_recv_from+0xac>
		{
			int data_length =  pack->payload_length ;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	791b      	ldrb	r3, [r3, #4]
 8008b80:	60bb      	str	r3, [r7, #8]
			memcpy(data , pack->payload , data_length) ;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6838      	ldr	r0, [r7, #0]
 8008b8c:	f000 faca 	bl	8009124 <memcpy>

			if( holder->number_of_transmition == 0)
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d107      	bne.n	8008ba8 <ll_get_recv_from+0x80>
			{
#ifdef PROT_DEBUG
				printf("ASK send From ll_get_recv_from\n");
#endif
				ll_send_ASK(pack->src , pack->id) ;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	781a      	ldrb	r2, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	789b      	ldrb	r3, [r3, #2]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f7ff fd5c 	bl	8008660 <ll_send_ASK>
			}
			//remove the node and free memory
			list_remove(Rx_packet_list , node) ;
 8008ba8:	4b10      	ldr	r3, [pc, #64]	; (8008bec <ll_get_recv_from+0xc4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6979      	ldr	r1, [r7, #20]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fb54 	bl	800825c <list_remove>
			free(pack->payload) ;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 faab 	bl	8009114 <free>
			free(pack) ;
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 faa8 	bl	8009114 <free>
			free(holder) ;
 8008bc4:	6938      	ldr	r0, [r7, #16]
 8008bc6:	f000 faa5 	bl	8009114 <free>
			free(node) ;
 8008bca:	6978      	ldr	r0, [r7, #20]
 8008bcc:	f000 faa2 	bl	8009114 <free>
			return data_length ;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	e007      	b.n	8008be4 <ll_get_recv_from+0xbc>
	for(int i = 0 ; i < rx_list_size ; i++)
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	61fb      	str	r3, [r7, #28]
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	dbb7      	blt.n	8008b52 <ll_get_recv_from+0x2a>
		}
	}
	// navigated the list and no data packet from src ,return 0
	return 0 ;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3720      	adds	r7, #32
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	200005cc 	.word	0x200005cc

08008bf0 <ll_process>:

u32 process_tmr = 0;
uint32_t tx_trans_timer  = 1000 ;
//this function should manage send and receive operations
void ll_process(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0

	ll_process_received();
 8008bf4:	f7ff fec6 	bl	8008984 <ll_process_received>
    if(sys_get_tick() - process_tmr >= tx_trans_timer)
 8008bf8:	f7f8 fc48 	bl	800148c <sys_get_tick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	4b0e      	ldr	r3, [pc, #56]	; (8008c38 <ll_process+0x48>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	4b0d      	ldr	r3, [pc, #52]	; (8008c3c <ll_process+0x4c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d30b      	bcc.n	8008c24 <ll_process+0x34>
    {
	    ll_transmit() ;
 8008c0c:	f7ff fd8c 	bl	8008728 <ll_transmit>
	    Radio.Rx(1000);
 8008c10:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <ll_process+0x50>)
 8008c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c18:	4798      	blx	r3
	    process_tmr = sys_get_tick() ;
 8008c1a:	f7f8 fc37 	bl	800148c <sys_get_tick>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	4a05      	ldr	r2, [pc, #20]	; (8008c38 <ll_process+0x48>)
 8008c22:	6013      	str	r3, [r2, #0]
    }

    if( get_tx_size() >= LL_TX_BUTTLE_NECK)
 8008c24:	f7ff fd68 	bl	80086f8 <get_tx_size>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b05      	cmp	r3, #5
 8008c2c:	dd02      	ble.n	8008c34 <ll_process+0x44>
    {
    	tx_trans_timer = 200 ;
 8008c2e:	4b03      	ldr	r3, [pc, #12]	; (8008c3c <ll_process+0x4c>)
 8008c30:	22c8      	movs	r2, #200	; 0xc8
 8008c32:	601a      	str	r2, [r3, #0]

		default:
			break ;
		}
	*/
}
 8008c34:	bf00      	nop
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000450 	.word	0x20000450
 8008c3c:	2000000c 	.word	0x2000000c
 8008c40:	0800e1e4 	.word	0x0800e1e4

08008c44 <ll_debug_Rx_list>:

void ll_debug_Rx_list()
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
	for(int i =0;i< get_rx_size() ;i++)
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	e011      	b.n	8008c74 <ll_debug_Rx_list+0x30>
	{
		struct list_node * node = list_index(Rx_packet_list , i) ;
 8008c50:	4b0e      	ldr	r3, [pc, #56]	; (8008c8c <ll_debug_Rx_list+0x48>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68f9      	ldr	r1, [r7, #12]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fb5e 	bl	8008318 <list_index>
 8008c5c:	60b8      	str	r0, [r7, #8]
		packet_holder_t *  hold = node->data ;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	607b      	str	r3, [r7, #4]
		packet_t * pp = (packet_t*)&(hold)->packet ;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	603b      	str	r3, [r7, #0]
		debug_packet(pp) ;
 8008c68:	6838      	ldr	r0, [r7, #0]
 8008c6a:	f000 f8a7 	bl	8008dbc <debug_packet>
	for(int i =0;i< get_rx_size() ;i++)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3301      	adds	r3, #1
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	f7ff fd4c 	bl	8008710 <get_rx_size>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	dbe7      	blt.n	8008c50 <ll_debug_Rx_list+0xc>
	}
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200005cc 	.word	0x200005cc

08008c90 <ll_set_transmition_done>:

void ll_set_transmition_done()
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
	tarnsmition_done = true ;
 8008c94:	4b03      	ldr	r3, [pc, #12]	; (8008ca4 <ll_set_transmition_done+0x14>)
 8008c96:	2201      	movs	r2, #1
 8008c98:	701a      	strb	r2, [r3, #0]
}
 8008c9a:	bf00      	nop
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bc80      	pop	{r7}
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	2000044c 	.word	0x2000044c

08008ca8 <packet>:
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

void packet(packet_t * pack ,u8 src ,u8 dest ,u8 type ,u8 id, u8* data ,u8 len)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	70fb      	strb	r3, [r7, #3]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70bb      	strb	r3, [r7, #2]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	707b      	strb	r3, [r7, #1]
	//set packet header
	packet_set_src (pack  , src) ;
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f819 	bl	8008cfe <packet_set_src>
	packet_set_dest(pack  , dest) ;
 8008ccc:	78bb      	ldrb	r3, [r7, #2]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f822 	bl	8008d1a <packet_set_dest>
	packet_set_type(pack , type );
 8008cd6:	787b      	ldrb	r3, [r7, #1]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f82b 	bl	8008d36 <packet_set_type>
	packet_set_id(pack ,id) ;
 8008ce0:	7c3b      	ldrb	r3, [r7, #16]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f85a 	bl	8008d9e <packet_set_id>
	packet_set_payload(pack ,data , len) ;
 8008cea:	7e3b      	ldrb	r3, [r7, #24]
 8008cec:	461a      	mov	r2, r3
 8008cee:	6979      	ldr	r1, [r7, #20]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f82e 	bl	8008d52 <packet_set_payload>
}
 8008cf6:	bf00      	nop
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <packet_set_src>:

void packet_set_src(packet_t *pack ,u8 src)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
	pack->src = src ;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	701a      	strb	r2, [r3, #0]
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr

08008d1a <packet_set_dest>:

void packet_set_dest(packet_t *pack ,u8 dest)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
	pack->dest = dest ;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	78fa      	ldrb	r2, [r7, #3]
 8008d2a:	705a      	strb	r2, [r3, #1]
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr

08008d36 <packet_set_type>:

void packet_set_type(packet_t *pack ,u8 type) 
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
	pack->type = type ;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	78fa      	ldrb	r2, [r7, #3]
 8008d46:	70da      	strb	r2, [r3, #3]
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr

08008d52 <packet_set_payload>:

void packet_set_payload(packet_t *pack ,u8 * payload , int len) 
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
	if(payload != NULL && len != 0)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d016      	beq.n	8008d92 <packet_set_payload+0x40>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d013      	beq.n	8008d92 <packet_set_payload+0x40>
	{
		pack->payload = (u8*) malloc(sizeof(u8) * len) ;//payload ;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 f9c9 	bl	8009104 <malloc>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	609a      	str	r2, [r3, #8]
		memcpy(pack->payload , payload , len) ;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 f9ce 	bl	8009124 <memcpy>
		pack->payload_length = len ;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	711a      	strb	r2, [r3, #4]
		return ;
 8008d90:	e002      	b.n	8008d98 <packet_set_payload+0x46>
	}
	pack->payload_length = 0 ;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	711a      	strb	r2, [r3, #4]
	
}
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <packet_set_id>:

void packet_set_id(packet_t *pack ,u8 id)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
	pack->id = id ;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	709a      	strb	r2, [r3, #2]
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr
	...

08008dbc <debug_packet>:

void debug_packet(packet_t * pack)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
	printf("PAcket :\n");
 8008dc4:	4829      	ldr	r0, [pc, #164]	; (8008e6c <debug_packet+0xb0>)
 8008dc6:	f001 f803 	bl	8009dd0 <puts>
	printf("src  ->%d\n" , pack->src);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4827      	ldr	r0, [pc, #156]	; (8008e70 <debug_packet+0xb4>)
 8008dd2:	f000 ff63 	bl	8009c9c <iprintf>
	printf("dest ->%d\n" , pack->dest);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4825      	ldr	r0, [pc, #148]	; (8008e74 <debug_packet+0xb8>)
 8008dde:	f000 ff5d 	bl	8009c9c <iprintf>
	printf("id   ->%d\n" , pack->id) ;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	789b      	ldrb	r3, [r3, #2]
 8008de6:	4619      	mov	r1, r3
 8008de8:	4823      	ldr	r0, [pc, #140]	; (8008e78 <debug_packet+0xbc>)
 8008dea:	f000 ff57 	bl	8009c9c <iprintf>
	if(pack->type == PACK_TYPE_DATA)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	78db      	ldrb	r3, [r3, #3]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d103      	bne.n	8008dfe <debug_packet+0x42>
	{
		printf("packet type data\n") ;
 8008df6:	4821      	ldr	r0, [pc, #132]	; (8008e7c <debug_packet+0xc0>)
 8008df8:	f000 ffea 	bl	8009dd0 <puts>
 8008dfc:	e012      	b.n	8008e24 <debug_packet+0x68>
	}
	else if(pack->type == PACK_TYPE_ASK)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	78db      	ldrb	r3, [r3, #3]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d103      	bne.n	8008e0e <debug_packet+0x52>
	{
		printf("packet type ask\n") ;
 8008e06:	481e      	ldr	r0, [pc, #120]	; (8008e80 <debug_packet+0xc4>)
 8008e08:	f000 ffe2 	bl	8009dd0 <puts>
 8008e0c:	e00a      	b.n	8008e24 <debug_packet+0x68>
	}
	else if(pack->type == PACK_TYPE_NANK)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	78db      	ldrb	r3, [r3, #3]
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d103      	bne.n	8008e1e <debug_packet+0x62>
	{
		printf("packet type nank\n") ;
 8008e16:	481b      	ldr	r0, [pc, #108]	; (8008e84 <debug_packet+0xc8>)
 8008e18:	f000 ffda 	bl	8009dd0 <puts>
 8008e1c:	e002      	b.n	8008e24 <debug_packet+0x68>
	}
	else{
		printf("packet type not defined\n") ;
 8008e1e:	481a      	ldr	r0, [pc, #104]	; (8008e88 <debug_packet+0xcc>)
 8008e20:	f000 ffd6 	bl	8009dd0 <puts>
	}
	
	
	printf("packet length :%d\n" , pack->payload_length );
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	791b      	ldrb	r3, [r3, #4]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4818      	ldr	r0, [pc, #96]	; (8008e8c <debug_packet+0xd0>)
 8008e2c:	f000 ff36 	bl	8009c9c <iprintf>
	printf("payload :");
 8008e30:	4817      	ldr	r0, [pc, #92]	; (8008e90 <debug_packet+0xd4>)
 8008e32:	f000 ff33 	bl	8009c9c <iprintf>
	for(int i = 0 ; i<pack->payload_length ;i++)
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	e00a      	b.n	8008e52 <debug_packet+0x96>
	{
		printf("%c" , pack->payload[i]);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4413      	add	r3, r2
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 ff40 	bl	8009ccc <putchar>
	for(int i = 0 ; i<pack->payload_length ;i++)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	791b      	ldrb	r3, [r3, #4]
 8008e56:	461a      	mov	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	dbee      	blt.n	8008e3c <debug_packet+0x80>
	}
	printf("\n");
 8008e5e:	200a      	movs	r0, #10
 8008e60:	f000 ff34 	bl	8009ccc <putchar>
	
}
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	0800e06c 	.word	0x0800e06c
 8008e70:	0800e078 	.word	0x0800e078
 8008e74:	0800e084 	.word	0x0800e084
 8008e78:	0800e090 	.word	0x0800e090
 8008e7c:	0800e09c 	.word	0x0800e09c
 8008e80:	0800e0b0 	.word	0x0800e0b0
 8008e84:	0800e0c0 	.word	0x0800e0c0
 8008e88:	0800e0d4 	.word	0x0800e0d4
 8008e8c:	0800e0ec 	.word	0x0800e0ec
 8008e90:	0800e100 	.word	0x0800e100

08008e94 <packet_serialize>:

int packet_serialize(packet_t * pack ,u8 * buffer ) 
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	/* buffer size = 1 byte src + 1 byte dest + 1 byte type + 
	1 byte payload_length + payload_length + 2 byte checksum*/
	int buffer_size  = 7 + pack->payload_length ;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	791b      	ldrb	r3, [r3, #4]
 8008ea2:	3307      	adds	r3, #7
 8008ea4:	617b      	str	r3, [r7, #20]
	
	//buffer = (u8*)malloc(sizeof(u8) * buffer_size) ;
	if( buffer != NULL)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d04a      	beq.n	8008f42 <packet_serialize+0xae>
	{
		u8 *pbuffer = buffer ;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->dest ;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	785a      	ldrb	r2, [r3, #1]
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->src ;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	781a      	ldrb	r2, [r3, #0]
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->id ;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	789a      	ldrb	r2, [r3, #2]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->type ;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	78da      	ldrb	r2, [r3, #3]
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->payload_length ;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	791a      	ldrb	r2, [r3, #4]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	613b      	str	r3, [r7, #16]
		memcpy(pbuffer , pack->payload , pack->payload_length );
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6899      	ldr	r1, [r3, #8]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	791b      	ldrb	r3, [r3, #4]
 8008efe:	461a      	mov	r2, r3
 8008f00:	6938      	ldr	r0, [r7, #16]
 8008f02:	f000 f90f 	bl	8009124 <memcpy>
		u16 checksum = check_sum(buffer , 5 + pack->payload_length );
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	791b      	ldrb	r3, [r3, #4]
 8008f0a:	3305      	adds	r3, #5
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6838      	ldr	r0, [r7, #0]
 8008f10:	f000 f872 	bl	8008ff8 <check_sum>
 8008f14:	4603      	mov	r3, r0
 8008f16:	81fb      	strh	r3, [r7, #14]
		pbuffer += pack->payload_length ;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	791b      	ldrb	r3, [r3, #4]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	4413      	add	r3, r2
 8008f22:	613b      	str	r3, [r7, #16]
		*pbuffer = MSB16(checksum) ;
 8008f24:	89fb      	ldrh	r3, [r7, #14]
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	3301      	adds	r3, #1
 8008f34:	613b      	str	r3, [r7, #16]
		*pbuffer = LSB16(checksum) ;
 8008f36:	89fb      	ldrh	r3, [r7, #14]
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	701a      	strb	r2, [r3, #0]
		return buffer_size ;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	e000      	b.n	8008f44 <packet_serialize+0xb0>
	}
	else
	{
		return 0;
 8008f42:	2300      	movs	r3, #0
	}
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <packet_desirialize>:

int packet_desirialize(u8 * buffer,int buffer_len , packet_t * pack) 
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
	u16 pack_checksum = (buffer[buffer_len -2] << 8)& 0xff00 ;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	3b02      	subs	r3, #2
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4413      	add	r3, r2
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	021b      	lsls	r3, r3, #8
 8008f64:	82fb      	strh	r3, [r7, #22]
	pack_checksum += buffer[buffer_len -1] ;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	8afb      	ldrh	r3, [r7, #22]
 8008f74:	4413      	add	r3, r2
 8008f76:	82fb      	strh	r3, [r7, #22]
		
	u16 cal_checksum  = check_sum(buffer , buffer_len -2) ;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3b02      	subs	r3, #2
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 f83a 	bl	8008ff8 <check_sum>
 8008f84:	4603      	mov	r3, r0
 8008f86:	82bb      	strh	r3, [r7, #20]
	
	//printf("cal %x , pac %x\n" , cal_checksum , pack_checksum);
	if(cal_checksum != pack_checksum)
 8008f88:	8aba      	ldrh	r2, [r7, #20]
 8008f8a:	8afb      	ldrh	r3, [r7, #22]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d005      	beq.n	8008f9c <packet_desirialize+0x50>
	{
		printf("\nCHECKSUM ERROR\n") ;
 8008f90:	4818      	ldr	r0, [pc, #96]	; (8008ff4 <packet_desirialize+0xa8>)
 8008f92:	f000 ff1d 	bl	8009dd0 <puts>
		return PACK_CHECKSUM_ERROR ;
 8008f96:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9a:	e026      	b.n	8008fea <packet_desirialize+0x9e>
	}

	
	pack->src  = buffer[1] ;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	785a      	ldrb	r2, [r3, #1]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	701a      	strb	r2, [r3, #0]
	pack->dest = buffer[0] ;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	781a      	ldrb	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	705a      	strb	r2, [r3, #1]
	pack->type = buffer[3] ;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	78da      	ldrb	r2, [r3, #3]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	70da      	strb	r2, [r3, #3]
	pack->id   = buffer[2] ;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	789a      	ldrb	r2, [r3, #2]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	709a      	strb	r2, [r3, #2]
	pack->payload_length = buffer[4] ;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	791a      	ldrb	r2, [r3, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	711a      	strb	r2, [r3, #4]
	pack->payload = (u8*) malloc(sizeof(u8) * pack->payload_length) ; 
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	791b      	ldrb	r3, [r3, #4]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f89b 	bl	8009104 <malloc>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	609a      	str	r2, [r3, #8]
	memcpy(pack->payload , &buffer[5] , pack->payload_length ) ;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6898      	ldr	r0, [r3, #8]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	1d59      	adds	r1, r3, #5
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	791b      	ldrb	r3, [r3, #4]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f000 f89e 	bl	8009124 <memcpy>
	
	return PACK_OK ;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	0800e10c 	.word	0x0800e10c

08008ff8 <check_sum>:

u16 check_sum(u8 * buffer , int len)
{	
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 8009002:	2300      	movs	r3, #0
 8009004:	617b      	str	r3, [r7, #20]
	
	int sum = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
	
	while(len>1)
 800900a:	e017      	b.n	800903c <check_sum+0x44>
	{
		sum += (buffer[i] << 8) & 0xff00 ;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	4413      	add	r3, r2
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	b29b      	uxth	r3, r3
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4413      	add	r3, r2
 800901c:	613b      	str	r3, [r7, #16]
		sum +=  buffer[i+1] ;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	3301      	adds	r3, #1
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	4413      	add	r3, r2
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	4413      	add	r3, r2
 800902e:	613b      	str	r3, [r7, #16]
	
		len -= 2 ;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	3b02      	subs	r3, #2
 8009034:	603b      	str	r3, [r7, #0]
		i += 2;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	3302      	adds	r3, #2
 800903a:	617b      	str	r3, [r7, #20]
	while(len>1)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b01      	cmp	r3, #1
 8009040:	dce4      	bgt.n	800900c <check_sum+0x14>
	}
	
	if(len >0)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	dd13      	ble.n	8009070 <check_sum+0x78>
	{
		sum += buffer[len -1 ] ;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	3b01      	subs	r3, #1
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	4413      	add	r3, r2
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4413      	add	r3, r2
 8009058:	613b      	str	r3, [r7, #16]
	}
	
	while(sum > 0xffff)
 800905a:	e009      	b.n	8009070 <check_sum+0x78>
	{
		sum = sum & 0x0000ffff ;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	b29b      	uxth	r3, r3
 8009060:	613b      	str	r3, [r7, #16]
		unsigned short carry = 0xffff&(sum >> 16 );
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	0c1b      	lsrs	r3, r3, #16
 8009066:	81fb      	strh	r3, [r7, #14]
		sum += carry ;
 8009068:	89fb      	ldrh	r3, [r7, #14]
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	4413      	add	r3, r2
 800906e:	613b      	str	r3, [r7, #16]
	while(sum > 0xffff)
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009076:	daf1      	bge.n	800905c <check_sum+0x64>
	}
	
	return (u16)(0xffff - sum) ;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	b29b      	uxth	r3, r3
 800907c:	43db      	mvns	r3, r3
 800907e:	b29b      	uxth	r3, r3
}
 8009080:	4618      	mov	r0, r3
 8009082:	371c      	adds	r7, #28
 8009084:	46bd      	mov	sp, r7
 8009086:	bc80      	pop	{r7}
 8009088:	4770      	bx	lr

0800908a <packet_get_size>:


int packet_get_size(packet_t * pack)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
	return PACK_HEADER_LENGTH + pack->payload_length ;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	791b      	ldrb	r3, [r3, #4]
 8009096:	3307      	adds	r3, #7
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr

080090a2 <atof>:
 80090a2:	2100      	movs	r1, #0
 80090a4:	f001 bee0 	b.w	800ae68 <strtod>

080090a8 <atoi>:
 80090a8:	220a      	movs	r2, #10
 80090aa:	2100      	movs	r1, #0
 80090ac:	f001 bf6e 	b.w	800af8c <strtol>

080090b0 <__errno>:
 80090b0:	4b01      	ldr	r3, [pc, #4]	; (80090b8 <__errno+0x8>)
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20000010 	.word	0x20000010

080090bc <__libc_init_array>:
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	4d0d      	ldr	r5, [pc, #52]	; (80090f4 <__libc_init_array+0x38>)
 80090c0:	4c0d      	ldr	r4, [pc, #52]	; (80090f8 <__libc_init_array+0x3c>)
 80090c2:	1b64      	subs	r4, r4, r5
 80090c4:	10a4      	asrs	r4, r4, #2
 80090c6:	2600      	movs	r6, #0
 80090c8:	42a6      	cmp	r6, r4
 80090ca:	d109      	bne.n	80090e0 <__libc_init_array+0x24>
 80090cc:	4d0b      	ldr	r5, [pc, #44]	; (80090fc <__libc_init_array+0x40>)
 80090ce:	4c0c      	ldr	r4, [pc, #48]	; (8009100 <__libc_init_array+0x44>)
 80090d0:	f004 fdd6 	bl	800dc80 <_init>
 80090d4:	1b64      	subs	r4, r4, r5
 80090d6:	10a4      	asrs	r4, r4, #2
 80090d8:	2600      	movs	r6, #0
 80090da:	42a6      	cmp	r6, r4
 80090dc:	d105      	bne.n	80090ea <__libc_init_array+0x2e>
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e4:	4798      	blx	r3
 80090e6:	3601      	adds	r6, #1
 80090e8:	e7ee      	b.n	80090c8 <__libc_init_array+0xc>
 80090ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ee:	4798      	blx	r3
 80090f0:	3601      	adds	r6, #1
 80090f2:	e7f2      	b.n	80090da <__libc_init_array+0x1e>
 80090f4:	0800ee6c 	.word	0x0800ee6c
 80090f8:	0800ee6c 	.word	0x0800ee6c
 80090fc:	0800ee6c 	.word	0x0800ee6c
 8009100:	0800ee70 	.word	0x0800ee70

08009104 <malloc>:
 8009104:	4b02      	ldr	r3, [pc, #8]	; (8009110 <malloc+0xc>)
 8009106:	4601      	mov	r1, r0
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	f000 b86f 	b.w	80091ec <_malloc_r>
 800910e:	bf00      	nop
 8009110:	20000010 	.word	0x20000010

08009114 <free>:
 8009114:	4b02      	ldr	r3, [pc, #8]	; (8009120 <free+0xc>)
 8009116:	4601      	mov	r1, r0
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	f000 b819 	b.w	8009150 <_free_r>
 800911e:	bf00      	nop
 8009120:	20000010 	.word	0x20000010

08009124 <memcpy>:
 8009124:	440a      	add	r2, r1
 8009126:	4291      	cmp	r1, r2
 8009128:	f100 33ff 	add.w	r3, r0, #4294967295
 800912c:	d100      	bne.n	8009130 <memcpy+0xc>
 800912e:	4770      	bx	lr
 8009130:	b510      	push	{r4, lr}
 8009132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800913a:	4291      	cmp	r1, r2
 800913c:	d1f9      	bne.n	8009132 <memcpy+0xe>
 800913e:	bd10      	pop	{r4, pc}

08009140 <memset>:
 8009140:	4402      	add	r2, r0
 8009142:	4603      	mov	r3, r0
 8009144:	4293      	cmp	r3, r2
 8009146:	d100      	bne.n	800914a <memset+0xa>
 8009148:	4770      	bx	lr
 800914a:	f803 1b01 	strb.w	r1, [r3], #1
 800914e:	e7f9      	b.n	8009144 <memset+0x4>

08009150 <_free_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4605      	mov	r5, r0
 8009154:	2900      	cmp	r1, #0
 8009156:	d045      	beq.n	80091e4 <_free_r+0x94>
 8009158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915c:	1f0c      	subs	r4, r1, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	bfb8      	it	lt
 8009162:	18e4      	addlt	r4, r4, r3
 8009164:	f003 fc40 	bl	800c9e8 <__malloc_lock>
 8009168:	4a1f      	ldr	r2, [pc, #124]	; (80091e8 <_free_r+0x98>)
 800916a:	6813      	ldr	r3, [r2, #0]
 800916c:	4610      	mov	r0, r2
 800916e:	b933      	cbnz	r3, 800917e <_free_r+0x2e>
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	6014      	str	r4, [r2, #0]
 8009174:	4628      	mov	r0, r5
 8009176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800917a:	f003 bc3b 	b.w	800c9f4 <__malloc_unlock>
 800917e:	42a3      	cmp	r3, r4
 8009180:	d90b      	bls.n	800919a <_free_r+0x4a>
 8009182:	6821      	ldr	r1, [r4, #0]
 8009184:	1862      	adds	r2, r4, r1
 8009186:	4293      	cmp	r3, r2
 8009188:	bf04      	itt	eq
 800918a:	681a      	ldreq	r2, [r3, #0]
 800918c:	685b      	ldreq	r3, [r3, #4]
 800918e:	6063      	str	r3, [r4, #4]
 8009190:	bf04      	itt	eq
 8009192:	1852      	addeq	r2, r2, r1
 8009194:	6022      	streq	r2, [r4, #0]
 8009196:	6004      	str	r4, [r0, #0]
 8009198:	e7ec      	b.n	8009174 <_free_r+0x24>
 800919a:	461a      	mov	r2, r3
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	b10b      	cbz	r3, 80091a4 <_free_r+0x54>
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	d9fa      	bls.n	800919a <_free_r+0x4a>
 80091a4:	6811      	ldr	r1, [r2, #0]
 80091a6:	1850      	adds	r0, r2, r1
 80091a8:	42a0      	cmp	r0, r4
 80091aa:	d10b      	bne.n	80091c4 <_free_r+0x74>
 80091ac:	6820      	ldr	r0, [r4, #0]
 80091ae:	4401      	add	r1, r0
 80091b0:	1850      	adds	r0, r2, r1
 80091b2:	4283      	cmp	r3, r0
 80091b4:	6011      	str	r1, [r2, #0]
 80091b6:	d1dd      	bne.n	8009174 <_free_r+0x24>
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	6053      	str	r3, [r2, #4]
 80091be:	4401      	add	r1, r0
 80091c0:	6011      	str	r1, [r2, #0]
 80091c2:	e7d7      	b.n	8009174 <_free_r+0x24>
 80091c4:	d902      	bls.n	80091cc <_free_r+0x7c>
 80091c6:	230c      	movs	r3, #12
 80091c8:	602b      	str	r3, [r5, #0]
 80091ca:	e7d3      	b.n	8009174 <_free_r+0x24>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	1821      	adds	r1, r4, r0
 80091d0:	428b      	cmp	r3, r1
 80091d2:	bf04      	itt	eq
 80091d4:	6819      	ldreq	r1, [r3, #0]
 80091d6:	685b      	ldreq	r3, [r3, #4]
 80091d8:	6063      	str	r3, [r4, #4]
 80091da:	bf04      	itt	eq
 80091dc:	1809      	addeq	r1, r1, r0
 80091de:	6021      	streq	r1, [r4, #0]
 80091e0:	6054      	str	r4, [r2, #4]
 80091e2:	e7c7      	b.n	8009174 <_free_r+0x24>
 80091e4:	bd38      	pop	{r3, r4, r5, pc}
 80091e6:	bf00      	nop
 80091e8:	20000454 	.word	0x20000454

080091ec <_malloc_r>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	1ccd      	adds	r5, r1, #3
 80091f0:	f025 0503 	bic.w	r5, r5, #3
 80091f4:	3508      	adds	r5, #8
 80091f6:	2d0c      	cmp	r5, #12
 80091f8:	bf38      	it	cc
 80091fa:	250c      	movcc	r5, #12
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	4606      	mov	r6, r0
 8009200:	db01      	blt.n	8009206 <_malloc_r+0x1a>
 8009202:	42a9      	cmp	r1, r5
 8009204:	d903      	bls.n	800920e <_malloc_r+0x22>
 8009206:	230c      	movs	r3, #12
 8009208:	6033      	str	r3, [r6, #0]
 800920a:	2000      	movs	r0, #0
 800920c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920e:	f003 fbeb 	bl	800c9e8 <__malloc_lock>
 8009212:	4921      	ldr	r1, [pc, #132]	; (8009298 <_malloc_r+0xac>)
 8009214:	680a      	ldr	r2, [r1, #0]
 8009216:	4614      	mov	r4, r2
 8009218:	b99c      	cbnz	r4, 8009242 <_malloc_r+0x56>
 800921a:	4f20      	ldr	r7, [pc, #128]	; (800929c <_malloc_r+0xb0>)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	b923      	cbnz	r3, 800922a <_malloc_r+0x3e>
 8009220:	4621      	mov	r1, r4
 8009222:	4630      	mov	r0, r6
 8009224:	f000 fddc 	bl	8009de0 <_sbrk_r>
 8009228:	6038      	str	r0, [r7, #0]
 800922a:	4629      	mov	r1, r5
 800922c:	4630      	mov	r0, r6
 800922e:	f000 fdd7 	bl	8009de0 <_sbrk_r>
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	d123      	bne.n	800927e <_malloc_r+0x92>
 8009236:	230c      	movs	r3, #12
 8009238:	6033      	str	r3, [r6, #0]
 800923a:	4630      	mov	r0, r6
 800923c:	f003 fbda 	bl	800c9f4 <__malloc_unlock>
 8009240:	e7e3      	b.n	800920a <_malloc_r+0x1e>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	1b5b      	subs	r3, r3, r5
 8009246:	d417      	bmi.n	8009278 <_malloc_r+0x8c>
 8009248:	2b0b      	cmp	r3, #11
 800924a:	d903      	bls.n	8009254 <_malloc_r+0x68>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	441c      	add	r4, r3
 8009250:	6025      	str	r5, [r4, #0]
 8009252:	e004      	b.n	800925e <_malloc_r+0x72>
 8009254:	6863      	ldr	r3, [r4, #4]
 8009256:	42a2      	cmp	r2, r4
 8009258:	bf0c      	ite	eq
 800925a:	600b      	streq	r3, [r1, #0]
 800925c:	6053      	strne	r3, [r2, #4]
 800925e:	4630      	mov	r0, r6
 8009260:	f003 fbc8 	bl	800c9f4 <__malloc_unlock>
 8009264:	f104 000b 	add.w	r0, r4, #11
 8009268:	1d23      	adds	r3, r4, #4
 800926a:	f020 0007 	bic.w	r0, r0, #7
 800926e:	1ac2      	subs	r2, r0, r3
 8009270:	d0cc      	beq.n	800920c <_malloc_r+0x20>
 8009272:	1a1b      	subs	r3, r3, r0
 8009274:	50a3      	str	r3, [r4, r2]
 8009276:	e7c9      	b.n	800920c <_malloc_r+0x20>
 8009278:	4622      	mov	r2, r4
 800927a:	6864      	ldr	r4, [r4, #4]
 800927c:	e7cc      	b.n	8009218 <_malloc_r+0x2c>
 800927e:	1cc4      	adds	r4, r0, #3
 8009280:	f024 0403 	bic.w	r4, r4, #3
 8009284:	42a0      	cmp	r0, r4
 8009286:	d0e3      	beq.n	8009250 <_malloc_r+0x64>
 8009288:	1a21      	subs	r1, r4, r0
 800928a:	4630      	mov	r0, r6
 800928c:	f000 fda8 	bl	8009de0 <_sbrk_r>
 8009290:	3001      	adds	r0, #1
 8009292:	d1dd      	bne.n	8009250 <_malloc_r+0x64>
 8009294:	e7cf      	b.n	8009236 <_malloc_r+0x4a>
 8009296:	bf00      	nop
 8009298:	20000454 	.word	0x20000454
 800929c:	20000458 	.word	0x20000458

080092a0 <__cvt>:
 80092a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	b088      	sub	sp, #32
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	461f      	mov	r7, r3
 80092aa:	4614      	mov	r4, r2
 80092ac:	bfb8      	it	lt
 80092ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80092b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80092b6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80092ba:	bfb6      	itet	lt
 80092bc:	461f      	movlt	r7, r3
 80092be:	2300      	movge	r3, #0
 80092c0:	232d      	movlt	r3, #45	; 0x2d
 80092c2:	7013      	strb	r3, [r2, #0]
 80092c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092c6:	f023 0820 	bic.w	r8, r3, #32
 80092ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092ce:	d005      	beq.n	80092dc <__cvt+0x3c>
 80092d0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092d4:	d100      	bne.n	80092d8 <__cvt+0x38>
 80092d6:	3501      	adds	r5, #1
 80092d8:	2302      	movs	r3, #2
 80092da:	e000      	b.n	80092de <__cvt+0x3e>
 80092dc:	2303      	movs	r3, #3
 80092de:	aa07      	add	r2, sp, #28
 80092e0:	9204      	str	r2, [sp, #16]
 80092e2:	aa06      	add	r2, sp, #24
 80092e4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80092e8:	e9cd 3500 	strd	r3, r5, [sp]
 80092ec:	4622      	mov	r2, r4
 80092ee:	463b      	mov	r3, r7
 80092f0:	f001 ffb6 	bl	800b260 <_dtoa_r>
 80092f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092f8:	4606      	mov	r6, r0
 80092fa:	d102      	bne.n	8009302 <__cvt+0x62>
 80092fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092fe:	07db      	lsls	r3, r3, #31
 8009300:	d522      	bpl.n	8009348 <__cvt+0xa8>
 8009302:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009306:	eb06 0905 	add.w	r9, r6, r5
 800930a:	d110      	bne.n	800932e <__cvt+0x8e>
 800930c:	7833      	ldrb	r3, [r6, #0]
 800930e:	2b30      	cmp	r3, #48	; 0x30
 8009310:	d10a      	bne.n	8009328 <__cvt+0x88>
 8009312:	2200      	movs	r2, #0
 8009314:	2300      	movs	r3, #0
 8009316:	4620      	mov	r0, r4
 8009318:	4639      	mov	r1, r7
 800931a:	f7f7 fbbd 	bl	8000a98 <__aeabi_dcmpeq>
 800931e:	b918      	cbnz	r0, 8009328 <__cvt+0x88>
 8009320:	f1c5 0501 	rsb	r5, r5, #1
 8009324:	f8ca 5000 	str.w	r5, [sl]
 8009328:	f8da 3000 	ldr.w	r3, [sl]
 800932c:	4499      	add	r9, r3
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	4620      	mov	r0, r4
 8009334:	4639      	mov	r1, r7
 8009336:	f7f7 fbaf 	bl	8000a98 <__aeabi_dcmpeq>
 800933a:	b108      	cbz	r0, 8009340 <__cvt+0xa0>
 800933c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009340:	2230      	movs	r2, #48	; 0x30
 8009342:	9b07      	ldr	r3, [sp, #28]
 8009344:	454b      	cmp	r3, r9
 8009346:	d307      	bcc.n	8009358 <__cvt+0xb8>
 8009348:	9b07      	ldr	r3, [sp, #28]
 800934a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800934c:	1b9b      	subs	r3, r3, r6
 800934e:	4630      	mov	r0, r6
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	b008      	add	sp, #32
 8009354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009358:	1c59      	adds	r1, r3, #1
 800935a:	9107      	str	r1, [sp, #28]
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e7f0      	b.n	8009342 <__cvt+0xa2>

08009360 <__exponent>:
 8009360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009362:	4603      	mov	r3, r0
 8009364:	2900      	cmp	r1, #0
 8009366:	bfb8      	it	lt
 8009368:	4249      	neglt	r1, r1
 800936a:	f803 2b02 	strb.w	r2, [r3], #2
 800936e:	bfb4      	ite	lt
 8009370:	222d      	movlt	r2, #45	; 0x2d
 8009372:	222b      	movge	r2, #43	; 0x2b
 8009374:	2909      	cmp	r1, #9
 8009376:	7042      	strb	r2, [r0, #1]
 8009378:	dd2a      	ble.n	80093d0 <__exponent+0x70>
 800937a:	f10d 0407 	add.w	r4, sp, #7
 800937e:	46a4      	mov	ip, r4
 8009380:	270a      	movs	r7, #10
 8009382:	46a6      	mov	lr, r4
 8009384:	460a      	mov	r2, r1
 8009386:	fb91 f6f7 	sdiv	r6, r1, r7
 800938a:	fb07 1516 	mls	r5, r7, r6, r1
 800938e:	3530      	adds	r5, #48	; 0x30
 8009390:	2a63      	cmp	r2, #99	; 0x63
 8009392:	f104 34ff 	add.w	r4, r4, #4294967295
 8009396:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800939a:	4631      	mov	r1, r6
 800939c:	dcf1      	bgt.n	8009382 <__exponent+0x22>
 800939e:	3130      	adds	r1, #48	; 0x30
 80093a0:	f1ae 0502 	sub.w	r5, lr, #2
 80093a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093a8:	1c44      	adds	r4, r0, #1
 80093aa:	4629      	mov	r1, r5
 80093ac:	4561      	cmp	r1, ip
 80093ae:	d30a      	bcc.n	80093c6 <__exponent+0x66>
 80093b0:	f10d 0209 	add.w	r2, sp, #9
 80093b4:	eba2 020e 	sub.w	r2, r2, lr
 80093b8:	4565      	cmp	r5, ip
 80093ba:	bf88      	it	hi
 80093bc:	2200      	movhi	r2, #0
 80093be:	4413      	add	r3, r2
 80093c0:	1a18      	subs	r0, r3, r0
 80093c2:	b003      	add	sp, #12
 80093c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80093ce:	e7ed      	b.n	80093ac <__exponent+0x4c>
 80093d0:	2330      	movs	r3, #48	; 0x30
 80093d2:	3130      	adds	r1, #48	; 0x30
 80093d4:	7083      	strb	r3, [r0, #2]
 80093d6:	70c1      	strb	r1, [r0, #3]
 80093d8:	1d03      	adds	r3, r0, #4
 80093da:	e7f1      	b.n	80093c0 <__exponent+0x60>

080093dc <_printf_float>:
 80093dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	b091      	sub	sp, #68	; 0x44
 80093e2:	460c      	mov	r4, r1
 80093e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80093e8:	4616      	mov	r6, r2
 80093ea:	461f      	mov	r7, r3
 80093ec:	4605      	mov	r5, r0
 80093ee:	f003 fa7d 	bl	800c8ec <_localeconv_r>
 80093f2:	6803      	ldr	r3, [r0, #0]
 80093f4:	9309      	str	r3, [sp, #36]	; 0x24
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7f6 fecc 	bl	8000194 <strlen>
 80093fc:	2300      	movs	r3, #0
 80093fe:	930e      	str	r3, [sp, #56]	; 0x38
 8009400:	f8d8 3000 	ldr.w	r3, [r8]
 8009404:	900a      	str	r0, [sp, #40]	; 0x28
 8009406:	3307      	adds	r3, #7
 8009408:	f023 0307 	bic.w	r3, r3, #7
 800940c:	f103 0208 	add.w	r2, r3, #8
 8009410:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009414:	f8d4 b000 	ldr.w	fp, [r4]
 8009418:	f8c8 2000 	str.w	r2, [r8]
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009424:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009428:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800942c:	930b      	str	r3, [sp, #44]	; 0x2c
 800942e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009430:	4b9c      	ldr	r3, [pc, #624]	; (80096a4 <_printf_float+0x2c8>)
 8009432:	f04f 32ff 	mov.w	r2, #4294967295
 8009436:	4640      	mov	r0, r8
 8009438:	f7f7 fb60 	bl	8000afc <__aeabi_dcmpun>
 800943c:	bb70      	cbnz	r0, 800949c <_printf_float+0xc0>
 800943e:	4b99      	ldr	r3, [pc, #612]	; (80096a4 <_printf_float+0x2c8>)
 8009440:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009442:	f04f 32ff 	mov.w	r2, #4294967295
 8009446:	4640      	mov	r0, r8
 8009448:	f7f7 fb3a 	bl	8000ac0 <__aeabi_dcmple>
 800944c:	bb30      	cbnz	r0, 800949c <_printf_float+0xc0>
 800944e:	2200      	movs	r2, #0
 8009450:	2300      	movs	r3, #0
 8009452:	4640      	mov	r0, r8
 8009454:	4651      	mov	r1, sl
 8009456:	f7f7 fb29 	bl	8000aac <__aeabi_dcmplt>
 800945a:	b110      	cbz	r0, 8009462 <_printf_float+0x86>
 800945c:	232d      	movs	r3, #45	; 0x2d
 800945e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009462:	4b91      	ldr	r3, [pc, #580]	; (80096a8 <_printf_float+0x2cc>)
 8009464:	4891      	ldr	r0, [pc, #580]	; (80096ac <_printf_float+0x2d0>)
 8009466:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800946a:	bf94      	ite	ls
 800946c:	4698      	movls	r8, r3
 800946e:	4680      	movhi	r8, r0
 8009470:	2303      	movs	r3, #3
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	f02b 0304 	bic.w	r3, fp, #4
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	f04f 0a00 	mov.w	sl, #0
 800947e:	9700      	str	r7, [sp, #0]
 8009480:	4633      	mov	r3, r6
 8009482:	aa0f      	add	r2, sp, #60	; 0x3c
 8009484:	4621      	mov	r1, r4
 8009486:	4628      	mov	r0, r5
 8009488:	f000 f9d2 	bl	8009830 <_printf_common>
 800948c:	3001      	adds	r0, #1
 800948e:	f040 808f 	bne.w	80095b0 <_printf_float+0x1d4>
 8009492:	f04f 30ff 	mov.w	r0, #4294967295
 8009496:	b011      	add	sp, #68	; 0x44
 8009498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949c:	4642      	mov	r2, r8
 800949e:	4653      	mov	r3, sl
 80094a0:	4640      	mov	r0, r8
 80094a2:	4651      	mov	r1, sl
 80094a4:	f7f7 fb2a 	bl	8000afc <__aeabi_dcmpun>
 80094a8:	b140      	cbz	r0, 80094bc <_printf_float+0xe0>
 80094aa:	f1ba 0f00 	cmp.w	sl, #0
 80094ae:	bfbc      	itt	lt
 80094b0:	232d      	movlt	r3, #45	; 0x2d
 80094b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80094b6:	487e      	ldr	r0, [pc, #504]	; (80096b0 <_printf_float+0x2d4>)
 80094b8:	4b7e      	ldr	r3, [pc, #504]	; (80096b4 <_printf_float+0x2d8>)
 80094ba:	e7d4      	b.n	8009466 <_printf_float+0x8a>
 80094bc:	6863      	ldr	r3, [r4, #4]
 80094be:	1c5a      	adds	r2, r3, #1
 80094c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80094c4:	d142      	bne.n	800954c <_printf_float+0x170>
 80094c6:	2306      	movs	r3, #6
 80094c8:	6063      	str	r3, [r4, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	9206      	str	r2, [sp, #24]
 80094ce:	aa0e      	add	r2, sp, #56	; 0x38
 80094d0:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80094d4:	aa0d      	add	r2, sp, #52	; 0x34
 80094d6:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80094da:	9203      	str	r2, [sp, #12]
 80094dc:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80094e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	6863      	ldr	r3, [r4, #4]
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	4642      	mov	r2, r8
 80094ec:	4653      	mov	r3, sl
 80094ee:	4628      	mov	r0, r5
 80094f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80094f2:	f7ff fed5 	bl	80092a0 <__cvt>
 80094f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094f8:	2947      	cmp	r1, #71	; 0x47
 80094fa:	4680      	mov	r8, r0
 80094fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80094fe:	d108      	bne.n	8009512 <_printf_float+0x136>
 8009500:	1cc8      	adds	r0, r1, #3
 8009502:	db02      	blt.n	800950a <_printf_float+0x12e>
 8009504:	6863      	ldr	r3, [r4, #4]
 8009506:	4299      	cmp	r1, r3
 8009508:	dd40      	ble.n	800958c <_printf_float+0x1b0>
 800950a:	f1a9 0902 	sub.w	r9, r9, #2
 800950e:	fa5f f989 	uxtb.w	r9, r9
 8009512:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009516:	d81f      	bhi.n	8009558 <_printf_float+0x17c>
 8009518:	3901      	subs	r1, #1
 800951a:	464a      	mov	r2, r9
 800951c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009520:	910d      	str	r1, [sp, #52]	; 0x34
 8009522:	f7ff ff1d 	bl	8009360 <__exponent>
 8009526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009528:	1813      	adds	r3, r2, r0
 800952a:	2a01      	cmp	r2, #1
 800952c:	4682      	mov	sl, r0
 800952e:	6123      	str	r3, [r4, #16]
 8009530:	dc02      	bgt.n	8009538 <_printf_float+0x15c>
 8009532:	6822      	ldr	r2, [r4, #0]
 8009534:	07d2      	lsls	r2, r2, #31
 8009536:	d501      	bpl.n	800953c <_printf_float+0x160>
 8009538:	3301      	adds	r3, #1
 800953a:	6123      	str	r3, [r4, #16]
 800953c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009540:	2b00      	cmp	r3, #0
 8009542:	d09c      	beq.n	800947e <_printf_float+0xa2>
 8009544:	232d      	movs	r3, #45	; 0x2d
 8009546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800954a:	e798      	b.n	800947e <_printf_float+0xa2>
 800954c:	2947      	cmp	r1, #71	; 0x47
 800954e:	d1bc      	bne.n	80094ca <_printf_float+0xee>
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1ba      	bne.n	80094ca <_printf_float+0xee>
 8009554:	2301      	movs	r3, #1
 8009556:	e7b7      	b.n	80094c8 <_printf_float+0xec>
 8009558:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800955c:	d118      	bne.n	8009590 <_printf_float+0x1b4>
 800955e:	2900      	cmp	r1, #0
 8009560:	6863      	ldr	r3, [r4, #4]
 8009562:	dd0b      	ble.n	800957c <_printf_float+0x1a0>
 8009564:	6121      	str	r1, [r4, #16]
 8009566:	b913      	cbnz	r3, 800956e <_printf_float+0x192>
 8009568:	6822      	ldr	r2, [r4, #0]
 800956a:	07d0      	lsls	r0, r2, #31
 800956c:	d502      	bpl.n	8009574 <_printf_float+0x198>
 800956e:	3301      	adds	r3, #1
 8009570:	440b      	add	r3, r1
 8009572:	6123      	str	r3, [r4, #16]
 8009574:	65a1      	str	r1, [r4, #88]	; 0x58
 8009576:	f04f 0a00 	mov.w	sl, #0
 800957a:	e7df      	b.n	800953c <_printf_float+0x160>
 800957c:	b913      	cbnz	r3, 8009584 <_printf_float+0x1a8>
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	07d2      	lsls	r2, r2, #31
 8009582:	d501      	bpl.n	8009588 <_printf_float+0x1ac>
 8009584:	3302      	adds	r3, #2
 8009586:	e7f4      	b.n	8009572 <_printf_float+0x196>
 8009588:	2301      	movs	r3, #1
 800958a:	e7f2      	b.n	8009572 <_printf_float+0x196>
 800958c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009592:	4299      	cmp	r1, r3
 8009594:	db05      	blt.n	80095a2 <_printf_float+0x1c6>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	6121      	str	r1, [r4, #16]
 800959a:	07d8      	lsls	r0, r3, #31
 800959c:	d5ea      	bpl.n	8009574 <_printf_float+0x198>
 800959e:	1c4b      	adds	r3, r1, #1
 80095a0:	e7e7      	b.n	8009572 <_printf_float+0x196>
 80095a2:	2900      	cmp	r1, #0
 80095a4:	bfd4      	ite	le
 80095a6:	f1c1 0202 	rsble	r2, r1, #2
 80095aa:	2201      	movgt	r2, #1
 80095ac:	4413      	add	r3, r2
 80095ae:	e7e0      	b.n	8009572 <_printf_float+0x196>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	055a      	lsls	r2, r3, #21
 80095b4:	d407      	bmi.n	80095c6 <_printf_float+0x1ea>
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	4642      	mov	r2, r8
 80095ba:	4631      	mov	r1, r6
 80095bc:	4628      	mov	r0, r5
 80095be:	47b8      	blx	r7
 80095c0:	3001      	adds	r0, #1
 80095c2:	d12b      	bne.n	800961c <_printf_float+0x240>
 80095c4:	e765      	b.n	8009492 <_printf_float+0xb6>
 80095c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80095ca:	f240 80dc 	bls.w	8009786 <_printf_float+0x3aa>
 80095ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095d2:	2200      	movs	r2, #0
 80095d4:	2300      	movs	r3, #0
 80095d6:	f7f7 fa5f 	bl	8000a98 <__aeabi_dcmpeq>
 80095da:	2800      	cmp	r0, #0
 80095dc:	d033      	beq.n	8009646 <_printf_float+0x26a>
 80095de:	4a36      	ldr	r2, [pc, #216]	; (80096b8 <_printf_float+0x2dc>)
 80095e0:	2301      	movs	r3, #1
 80095e2:	4631      	mov	r1, r6
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b8      	blx	r7
 80095e8:	3001      	adds	r0, #1
 80095ea:	f43f af52 	beq.w	8009492 <_printf_float+0xb6>
 80095ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80095f2:	429a      	cmp	r2, r3
 80095f4:	db02      	blt.n	80095fc <_printf_float+0x220>
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	07d8      	lsls	r0, r3, #31
 80095fa:	d50f      	bpl.n	800961c <_printf_float+0x240>
 80095fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	f43f af43 	beq.w	8009492 <_printf_float+0xb6>
 800960c:	f04f 0800 	mov.w	r8, #0
 8009610:	f104 091a 	add.w	r9, r4, #26
 8009614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009616:	3b01      	subs	r3, #1
 8009618:	4543      	cmp	r3, r8
 800961a:	dc09      	bgt.n	8009630 <_printf_float+0x254>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	079b      	lsls	r3, r3, #30
 8009620:	f100 8101 	bmi.w	8009826 <_printf_float+0x44a>
 8009624:	68e0      	ldr	r0, [r4, #12]
 8009626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009628:	4298      	cmp	r0, r3
 800962a:	bfb8      	it	lt
 800962c:	4618      	movlt	r0, r3
 800962e:	e732      	b.n	8009496 <_printf_float+0xba>
 8009630:	2301      	movs	r3, #1
 8009632:	464a      	mov	r2, r9
 8009634:	4631      	mov	r1, r6
 8009636:	4628      	mov	r0, r5
 8009638:	47b8      	blx	r7
 800963a:	3001      	adds	r0, #1
 800963c:	f43f af29 	beq.w	8009492 <_printf_float+0xb6>
 8009640:	f108 0801 	add.w	r8, r8, #1
 8009644:	e7e6      	b.n	8009614 <_printf_float+0x238>
 8009646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009648:	2b00      	cmp	r3, #0
 800964a:	dc37      	bgt.n	80096bc <_printf_float+0x2e0>
 800964c:	4a1a      	ldr	r2, [pc, #104]	; (80096b8 <_printf_float+0x2dc>)
 800964e:	2301      	movs	r3, #1
 8009650:	4631      	mov	r1, r6
 8009652:	4628      	mov	r0, r5
 8009654:	47b8      	blx	r7
 8009656:	3001      	adds	r0, #1
 8009658:	f43f af1b 	beq.w	8009492 <_printf_float+0xb6>
 800965c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009660:	4313      	orrs	r3, r2
 8009662:	d102      	bne.n	800966a <_printf_float+0x28e>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	07d9      	lsls	r1, r3, #31
 8009668:	d5d8      	bpl.n	800961c <_printf_float+0x240>
 800966a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800966e:	4631      	mov	r1, r6
 8009670:	4628      	mov	r0, r5
 8009672:	47b8      	blx	r7
 8009674:	3001      	adds	r0, #1
 8009676:	f43f af0c 	beq.w	8009492 <_printf_float+0xb6>
 800967a:	f04f 0900 	mov.w	r9, #0
 800967e:	f104 0a1a 	add.w	sl, r4, #26
 8009682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009684:	425b      	negs	r3, r3
 8009686:	454b      	cmp	r3, r9
 8009688:	dc01      	bgt.n	800968e <_printf_float+0x2b2>
 800968a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800968c:	e794      	b.n	80095b8 <_printf_float+0x1dc>
 800968e:	2301      	movs	r3, #1
 8009690:	4652      	mov	r2, sl
 8009692:	4631      	mov	r1, r6
 8009694:	4628      	mov	r0, r5
 8009696:	47b8      	blx	r7
 8009698:	3001      	adds	r0, #1
 800969a:	f43f aefa 	beq.w	8009492 <_printf_float+0xb6>
 800969e:	f109 0901 	add.w	r9, r9, #1
 80096a2:	e7ee      	b.n	8009682 <_printf_float+0x2a6>
 80096a4:	7fefffff 	.word	0x7fefffff
 80096a8:	0800e320 	.word	0x0800e320
 80096ac:	0800e324 	.word	0x0800e324
 80096b0:	0800e32c 	.word	0x0800e32c
 80096b4:	0800e328 	.word	0x0800e328
 80096b8:	0800e330 	.word	0x0800e330
 80096bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096c0:	429a      	cmp	r2, r3
 80096c2:	bfa8      	it	ge
 80096c4:	461a      	movge	r2, r3
 80096c6:	2a00      	cmp	r2, #0
 80096c8:	4691      	mov	r9, r2
 80096ca:	dc37      	bgt.n	800973c <_printf_float+0x360>
 80096cc:	f04f 0b00 	mov.w	fp, #0
 80096d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096d4:	f104 021a 	add.w	r2, r4, #26
 80096d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80096dc:	ebaa 0309 	sub.w	r3, sl, r9
 80096e0:	455b      	cmp	r3, fp
 80096e2:	dc33      	bgt.n	800974c <_printf_float+0x370>
 80096e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80096e8:	429a      	cmp	r2, r3
 80096ea:	db3b      	blt.n	8009764 <_printf_float+0x388>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	07da      	lsls	r2, r3, #31
 80096f0:	d438      	bmi.n	8009764 <_printf_float+0x388>
 80096f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80096f6:	eba2 030a 	sub.w	r3, r2, sl
 80096fa:	eba2 0901 	sub.w	r9, r2, r1
 80096fe:	4599      	cmp	r9, r3
 8009700:	bfa8      	it	ge
 8009702:	4699      	movge	r9, r3
 8009704:	f1b9 0f00 	cmp.w	r9, #0
 8009708:	dc34      	bgt.n	8009774 <_printf_float+0x398>
 800970a:	f04f 0800 	mov.w	r8, #0
 800970e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009712:	f104 0a1a 	add.w	sl, r4, #26
 8009716:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800971a:	1a9b      	subs	r3, r3, r2
 800971c:	eba3 0309 	sub.w	r3, r3, r9
 8009720:	4543      	cmp	r3, r8
 8009722:	f77f af7b 	ble.w	800961c <_printf_float+0x240>
 8009726:	2301      	movs	r3, #1
 8009728:	4652      	mov	r2, sl
 800972a:	4631      	mov	r1, r6
 800972c:	4628      	mov	r0, r5
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	f43f aeae 	beq.w	8009492 <_printf_float+0xb6>
 8009736:	f108 0801 	add.w	r8, r8, #1
 800973a:	e7ec      	b.n	8009716 <_printf_float+0x33a>
 800973c:	4613      	mov	r3, r2
 800973e:	4631      	mov	r1, r6
 8009740:	4642      	mov	r2, r8
 8009742:	4628      	mov	r0, r5
 8009744:	47b8      	blx	r7
 8009746:	3001      	adds	r0, #1
 8009748:	d1c0      	bne.n	80096cc <_printf_float+0x2f0>
 800974a:	e6a2      	b.n	8009492 <_printf_float+0xb6>
 800974c:	2301      	movs	r3, #1
 800974e:	4631      	mov	r1, r6
 8009750:	4628      	mov	r0, r5
 8009752:	920b      	str	r2, [sp, #44]	; 0x2c
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	f43f ae9b 	beq.w	8009492 <_printf_float+0xb6>
 800975c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800975e:	f10b 0b01 	add.w	fp, fp, #1
 8009762:	e7b9      	b.n	80096d8 <_printf_float+0x2fc>
 8009764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009768:	4631      	mov	r1, r6
 800976a:	4628      	mov	r0, r5
 800976c:	47b8      	blx	r7
 800976e:	3001      	adds	r0, #1
 8009770:	d1bf      	bne.n	80096f2 <_printf_float+0x316>
 8009772:	e68e      	b.n	8009492 <_printf_float+0xb6>
 8009774:	464b      	mov	r3, r9
 8009776:	eb08 020a 	add.w	r2, r8, sl
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	47b8      	blx	r7
 8009780:	3001      	adds	r0, #1
 8009782:	d1c2      	bne.n	800970a <_printf_float+0x32e>
 8009784:	e685      	b.n	8009492 <_printf_float+0xb6>
 8009786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009788:	2a01      	cmp	r2, #1
 800978a:	dc01      	bgt.n	8009790 <_printf_float+0x3b4>
 800978c:	07db      	lsls	r3, r3, #31
 800978e:	d537      	bpl.n	8009800 <_printf_float+0x424>
 8009790:	2301      	movs	r3, #1
 8009792:	4642      	mov	r2, r8
 8009794:	4631      	mov	r1, r6
 8009796:	4628      	mov	r0, r5
 8009798:	47b8      	blx	r7
 800979a:	3001      	adds	r0, #1
 800979c:	f43f ae79 	beq.w	8009492 <_printf_float+0xb6>
 80097a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097a4:	4631      	mov	r1, r6
 80097a6:	4628      	mov	r0, r5
 80097a8:	47b8      	blx	r7
 80097aa:	3001      	adds	r0, #1
 80097ac:	f43f ae71 	beq.w	8009492 <_printf_float+0xb6>
 80097b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097b4:	2200      	movs	r2, #0
 80097b6:	2300      	movs	r3, #0
 80097b8:	f7f7 f96e 	bl	8000a98 <__aeabi_dcmpeq>
 80097bc:	b9d8      	cbnz	r0, 80097f6 <_printf_float+0x41a>
 80097be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097c0:	f108 0201 	add.w	r2, r8, #1
 80097c4:	3b01      	subs	r3, #1
 80097c6:	4631      	mov	r1, r6
 80097c8:	4628      	mov	r0, r5
 80097ca:	47b8      	blx	r7
 80097cc:	3001      	adds	r0, #1
 80097ce:	d10e      	bne.n	80097ee <_printf_float+0x412>
 80097d0:	e65f      	b.n	8009492 <_printf_float+0xb6>
 80097d2:	2301      	movs	r3, #1
 80097d4:	464a      	mov	r2, r9
 80097d6:	4631      	mov	r1, r6
 80097d8:	4628      	mov	r0, r5
 80097da:	47b8      	blx	r7
 80097dc:	3001      	adds	r0, #1
 80097de:	f43f ae58 	beq.w	8009492 <_printf_float+0xb6>
 80097e2:	f108 0801 	add.w	r8, r8, #1
 80097e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097e8:	3b01      	subs	r3, #1
 80097ea:	4543      	cmp	r3, r8
 80097ec:	dcf1      	bgt.n	80097d2 <_printf_float+0x3f6>
 80097ee:	4653      	mov	r3, sl
 80097f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097f4:	e6e1      	b.n	80095ba <_printf_float+0x1de>
 80097f6:	f04f 0800 	mov.w	r8, #0
 80097fa:	f104 091a 	add.w	r9, r4, #26
 80097fe:	e7f2      	b.n	80097e6 <_printf_float+0x40a>
 8009800:	2301      	movs	r3, #1
 8009802:	4642      	mov	r2, r8
 8009804:	e7df      	b.n	80097c6 <_printf_float+0x3ea>
 8009806:	2301      	movs	r3, #1
 8009808:	464a      	mov	r2, r9
 800980a:	4631      	mov	r1, r6
 800980c:	4628      	mov	r0, r5
 800980e:	47b8      	blx	r7
 8009810:	3001      	adds	r0, #1
 8009812:	f43f ae3e 	beq.w	8009492 <_printf_float+0xb6>
 8009816:	f108 0801 	add.w	r8, r8, #1
 800981a:	68e3      	ldr	r3, [r4, #12]
 800981c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800981e:	1a5b      	subs	r3, r3, r1
 8009820:	4543      	cmp	r3, r8
 8009822:	dcf0      	bgt.n	8009806 <_printf_float+0x42a>
 8009824:	e6fe      	b.n	8009624 <_printf_float+0x248>
 8009826:	f04f 0800 	mov.w	r8, #0
 800982a:	f104 0919 	add.w	r9, r4, #25
 800982e:	e7f4      	b.n	800981a <_printf_float+0x43e>

08009830 <_printf_common>:
 8009830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009834:	4616      	mov	r6, r2
 8009836:	4699      	mov	r9, r3
 8009838:	688a      	ldr	r2, [r1, #8]
 800983a:	690b      	ldr	r3, [r1, #16]
 800983c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009840:	4293      	cmp	r3, r2
 8009842:	bfb8      	it	lt
 8009844:	4613      	movlt	r3, r2
 8009846:	6033      	str	r3, [r6, #0]
 8009848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800984c:	4607      	mov	r7, r0
 800984e:	460c      	mov	r4, r1
 8009850:	b10a      	cbz	r2, 8009856 <_printf_common+0x26>
 8009852:	3301      	adds	r3, #1
 8009854:	6033      	str	r3, [r6, #0]
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	0699      	lsls	r1, r3, #26
 800985a:	bf42      	ittt	mi
 800985c:	6833      	ldrmi	r3, [r6, #0]
 800985e:	3302      	addmi	r3, #2
 8009860:	6033      	strmi	r3, [r6, #0]
 8009862:	6825      	ldr	r5, [r4, #0]
 8009864:	f015 0506 	ands.w	r5, r5, #6
 8009868:	d106      	bne.n	8009878 <_printf_common+0x48>
 800986a:	f104 0a19 	add.w	sl, r4, #25
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	6832      	ldr	r2, [r6, #0]
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	42ab      	cmp	r3, r5
 8009876:	dc26      	bgt.n	80098c6 <_printf_common+0x96>
 8009878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800987c:	1e13      	subs	r3, r2, #0
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	bf18      	it	ne
 8009882:	2301      	movne	r3, #1
 8009884:	0692      	lsls	r2, r2, #26
 8009886:	d42b      	bmi.n	80098e0 <_printf_common+0xb0>
 8009888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800988c:	4649      	mov	r1, r9
 800988e:	4638      	mov	r0, r7
 8009890:	47c0      	blx	r8
 8009892:	3001      	adds	r0, #1
 8009894:	d01e      	beq.n	80098d4 <_printf_common+0xa4>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	68e5      	ldr	r5, [r4, #12]
 800989a:	6832      	ldr	r2, [r6, #0]
 800989c:	f003 0306 	and.w	r3, r3, #6
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	bf08      	it	eq
 80098a4:	1aad      	subeq	r5, r5, r2
 80098a6:	68a3      	ldr	r3, [r4, #8]
 80098a8:	6922      	ldr	r2, [r4, #16]
 80098aa:	bf0c      	ite	eq
 80098ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098b0:	2500      	movne	r5, #0
 80098b2:	4293      	cmp	r3, r2
 80098b4:	bfc4      	itt	gt
 80098b6:	1a9b      	subgt	r3, r3, r2
 80098b8:	18ed      	addgt	r5, r5, r3
 80098ba:	2600      	movs	r6, #0
 80098bc:	341a      	adds	r4, #26
 80098be:	42b5      	cmp	r5, r6
 80098c0:	d11a      	bne.n	80098f8 <_printf_common+0xc8>
 80098c2:	2000      	movs	r0, #0
 80098c4:	e008      	b.n	80098d8 <_printf_common+0xa8>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4652      	mov	r2, sl
 80098ca:	4649      	mov	r1, r9
 80098cc:	4638      	mov	r0, r7
 80098ce:	47c0      	blx	r8
 80098d0:	3001      	adds	r0, #1
 80098d2:	d103      	bne.n	80098dc <_printf_common+0xac>
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098dc:	3501      	adds	r5, #1
 80098de:	e7c6      	b.n	800986e <_printf_common+0x3e>
 80098e0:	18e1      	adds	r1, r4, r3
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	2030      	movs	r0, #48	; 0x30
 80098e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098ea:	4422      	add	r2, r4
 80098ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098f4:	3302      	adds	r3, #2
 80098f6:	e7c7      	b.n	8009888 <_printf_common+0x58>
 80098f8:	2301      	movs	r3, #1
 80098fa:	4622      	mov	r2, r4
 80098fc:	4649      	mov	r1, r9
 80098fe:	4638      	mov	r0, r7
 8009900:	47c0      	blx	r8
 8009902:	3001      	adds	r0, #1
 8009904:	d0e6      	beq.n	80098d4 <_printf_common+0xa4>
 8009906:	3601      	adds	r6, #1
 8009908:	e7d9      	b.n	80098be <_printf_common+0x8e>
	...

0800990c <_printf_i>:
 800990c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009910:	460c      	mov	r4, r1
 8009912:	4691      	mov	r9, r2
 8009914:	7e27      	ldrb	r7, [r4, #24]
 8009916:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009918:	2f78      	cmp	r7, #120	; 0x78
 800991a:	4680      	mov	r8, r0
 800991c:	469a      	mov	sl, r3
 800991e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009922:	d807      	bhi.n	8009934 <_printf_i+0x28>
 8009924:	2f62      	cmp	r7, #98	; 0x62
 8009926:	d80a      	bhi.n	800993e <_printf_i+0x32>
 8009928:	2f00      	cmp	r7, #0
 800992a:	f000 80d8 	beq.w	8009ade <_printf_i+0x1d2>
 800992e:	2f58      	cmp	r7, #88	; 0x58
 8009930:	f000 80a3 	beq.w	8009a7a <_printf_i+0x16e>
 8009934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800993c:	e03a      	b.n	80099b4 <_printf_i+0xa8>
 800993e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009942:	2b15      	cmp	r3, #21
 8009944:	d8f6      	bhi.n	8009934 <_printf_i+0x28>
 8009946:	a001      	add	r0, pc, #4	; (adr r0, 800994c <_printf_i+0x40>)
 8009948:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800994c:	080099a5 	.word	0x080099a5
 8009950:	080099b9 	.word	0x080099b9
 8009954:	08009935 	.word	0x08009935
 8009958:	08009935 	.word	0x08009935
 800995c:	08009935 	.word	0x08009935
 8009960:	08009935 	.word	0x08009935
 8009964:	080099b9 	.word	0x080099b9
 8009968:	08009935 	.word	0x08009935
 800996c:	08009935 	.word	0x08009935
 8009970:	08009935 	.word	0x08009935
 8009974:	08009935 	.word	0x08009935
 8009978:	08009ac5 	.word	0x08009ac5
 800997c:	080099e9 	.word	0x080099e9
 8009980:	08009aa7 	.word	0x08009aa7
 8009984:	08009935 	.word	0x08009935
 8009988:	08009935 	.word	0x08009935
 800998c:	08009ae7 	.word	0x08009ae7
 8009990:	08009935 	.word	0x08009935
 8009994:	080099e9 	.word	0x080099e9
 8009998:	08009935 	.word	0x08009935
 800999c:	08009935 	.word	0x08009935
 80099a0:	08009aaf 	.word	0x08009aaf
 80099a4:	680b      	ldr	r3, [r1, #0]
 80099a6:	1d1a      	adds	r2, r3, #4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	600a      	str	r2, [r1, #0]
 80099ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099b4:	2301      	movs	r3, #1
 80099b6:	e0a3      	b.n	8009b00 <_printf_i+0x1f4>
 80099b8:	6825      	ldr	r5, [r4, #0]
 80099ba:	6808      	ldr	r0, [r1, #0]
 80099bc:	062e      	lsls	r6, r5, #24
 80099be:	f100 0304 	add.w	r3, r0, #4
 80099c2:	d50a      	bpl.n	80099da <_printf_i+0xce>
 80099c4:	6805      	ldr	r5, [r0, #0]
 80099c6:	600b      	str	r3, [r1, #0]
 80099c8:	2d00      	cmp	r5, #0
 80099ca:	da03      	bge.n	80099d4 <_printf_i+0xc8>
 80099cc:	232d      	movs	r3, #45	; 0x2d
 80099ce:	426d      	negs	r5, r5
 80099d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d4:	485e      	ldr	r0, [pc, #376]	; (8009b50 <_printf_i+0x244>)
 80099d6:	230a      	movs	r3, #10
 80099d8:	e019      	b.n	8009a0e <_printf_i+0x102>
 80099da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80099de:	6805      	ldr	r5, [r0, #0]
 80099e0:	600b      	str	r3, [r1, #0]
 80099e2:	bf18      	it	ne
 80099e4:	b22d      	sxthne	r5, r5
 80099e6:	e7ef      	b.n	80099c8 <_printf_i+0xbc>
 80099e8:	680b      	ldr	r3, [r1, #0]
 80099ea:	6825      	ldr	r5, [r4, #0]
 80099ec:	1d18      	adds	r0, r3, #4
 80099ee:	6008      	str	r0, [r1, #0]
 80099f0:	0628      	lsls	r0, r5, #24
 80099f2:	d501      	bpl.n	80099f8 <_printf_i+0xec>
 80099f4:	681d      	ldr	r5, [r3, #0]
 80099f6:	e002      	b.n	80099fe <_printf_i+0xf2>
 80099f8:	0669      	lsls	r1, r5, #25
 80099fa:	d5fb      	bpl.n	80099f4 <_printf_i+0xe8>
 80099fc:	881d      	ldrh	r5, [r3, #0]
 80099fe:	4854      	ldr	r0, [pc, #336]	; (8009b50 <_printf_i+0x244>)
 8009a00:	2f6f      	cmp	r7, #111	; 0x6f
 8009a02:	bf0c      	ite	eq
 8009a04:	2308      	moveq	r3, #8
 8009a06:	230a      	movne	r3, #10
 8009a08:	2100      	movs	r1, #0
 8009a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a0e:	6866      	ldr	r6, [r4, #4]
 8009a10:	60a6      	str	r6, [r4, #8]
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	bfa2      	ittt	ge
 8009a16:	6821      	ldrge	r1, [r4, #0]
 8009a18:	f021 0104 	bicge.w	r1, r1, #4
 8009a1c:	6021      	strge	r1, [r4, #0]
 8009a1e:	b90d      	cbnz	r5, 8009a24 <_printf_i+0x118>
 8009a20:	2e00      	cmp	r6, #0
 8009a22:	d04d      	beq.n	8009ac0 <_printf_i+0x1b4>
 8009a24:	4616      	mov	r6, r2
 8009a26:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a2a:	fb03 5711 	mls	r7, r3, r1, r5
 8009a2e:	5dc7      	ldrb	r7, [r0, r7]
 8009a30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a34:	462f      	mov	r7, r5
 8009a36:	42bb      	cmp	r3, r7
 8009a38:	460d      	mov	r5, r1
 8009a3a:	d9f4      	bls.n	8009a26 <_printf_i+0x11a>
 8009a3c:	2b08      	cmp	r3, #8
 8009a3e:	d10b      	bne.n	8009a58 <_printf_i+0x14c>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	07df      	lsls	r7, r3, #31
 8009a44:	d508      	bpl.n	8009a58 <_printf_i+0x14c>
 8009a46:	6923      	ldr	r3, [r4, #16]
 8009a48:	6861      	ldr	r1, [r4, #4]
 8009a4a:	4299      	cmp	r1, r3
 8009a4c:	bfde      	ittt	le
 8009a4e:	2330      	movle	r3, #48	; 0x30
 8009a50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a58:	1b92      	subs	r2, r2, r6
 8009a5a:	6122      	str	r2, [r4, #16]
 8009a5c:	f8cd a000 	str.w	sl, [sp]
 8009a60:	464b      	mov	r3, r9
 8009a62:	aa03      	add	r2, sp, #12
 8009a64:	4621      	mov	r1, r4
 8009a66:	4640      	mov	r0, r8
 8009a68:	f7ff fee2 	bl	8009830 <_printf_common>
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d14c      	bne.n	8009b0a <_printf_i+0x1fe>
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	b004      	add	sp, #16
 8009a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7a:	4835      	ldr	r0, [pc, #212]	; (8009b50 <_printf_i+0x244>)
 8009a7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	680e      	ldr	r6, [r1, #0]
 8009a84:	061f      	lsls	r7, r3, #24
 8009a86:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a8a:	600e      	str	r6, [r1, #0]
 8009a8c:	d514      	bpl.n	8009ab8 <_printf_i+0x1ac>
 8009a8e:	07d9      	lsls	r1, r3, #31
 8009a90:	bf44      	itt	mi
 8009a92:	f043 0320 	orrmi.w	r3, r3, #32
 8009a96:	6023      	strmi	r3, [r4, #0]
 8009a98:	b91d      	cbnz	r5, 8009aa2 <_printf_i+0x196>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	f023 0320 	bic.w	r3, r3, #32
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	2310      	movs	r3, #16
 8009aa4:	e7b0      	b.n	8009a08 <_printf_i+0xfc>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	f043 0320 	orr.w	r3, r3, #32
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	2378      	movs	r3, #120	; 0x78
 8009ab0:	4828      	ldr	r0, [pc, #160]	; (8009b54 <_printf_i+0x248>)
 8009ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ab6:	e7e3      	b.n	8009a80 <_printf_i+0x174>
 8009ab8:	065e      	lsls	r6, r3, #25
 8009aba:	bf48      	it	mi
 8009abc:	b2ad      	uxthmi	r5, r5
 8009abe:	e7e6      	b.n	8009a8e <_printf_i+0x182>
 8009ac0:	4616      	mov	r6, r2
 8009ac2:	e7bb      	b.n	8009a3c <_printf_i+0x130>
 8009ac4:	680b      	ldr	r3, [r1, #0]
 8009ac6:	6826      	ldr	r6, [r4, #0]
 8009ac8:	6960      	ldr	r0, [r4, #20]
 8009aca:	1d1d      	adds	r5, r3, #4
 8009acc:	600d      	str	r5, [r1, #0]
 8009ace:	0635      	lsls	r5, r6, #24
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	d501      	bpl.n	8009ad8 <_printf_i+0x1cc>
 8009ad4:	6018      	str	r0, [r3, #0]
 8009ad6:	e002      	b.n	8009ade <_printf_i+0x1d2>
 8009ad8:	0671      	lsls	r1, r6, #25
 8009ada:	d5fb      	bpl.n	8009ad4 <_printf_i+0x1c8>
 8009adc:	8018      	strh	r0, [r3, #0]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	4616      	mov	r6, r2
 8009ae4:	e7ba      	b.n	8009a5c <_printf_i+0x150>
 8009ae6:	680b      	ldr	r3, [r1, #0]
 8009ae8:	1d1a      	adds	r2, r3, #4
 8009aea:	600a      	str	r2, [r1, #0]
 8009aec:	681e      	ldr	r6, [r3, #0]
 8009aee:	6862      	ldr	r2, [r4, #4]
 8009af0:	2100      	movs	r1, #0
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7f6 fb5c 	bl	80001b0 <memchr>
 8009af8:	b108      	cbz	r0, 8009afe <_printf_i+0x1f2>
 8009afa:	1b80      	subs	r0, r0, r6
 8009afc:	6060      	str	r0, [r4, #4]
 8009afe:	6863      	ldr	r3, [r4, #4]
 8009b00:	6123      	str	r3, [r4, #16]
 8009b02:	2300      	movs	r3, #0
 8009b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b08:	e7a8      	b.n	8009a5c <_printf_i+0x150>
 8009b0a:	6923      	ldr	r3, [r4, #16]
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4640      	mov	r0, r8
 8009b12:	47d0      	blx	sl
 8009b14:	3001      	adds	r0, #1
 8009b16:	d0ab      	beq.n	8009a70 <_printf_i+0x164>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	079b      	lsls	r3, r3, #30
 8009b1c:	d413      	bmi.n	8009b46 <_printf_i+0x23a>
 8009b1e:	68e0      	ldr	r0, [r4, #12]
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	4298      	cmp	r0, r3
 8009b24:	bfb8      	it	lt
 8009b26:	4618      	movlt	r0, r3
 8009b28:	e7a4      	b.n	8009a74 <_printf_i+0x168>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4649      	mov	r1, r9
 8009b30:	4640      	mov	r0, r8
 8009b32:	47d0      	blx	sl
 8009b34:	3001      	adds	r0, #1
 8009b36:	d09b      	beq.n	8009a70 <_printf_i+0x164>
 8009b38:	3501      	adds	r5, #1
 8009b3a:	68e3      	ldr	r3, [r4, #12]
 8009b3c:	9903      	ldr	r1, [sp, #12]
 8009b3e:	1a5b      	subs	r3, r3, r1
 8009b40:	42ab      	cmp	r3, r5
 8009b42:	dcf2      	bgt.n	8009b2a <_printf_i+0x21e>
 8009b44:	e7eb      	b.n	8009b1e <_printf_i+0x212>
 8009b46:	2500      	movs	r5, #0
 8009b48:	f104 0619 	add.w	r6, r4, #25
 8009b4c:	e7f5      	b.n	8009b3a <_printf_i+0x22e>
 8009b4e:	bf00      	nop
 8009b50:	0800e332 	.word	0x0800e332
 8009b54:	0800e343 	.word	0x0800e343

08009b58 <_perror_r>:
 8009b58:	6983      	ldr	r3, [r0, #24]
 8009b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b5c:	68c4      	ldr	r4, [r0, #12]
 8009b5e:	4605      	mov	r5, r0
 8009b60:	460e      	mov	r6, r1
 8009b62:	b90b      	cbnz	r3, 8009b68 <_perror_r+0x10>
 8009b64:	f002 fac2 	bl	800c0ec <__sinit>
 8009b68:	4b43      	ldr	r3, [pc, #268]	; (8009c78 <_perror_r+0x120>)
 8009b6a:	429c      	cmp	r4, r3
 8009b6c:	d132      	bne.n	8009bd4 <_perror_r+0x7c>
 8009b6e:	686c      	ldr	r4, [r5, #4]
 8009b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b72:	07d8      	lsls	r0, r3, #31
 8009b74:	d405      	bmi.n	8009b82 <_perror_r+0x2a>
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	0599      	lsls	r1, r3, #22
 8009b7a:	d402      	bmi.n	8009b82 <_perror_r+0x2a>
 8009b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b7e:	f002 feba 	bl	800c8f6 <__retarget_lock_acquire_recursive>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4628      	mov	r0, r5
 8009b86:	f002 f9df 	bl	800bf48 <_fflush_r>
 8009b8a:	bb6e      	cbnz	r6, 8009be8 <_perror_r+0x90>
 8009b8c:	6829      	ldr	r1, [r5, #0]
 8009b8e:	ab01      	add	r3, sp, #4
 8009b90:	2201      	movs	r2, #1
 8009b92:	4628      	mov	r0, r5
 8009b94:	f000 f954 	bl	8009e40 <_strerror_r>
 8009b98:	4607      	mov	r7, r0
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d14f      	bne.n	8009c3e <_perror_r+0xe6>
 8009b9e:	4837      	ldr	r0, [pc, #220]	; (8009c7c <_perror_r+0x124>)
 8009ba0:	4f36      	ldr	r7, [pc, #216]	; (8009c7c <_perror_r+0x124>)
 8009ba2:	f7f6 faf7 	bl	8000194 <strlen>
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	b156      	cbz	r6, 8009bc0 <_perror_r+0x68>
 8009baa:	4620      	mov	r0, r4
 8009bac:	f002 fa08 	bl	800bfc0 <fileno>
 8009bb0:	4633      	mov	r3, r6
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	463a      	mov	r2, r7
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f001 fa46 	bl	800b048 <_write_r>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	da51      	bge.n	8009c64 <_perror_r+0x10c>
 8009bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bca:	07d2      	lsls	r2, r2, #31
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	d54c      	bpl.n	8009c6a <_perror_r+0x112>
 8009bd0:	b003      	add	sp, #12
 8009bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bd4:	4b2a      	ldr	r3, [pc, #168]	; (8009c80 <_perror_r+0x128>)
 8009bd6:	429c      	cmp	r4, r3
 8009bd8:	d101      	bne.n	8009bde <_perror_r+0x86>
 8009bda:	68ac      	ldr	r4, [r5, #8]
 8009bdc:	e7c8      	b.n	8009b70 <_perror_r+0x18>
 8009bde:	4b29      	ldr	r3, [pc, #164]	; (8009c84 <_perror_r+0x12c>)
 8009be0:	429c      	cmp	r4, r3
 8009be2:	bf08      	it	eq
 8009be4:	68ec      	ldreq	r4, [r5, #12]
 8009be6:	e7c3      	b.n	8009b70 <_perror_r+0x18>
 8009be8:	7833      	ldrb	r3, [r6, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0ce      	beq.n	8009b8c <_perror_r+0x34>
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7f6 fad0 	bl	8000194 <strlen>
 8009bf4:	4607      	mov	r7, r0
 8009bf6:	b157      	cbz	r7, 8009c0e <_perror_r+0xb6>
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f002 f9e1 	bl	800bfc0 <fileno>
 8009bfe:	463b      	mov	r3, r7
 8009c00:	4601      	mov	r1, r0
 8009c02:	4632      	mov	r2, r6
 8009c04:	4628      	mov	r0, r5
 8009c06:	f001 fa1f 	bl	800b048 <_write_r>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	da14      	bge.n	8009c38 <_perror_r+0xe0>
 8009c0e:	481e      	ldr	r0, [pc, #120]	; (8009c88 <_perror_r+0x130>)
 8009c10:	4f1d      	ldr	r7, [pc, #116]	; (8009c88 <_perror_r+0x130>)
 8009c12:	f7f6 fabf 	bl	8000194 <strlen>
 8009c16:	4606      	mov	r6, r0
 8009c18:	2e00      	cmp	r6, #0
 8009c1a:	d0b7      	beq.n	8009b8c <_perror_r+0x34>
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f002 f9cf 	bl	800bfc0 <fileno>
 8009c22:	4633      	mov	r3, r6
 8009c24:	4601      	mov	r1, r0
 8009c26:	463a      	mov	r2, r7
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f001 fa0d 	bl	800b048 <_write_r>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	dbac      	blt.n	8009b8c <_perror_r+0x34>
 8009c32:	1a36      	subs	r6, r6, r0
 8009c34:	4407      	add	r7, r0
 8009c36:	e7ef      	b.n	8009c18 <_perror_r+0xc0>
 8009c38:	1a3f      	subs	r7, r7, r0
 8009c3a:	4406      	add	r6, r0
 8009c3c:	e7db      	b.n	8009bf6 <_perror_r+0x9e>
 8009c3e:	f7f6 faa9 	bl	8000194 <strlen>
 8009c42:	4606      	mov	r6, r0
 8009c44:	2e00      	cmp	r6, #0
 8009c46:	d0aa      	beq.n	8009b9e <_perror_r+0x46>
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f002 f9b9 	bl	800bfc0 <fileno>
 8009c4e:	4633      	mov	r3, r6
 8009c50:	4601      	mov	r1, r0
 8009c52:	463a      	mov	r2, r7
 8009c54:	4628      	mov	r0, r5
 8009c56:	f001 f9f7 	bl	800b048 <_write_r>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	db9f      	blt.n	8009b9e <_perror_r+0x46>
 8009c5e:	1a36      	subs	r6, r6, r0
 8009c60:	4407      	add	r7, r0
 8009c62:	e7ef      	b.n	8009c44 <_perror_r+0xec>
 8009c64:	1a36      	subs	r6, r6, r0
 8009c66:	4407      	add	r7, r0
 8009c68:	e79e      	b.n	8009ba8 <_perror_r+0x50>
 8009c6a:	059b      	lsls	r3, r3, #22
 8009c6c:	d4b0      	bmi.n	8009bd0 <_perror_r+0x78>
 8009c6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c70:	f002 fe42 	bl	800c8f8 <__retarget_lock_release_recursive>
 8009c74:	e7ac      	b.n	8009bd0 <_perror_r+0x78>
 8009c76:	bf00      	nop
 8009c78:	0800ebf8 	.word	0x0800ebf8
 8009c7c:	0800ee5f 	.word	0x0800ee5f
 8009c80:	0800ec18 	.word	0x0800ec18
 8009c84:	0800ebd8 	.word	0x0800ebd8
 8009c88:	0800ee2f 	.word	0x0800ee2f

08009c8c <perror>:
 8009c8c:	4b02      	ldr	r3, [pc, #8]	; (8009c98 <perror+0xc>)
 8009c8e:	4601      	mov	r1, r0
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	f7ff bf61 	b.w	8009b58 <_perror_r>
 8009c96:	bf00      	nop
 8009c98:	20000010 	.word	0x20000010

08009c9c <iprintf>:
 8009c9c:	b40f      	push	{r0, r1, r2, r3}
 8009c9e:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <iprintf+0x2c>)
 8009ca0:	b513      	push	{r0, r1, r4, lr}
 8009ca2:	681c      	ldr	r4, [r3, #0]
 8009ca4:	b124      	cbz	r4, 8009cb0 <iprintf+0x14>
 8009ca6:	69a3      	ldr	r3, [r4, #24]
 8009ca8:	b913      	cbnz	r3, 8009cb0 <iprintf+0x14>
 8009caa:	4620      	mov	r0, r4
 8009cac:	f002 fa1e 	bl	800c0ec <__sinit>
 8009cb0:	ab05      	add	r3, sp, #20
 8009cb2:	9a04      	ldr	r2, [sp, #16]
 8009cb4:	68a1      	ldr	r1, [r4, #8]
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f003 fce7 	bl	800d68c <_vfiprintf_r>
 8009cbe:	b002      	add	sp, #8
 8009cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc4:	b004      	add	sp, #16
 8009cc6:	4770      	bx	lr
 8009cc8:	20000010 	.word	0x20000010

08009ccc <putchar>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4b08      	ldr	r3, [pc, #32]	; (8009cf0 <putchar+0x24>)
 8009cd0:	681c      	ldr	r4, [r3, #0]
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	b124      	cbz	r4, 8009ce0 <putchar+0x14>
 8009cd6:	69a3      	ldr	r3, [r4, #24]
 8009cd8:	b913      	cbnz	r3, 8009ce0 <putchar+0x14>
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f002 fa06 	bl	800c0ec <__sinit>
 8009ce0:	68a2      	ldr	r2, [r4, #8]
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cea:	f003 bdff 	b.w	800d8ec <_putc_r>
 8009cee:	bf00      	nop
 8009cf0:	20000010 	.word	0x20000010

08009cf4 <_puts_r>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	460e      	mov	r6, r1
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	b118      	cbz	r0, 8009d04 <_puts_r+0x10>
 8009cfc:	6983      	ldr	r3, [r0, #24]
 8009cfe:	b90b      	cbnz	r3, 8009d04 <_puts_r+0x10>
 8009d00:	f002 f9f4 	bl	800c0ec <__sinit>
 8009d04:	69ab      	ldr	r3, [r5, #24]
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	b913      	cbnz	r3, 8009d10 <_puts_r+0x1c>
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f002 f9ee 	bl	800c0ec <__sinit>
 8009d10:	4b2c      	ldr	r3, [pc, #176]	; (8009dc4 <_puts_r+0xd0>)
 8009d12:	429c      	cmp	r4, r3
 8009d14:	d120      	bne.n	8009d58 <_puts_r+0x64>
 8009d16:	686c      	ldr	r4, [r5, #4]
 8009d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d1a:	07db      	lsls	r3, r3, #31
 8009d1c:	d405      	bmi.n	8009d2a <_puts_r+0x36>
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	0598      	lsls	r0, r3, #22
 8009d22:	d402      	bmi.n	8009d2a <_puts_r+0x36>
 8009d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d26:	f002 fde6 	bl	800c8f6 <__retarget_lock_acquire_recursive>
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	0719      	lsls	r1, r3, #28
 8009d2e:	d51d      	bpl.n	8009d6c <_puts_r+0x78>
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	b1db      	cbz	r3, 8009d6c <_puts_r+0x78>
 8009d34:	3e01      	subs	r6, #1
 8009d36:	68a3      	ldr	r3, [r4, #8]
 8009d38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	60a3      	str	r3, [r4, #8]
 8009d40:	bb39      	cbnz	r1, 8009d92 <_puts_r+0x9e>
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	da38      	bge.n	8009db8 <_puts_r+0xc4>
 8009d46:	4622      	mov	r2, r4
 8009d48:	210a      	movs	r1, #10
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f001 f92a 	bl	800afa4 <__swbuf_r>
 8009d50:	3001      	adds	r0, #1
 8009d52:	d011      	beq.n	8009d78 <_puts_r+0x84>
 8009d54:	250a      	movs	r5, #10
 8009d56:	e011      	b.n	8009d7c <_puts_r+0x88>
 8009d58:	4b1b      	ldr	r3, [pc, #108]	; (8009dc8 <_puts_r+0xd4>)
 8009d5a:	429c      	cmp	r4, r3
 8009d5c:	d101      	bne.n	8009d62 <_puts_r+0x6e>
 8009d5e:	68ac      	ldr	r4, [r5, #8]
 8009d60:	e7da      	b.n	8009d18 <_puts_r+0x24>
 8009d62:	4b1a      	ldr	r3, [pc, #104]	; (8009dcc <_puts_r+0xd8>)
 8009d64:	429c      	cmp	r4, r3
 8009d66:	bf08      	it	eq
 8009d68:	68ec      	ldreq	r4, [r5, #12]
 8009d6a:	e7d5      	b.n	8009d18 <_puts_r+0x24>
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f001 f97c 	bl	800b06c <__swsetup_r>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d0dd      	beq.n	8009d34 <_puts_r+0x40>
 8009d78:	f04f 35ff 	mov.w	r5, #4294967295
 8009d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d7e:	07da      	lsls	r2, r3, #31
 8009d80:	d405      	bmi.n	8009d8e <_puts_r+0x9a>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	059b      	lsls	r3, r3, #22
 8009d86:	d402      	bmi.n	8009d8e <_puts_r+0x9a>
 8009d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d8a:	f002 fdb5 	bl	800c8f8 <__retarget_lock_release_recursive>
 8009d8e:	4628      	mov	r0, r5
 8009d90:	bd70      	pop	{r4, r5, r6, pc}
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da04      	bge.n	8009da0 <_puts_r+0xac>
 8009d96:	69a2      	ldr	r2, [r4, #24]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	dc06      	bgt.n	8009daa <_puts_r+0xb6>
 8009d9c:	290a      	cmp	r1, #10
 8009d9e:	d004      	beq.n	8009daa <_puts_r+0xb6>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	6022      	str	r2, [r4, #0]
 8009da6:	7019      	strb	r1, [r3, #0]
 8009da8:	e7c5      	b.n	8009d36 <_puts_r+0x42>
 8009daa:	4622      	mov	r2, r4
 8009dac:	4628      	mov	r0, r5
 8009dae:	f001 f8f9 	bl	800afa4 <__swbuf_r>
 8009db2:	3001      	adds	r0, #1
 8009db4:	d1bf      	bne.n	8009d36 <_puts_r+0x42>
 8009db6:	e7df      	b.n	8009d78 <_puts_r+0x84>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	250a      	movs	r5, #10
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	6022      	str	r2, [r4, #0]
 8009dc0:	701d      	strb	r5, [r3, #0]
 8009dc2:	e7db      	b.n	8009d7c <_puts_r+0x88>
 8009dc4:	0800ebf8 	.word	0x0800ebf8
 8009dc8:	0800ec18 	.word	0x0800ec18
 8009dcc:	0800ebd8 	.word	0x0800ebd8

08009dd0 <puts>:
 8009dd0:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <puts+0xc>)
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	6818      	ldr	r0, [r3, #0]
 8009dd6:	f7ff bf8d 	b.w	8009cf4 <_puts_r>
 8009dda:	bf00      	nop
 8009ddc:	20000010 	.word	0x20000010

08009de0 <_sbrk_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d06      	ldr	r5, [pc, #24]	; (8009dfc <_sbrk_r+0x1c>)
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	f7f7 feea 	bl	8001bc4 <_sbrk>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_sbrk_r+0x1a>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_sbrk_r+0x1a>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	200005e0 	.word	0x200005e0

08009e00 <siprintf>:
 8009e00:	b40e      	push	{r1, r2, r3}
 8009e02:	b500      	push	{lr}
 8009e04:	b09c      	sub	sp, #112	; 0x70
 8009e06:	ab1d      	add	r3, sp, #116	; 0x74
 8009e08:	9002      	str	r0, [sp, #8]
 8009e0a:	9006      	str	r0, [sp, #24]
 8009e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e10:	4809      	ldr	r0, [pc, #36]	; (8009e38 <siprintf+0x38>)
 8009e12:	9107      	str	r1, [sp, #28]
 8009e14:	9104      	str	r1, [sp, #16]
 8009e16:	4909      	ldr	r1, [pc, #36]	; (8009e3c <siprintf+0x3c>)
 8009e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e1c:	9105      	str	r1, [sp, #20]
 8009e1e:	6800      	ldr	r0, [r0, #0]
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	a902      	add	r1, sp, #8
 8009e24:	f003 fb0a 	bl	800d43c <_svfiprintf_r>
 8009e28:	9b02      	ldr	r3, [sp, #8]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	b01c      	add	sp, #112	; 0x70
 8009e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e34:	b003      	add	sp, #12
 8009e36:	4770      	bx	lr
 8009e38:	20000010 	.word	0x20000010
 8009e3c:	ffff0208 	.word	0xffff0208

08009e40 <_strerror_r>:
 8009e40:	b510      	push	{r4, lr}
 8009e42:	4604      	mov	r4, r0
 8009e44:	4608      	mov	r0, r1
 8009e46:	4611      	mov	r1, r2
 8009e48:	288e      	cmp	r0, #142	; 0x8e
 8009e4a:	f200 812f 	bhi.w	800a0ac <_strerror_r+0x26c>
 8009e4e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009e52:	0138      	.short	0x0138
 8009e54:	0091008f 	.word	0x0091008f
 8009e58:	00950093 	.word	0x00950093
 8009e5c:	00990097 	.word	0x00990097
 8009e60:	009d009b 	.word	0x009d009b
 8009e64:	00a300a1 	.word	0x00a300a1
 8009e68:	00a900a7 	.word	0x00a900a7
 8009e6c:	00ad00ab 	.word	0x00ad00ab
 8009e70:	00af012d 	.word	0x00af012d
 8009e74:	00b300b1 	.word	0x00b300b1
 8009e78:	00b700b5 	.word	0x00b700b5
 8009e7c:	00bf00bd 	.word	0x00bf00bd
 8009e80:	00c700c5 	.word	0x00c700c5
 8009e84:	00cb00c9 	.word	0x00cb00c9
 8009e88:	00d100cd 	.word	0x00d100cd
 8009e8c:	00d700d5 	.word	0x00d700d5
 8009e90:	00db00d9 	.word	0x00db00d9
 8009e94:	00df00dd 	.word	0x00df00dd
 8009e98:	00e300e1 	.word	0x00e300e1
 8009e9c:	012d012d 	.word	0x012d012d
 8009ea0:	012d012d 	.word	0x012d012d
 8009ea4:	012d012d 	.word	0x012d012d
 8009ea8:	012d012d 	.word	0x012d012d
 8009eac:	00eb00e7 	.word	0x00eb00e7
 8009eb0:	012d012d 	.word	0x012d012d
 8009eb4:	012d012d 	.word	0x012d012d
 8009eb8:	012d012d 	.word	0x012d012d
 8009ebc:	012d012d 	.word	0x012d012d
 8009ec0:	012d012d 	.word	0x012d012d
 8009ec4:	012d012d 	.word	0x012d012d
 8009ec8:	00ed012d 	.word	0x00ed012d
 8009ecc:	00ef0107 	.word	0x00ef0107
 8009ed0:	012d00f1 	.word	0x012d00f1
 8009ed4:	012d012d 	.word	0x012d012d
 8009ed8:	012d00f3 	.word	0x012d00f3
 8009edc:	012d012d 	.word	0x012d012d
 8009ee0:	012d00f5 	.word	0x012d00f5
 8009ee4:	00f9012d 	.word	0x00f9012d
 8009ee8:	012d012d 	.word	0x012d012d
 8009eec:	012d00fb 	.word	0x012d00fb
 8009ef0:	012d012d 	.word	0x012d012d
 8009ef4:	012d012d 	.word	0x012d012d
 8009ef8:	012d012d 	.word	0x012d012d
 8009efc:	012d012d 	.word	0x012d012d
 8009f00:	00fd012d 	.word	0x00fd012d
 8009f04:	00ff012d 	.word	0x00ff012d
 8009f08:	01030101 	.word	0x01030101
 8009f0c:	012d012d 	.word	0x012d012d
 8009f10:	012d0125 	.word	0x012d0125
 8009f14:	012d012d 	.word	0x012d012d
 8009f18:	012d012d 	.word	0x012d012d
 8009f1c:	012d012d 	.word	0x012d012d
 8009f20:	0113012d 	.word	0x0113012d
 8009f24:	01090105 	.word	0x01090105
 8009f28:	010d010b 	.word	0x010d010b
 8009f2c:	012d010f 	.word	0x012d010f
 8009f30:	01150111 	.word	0x01150111
 8009f34:	00e90119 	.word	0x00e90119
 8009f38:	012b00c1 	.word	0x012b00c1
 8009f3c:	00cf00b9 	.word	0x00cf00b9
 8009f40:	009f00bb 	.word	0x009f00bb
 8009f44:	012900a5 	.word	0x012900a5
 8009f48:	012d00f7 	.word	0x012d00f7
 8009f4c:	00c30117 	.word	0x00c30117
 8009f50:	011b011d 	.word	0x011b011d
 8009f54:	012d012d 	.word	0x012d012d
 8009f58:	012d012d 	.word	0x012d012d
 8009f5c:	00d3012d 	.word	0x00d3012d
 8009f60:	012d012d 	.word	0x012d012d
 8009f64:	00e5012d 	.word	0x00e5012d
 8009f68:	011f0127 	.word	0x011f0127
 8009f6c:	01230121 	.word	0x01230121
 8009f70:	4855      	ldr	r0, [pc, #340]	; (800a0c8 <_strerror_r+0x288>)
 8009f72:	bd10      	pop	{r4, pc}
 8009f74:	4855      	ldr	r0, [pc, #340]	; (800a0cc <_strerror_r+0x28c>)
 8009f76:	e7fc      	b.n	8009f72 <_strerror_r+0x132>
 8009f78:	4855      	ldr	r0, [pc, #340]	; (800a0d0 <_strerror_r+0x290>)
 8009f7a:	e7fa      	b.n	8009f72 <_strerror_r+0x132>
 8009f7c:	4855      	ldr	r0, [pc, #340]	; (800a0d4 <_strerror_r+0x294>)
 8009f7e:	e7f8      	b.n	8009f72 <_strerror_r+0x132>
 8009f80:	4855      	ldr	r0, [pc, #340]	; (800a0d8 <_strerror_r+0x298>)
 8009f82:	e7f6      	b.n	8009f72 <_strerror_r+0x132>
 8009f84:	4855      	ldr	r0, [pc, #340]	; (800a0dc <_strerror_r+0x29c>)
 8009f86:	e7f4      	b.n	8009f72 <_strerror_r+0x132>
 8009f88:	4855      	ldr	r0, [pc, #340]	; (800a0e0 <_strerror_r+0x2a0>)
 8009f8a:	e7f2      	b.n	8009f72 <_strerror_r+0x132>
 8009f8c:	4855      	ldr	r0, [pc, #340]	; (800a0e4 <_strerror_r+0x2a4>)
 8009f8e:	e7f0      	b.n	8009f72 <_strerror_r+0x132>
 8009f90:	4855      	ldr	r0, [pc, #340]	; (800a0e8 <_strerror_r+0x2a8>)
 8009f92:	e7ee      	b.n	8009f72 <_strerror_r+0x132>
 8009f94:	4855      	ldr	r0, [pc, #340]	; (800a0ec <_strerror_r+0x2ac>)
 8009f96:	e7ec      	b.n	8009f72 <_strerror_r+0x132>
 8009f98:	4855      	ldr	r0, [pc, #340]	; (800a0f0 <_strerror_r+0x2b0>)
 8009f9a:	e7ea      	b.n	8009f72 <_strerror_r+0x132>
 8009f9c:	4855      	ldr	r0, [pc, #340]	; (800a0f4 <_strerror_r+0x2b4>)
 8009f9e:	e7e8      	b.n	8009f72 <_strerror_r+0x132>
 8009fa0:	4855      	ldr	r0, [pc, #340]	; (800a0f8 <_strerror_r+0x2b8>)
 8009fa2:	e7e6      	b.n	8009f72 <_strerror_r+0x132>
 8009fa4:	4855      	ldr	r0, [pc, #340]	; (800a0fc <_strerror_r+0x2bc>)
 8009fa6:	e7e4      	b.n	8009f72 <_strerror_r+0x132>
 8009fa8:	4855      	ldr	r0, [pc, #340]	; (800a100 <_strerror_r+0x2c0>)
 8009faa:	e7e2      	b.n	8009f72 <_strerror_r+0x132>
 8009fac:	4855      	ldr	r0, [pc, #340]	; (800a104 <_strerror_r+0x2c4>)
 8009fae:	e7e0      	b.n	8009f72 <_strerror_r+0x132>
 8009fb0:	4855      	ldr	r0, [pc, #340]	; (800a108 <_strerror_r+0x2c8>)
 8009fb2:	e7de      	b.n	8009f72 <_strerror_r+0x132>
 8009fb4:	4855      	ldr	r0, [pc, #340]	; (800a10c <_strerror_r+0x2cc>)
 8009fb6:	e7dc      	b.n	8009f72 <_strerror_r+0x132>
 8009fb8:	4855      	ldr	r0, [pc, #340]	; (800a110 <_strerror_r+0x2d0>)
 8009fba:	e7da      	b.n	8009f72 <_strerror_r+0x132>
 8009fbc:	4855      	ldr	r0, [pc, #340]	; (800a114 <_strerror_r+0x2d4>)
 8009fbe:	e7d8      	b.n	8009f72 <_strerror_r+0x132>
 8009fc0:	4855      	ldr	r0, [pc, #340]	; (800a118 <_strerror_r+0x2d8>)
 8009fc2:	e7d6      	b.n	8009f72 <_strerror_r+0x132>
 8009fc4:	4855      	ldr	r0, [pc, #340]	; (800a11c <_strerror_r+0x2dc>)
 8009fc6:	e7d4      	b.n	8009f72 <_strerror_r+0x132>
 8009fc8:	4855      	ldr	r0, [pc, #340]	; (800a120 <_strerror_r+0x2e0>)
 8009fca:	e7d2      	b.n	8009f72 <_strerror_r+0x132>
 8009fcc:	4855      	ldr	r0, [pc, #340]	; (800a124 <_strerror_r+0x2e4>)
 8009fce:	e7d0      	b.n	8009f72 <_strerror_r+0x132>
 8009fd0:	4855      	ldr	r0, [pc, #340]	; (800a128 <_strerror_r+0x2e8>)
 8009fd2:	e7ce      	b.n	8009f72 <_strerror_r+0x132>
 8009fd4:	4855      	ldr	r0, [pc, #340]	; (800a12c <_strerror_r+0x2ec>)
 8009fd6:	e7cc      	b.n	8009f72 <_strerror_r+0x132>
 8009fd8:	4855      	ldr	r0, [pc, #340]	; (800a130 <_strerror_r+0x2f0>)
 8009fda:	e7ca      	b.n	8009f72 <_strerror_r+0x132>
 8009fdc:	4855      	ldr	r0, [pc, #340]	; (800a134 <_strerror_r+0x2f4>)
 8009fde:	e7c8      	b.n	8009f72 <_strerror_r+0x132>
 8009fe0:	4855      	ldr	r0, [pc, #340]	; (800a138 <_strerror_r+0x2f8>)
 8009fe2:	e7c6      	b.n	8009f72 <_strerror_r+0x132>
 8009fe4:	4855      	ldr	r0, [pc, #340]	; (800a13c <_strerror_r+0x2fc>)
 8009fe6:	e7c4      	b.n	8009f72 <_strerror_r+0x132>
 8009fe8:	4855      	ldr	r0, [pc, #340]	; (800a140 <_strerror_r+0x300>)
 8009fea:	e7c2      	b.n	8009f72 <_strerror_r+0x132>
 8009fec:	4855      	ldr	r0, [pc, #340]	; (800a144 <_strerror_r+0x304>)
 8009fee:	e7c0      	b.n	8009f72 <_strerror_r+0x132>
 8009ff0:	4855      	ldr	r0, [pc, #340]	; (800a148 <_strerror_r+0x308>)
 8009ff2:	e7be      	b.n	8009f72 <_strerror_r+0x132>
 8009ff4:	4855      	ldr	r0, [pc, #340]	; (800a14c <_strerror_r+0x30c>)
 8009ff6:	e7bc      	b.n	8009f72 <_strerror_r+0x132>
 8009ff8:	4855      	ldr	r0, [pc, #340]	; (800a150 <_strerror_r+0x310>)
 8009ffa:	e7ba      	b.n	8009f72 <_strerror_r+0x132>
 8009ffc:	4855      	ldr	r0, [pc, #340]	; (800a154 <_strerror_r+0x314>)
 8009ffe:	e7b8      	b.n	8009f72 <_strerror_r+0x132>
 800a000:	4855      	ldr	r0, [pc, #340]	; (800a158 <_strerror_r+0x318>)
 800a002:	e7b6      	b.n	8009f72 <_strerror_r+0x132>
 800a004:	4855      	ldr	r0, [pc, #340]	; (800a15c <_strerror_r+0x31c>)
 800a006:	e7b4      	b.n	8009f72 <_strerror_r+0x132>
 800a008:	4855      	ldr	r0, [pc, #340]	; (800a160 <_strerror_r+0x320>)
 800a00a:	e7b2      	b.n	8009f72 <_strerror_r+0x132>
 800a00c:	4855      	ldr	r0, [pc, #340]	; (800a164 <_strerror_r+0x324>)
 800a00e:	e7b0      	b.n	8009f72 <_strerror_r+0x132>
 800a010:	4855      	ldr	r0, [pc, #340]	; (800a168 <_strerror_r+0x328>)
 800a012:	e7ae      	b.n	8009f72 <_strerror_r+0x132>
 800a014:	4855      	ldr	r0, [pc, #340]	; (800a16c <_strerror_r+0x32c>)
 800a016:	e7ac      	b.n	8009f72 <_strerror_r+0x132>
 800a018:	4855      	ldr	r0, [pc, #340]	; (800a170 <_strerror_r+0x330>)
 800a01a:	e7aa      	b.n	8009f72 <_strerror_r+0x132>
 800a01c:	4855      	ldr	r0, [pc, #340]	; (800a174 <_strerror_r+0x334>)
 800a01e:	e7a8      	b.n	8009f72 <_strerror_r+0x132>
 800a020:	4855      	ldr	r0, [pc, #340]	; (800a178 <_strerror_r+0x338>)
 800a022:	e7a6      	b.n	8009f72 <_strerror_r+0x132>
 800a024:	4855      	ldr	r0, [pc, #340]	; (800a17c <_strerror_r+0x33c>)
 800a026:	e7a4      	b.n	8009f72 <_strerror_r+0x132>
 800a028:	4855      	ldr	r0, [pc, #340]	; (800a180 <_strerror_r+0x340>)
 800a02a:	e7a2      	b.n	8009f72 <_strerror_r+0x132>
 800a02c:	4855      	ldr	r0, [pc, #340]	; (800a184 <_strerror_r+0x344>)
 800a02e:	e7a0      	b.n	8009f72 <_strerror_r+0x132>
 800a030:	4855      	ldr	r0, [pc, #340]	; (800a188 <_strerror_r+0x348>)
 800a032:	e79e      	b.n	8009f72 <_strerror_r+0x132>
 800a034:	4855      	ldr	r0, [pc, #340]	; (800a18c <_strerror_r+0x34c>)
 800a036:	e79c      	b.n	8009f72 <_strerror_r+0x132>
 800a038:	4855      	ldr	r0, [pc, #340]	; (800a190 <_strerror_r+0x350>)
 800a03a:	e79a      	b.n	8009f72 <_strerror_r+0x132>
 800a03c:	4855      	ldr	r0, [pc, #340]	; (800a194 <_strerror_r+0x354>)
 800a03e:	e798      	b.n	8009f72 <_strerror_r+0x132>
 800a040:	4855      	ldr	r0, [pc, #340]	; (800a198 <_strerror_r+0x358>)
 800a042:	e796      	b.n	8009f72 <_strerror_r+0x132>
 800a044:	4855      	ldr	r0, [pc, #340]	; (800a19c <_strerror_r+0x35c>)
 800a046:	e794      	b.n	8009f72 <_strerror_r+0x132>
 800a048:	4855      	ldr	r0, [pc, #340]	; (800a1a0 <_strerror_r+0x360>)
 800a04a:	e792      	b.n	8009f72 <_strerror_r+0x132>
 800a04c:	4855      	ldr	r0, [pc, #340]	; (800a1a4 <_strerror_r+0x364>)
 800a04e:	e790      	b.n	8009f72 <_strerror_r+0x132>
 800a050:	4855      	ldr	r0, [pc, #340]	; (800a1a8 <_strerror_r+0x368>)
 800a052:	e78e      	b.n	8009f72 <_strerror_r+0x132>
 800a054:	4855      	ldr	r0, [pc, #340]	; (800a1ac <_strerror_r+0x36c>)
 800a056:	e78c      	b.n	8009f72 <_strerror_r+0x132>
 800a058:	4855      	ldr	r0, [pc, #340]	; (800a1b0 <_strerror_r+0x370>)
 800a05a:	e78a      	b.n	8009f72 <_strerror_r+0x132>
 800a05c:	4855      	ldr	r0, [pc, #340]	; (800a1b4 <_strerror_r+0x374>)
 800a05e:	e788      	b.n	8009f72 <_strerror_r+0x132>
 800a060:	4855      	ldr	r0, [pc, #340]	; (800a1b8 <_strerror_r+0x378>)
 800a062:	e786      	b.n	8009f72 <_strerror_r+0x132>
 800a064:	4855      	ldr	r0, [pc, #340]	; (800a1bc <_strerror_r+0x37c>)
 800a066:	e784      	b.n	8009f72 <_strerror_r+0x132>
 800a068:	4855      	ldr	r0, [pc, #340]	; (800a1c0 <_strerror_r+0x380>)
 800a06a:	e782      	b.n	8009f72 <_strerror_r+0x132>
 800a06c:	4855      	ldr	r0, [pc, #340]	; (800a1c4 <_strerror_r+0x384>)
 800a06e:	e780      	b.n	8009f72 <_strerror_r+0x132>
 800a070:	4855      	ldr	r0, [pc, #340]	; (800a1c8 <_strerror_r+0x388>)
 800a072:	e77e      	b.n	8009f72 <_strerror_r+0x132>
 800a074:	4855      	ldr	r0, [pc, #340]	; (800a1cc <_strerror_r+0x38c>)
 800a076:	e77c      	b.n	8009f72 <_strerror_r+0x132>
 800a078:	4855      	ldr	r0, [pc, #340]	; (800a1d0 <_strerror_r+0x390>)
 800a07a:	e77a      	b.n	8009f72 <_strerror_r+0x132>
 800a07c:	4855      	ldr	r0, [pc, #340]	; (800a1d4 <_strerror_r+0x394>)
 800a07e:	e778      	b.n	8009f72 <_strerror_r+0x132>
 800a080:	4855      	ldr	r0, [pc, #340]	; (800a1d8 <_strerror_r+0x398>)
 800a082:	e776      	b.n	8009f72 <_strerror_r+0x132>
 800a084:	4855      	ldr	r0, [pc, #340]	; (800a1dc <_strerror_r+0x39c>)
 800a086:	e774      	b.n	8009f72 <_strerror_r+0x132>
 800a088:	4855      	ldr	r0, [pc, #340]	; (800a1e0 <_strerror_r+0x3a0>)
 800a08a:	e772      	b.n	8009f72 <_strerror_r+0x132>
 800a08c:	4855      	ldr	r0, [pc, #340]	; (800a1e4 <_strerror_r+0x3a4>)
 800a08e:	e770      	b.n	8009f72 <_strerror_r+0x132>
 800a090:	4855      	ldr	r0, [pc, #340]	; (800a1e8 <_strerror_r+0x3a8>)
 800a092:	e76e      	b.n	8009f72 <_strerror_r+0x132>
 800a094:	4855      	ldr	r0, [pc, #340]	; (800a1ec <_strerror_r+0x3ac>)
 800a096:	e76c      	b.n	8009f72 <_strerror_r+0x132>
 800a098:	4855      	ldr	r0, [pc, #340]	; (800a1f0 <_strerror_r+0x3b0>)
 800a09a:	e76a      	b.n	8009f72 <_strerror_r+0x132>
 800a09c:	4855      	ldr	r0, [pc, #340]	; (800a1f4 <_strerror_r+0x3b4>)
 800a09e:	e768      	b.n	8009f72 <_strerror_r+0x132>
 800a0a0:	4855      	ldr	r0, [pc, #340]	; (800a1f8 <_strerror_r+0x3b8>)
 800a0a2:	e766      	b.n	8009f72 <_strerror_r+0x132>
 800a0a4:	4855      	ldr	r0, [pc, #340]	; (800a1fc <_strerror_r+0x3bc>)
 800a0a6:	e764      	b.n	8009f72 <_strerror_r+0x132>
 800a0a8:	4855      	ldr	r0, [pc, #340]	; (800a200 <_strerror_r+0x3c0>)
 800a0aa:	e762      	b.n	8009f72 <_strerror_r+0x132>
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bf14      	ite	ne
 800a0b0:	461a      	movne	r2, r3
 800a0b2:	4622      	moveq	r2, r4
 800a0b4:	f000 ff74 	bl	800afa0 <_user_strerror>
 800a0b8:	4b52      	ldr	r3, [pc, #328]	; (800a204 <_strerror_r+0x3c4>)
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	bf08      	it	eq
 800a0be:	4618      	moveq	r0, r3
 800a0c0:	e757      	b.n	8009f72 <_strerror_r+0x132>
 800a0c2:	4851      	ldr	r0, [pc, #324]	; (800a208 <_strerror_r+0x3c8>)
 800a0c4:	e755      	b.n	8009f72 <_strerror_r+0x132>
 800a0c6:	bf00      	nop
 800a0c8:	0800e354 	.word	0x0800e354
 800a0cc:	0800e35e 	.word	0x0800e35e
 800a0d0:	0800e378 	.word	0x0800e378
 800a0d4:	0800e388 	.word	0x0800e388
 800a0d8:	0800e3a0 	.word	0x0800e3a0
 800a0dc:	0800e3aa 	.word	0x0800e3aa
 800a0e0:	0800e3c4 	.word	0x0800e3c4
 800a0e4:	0800e3d6 	.word	0x0800e3d6
 800a0e8:	0800e3e8 	.word	0x0800e3e8
 800a0ec:	0800e401 	.word	0x0800e401
 800a0f0:	0800e411 	.word	0x0800e411
 800a0f4:	0800e41d 	.word	0x0800e41d
 800a0f8:	0800e43a 	.word	0x0800e43a
 800a0fc:	0800e44c 	.word	0x0800e44c
 800a100:	0800e45d 	.word	0x0800e45d
 800a104:	0800e46f 	.word	0x0800e46f
 800a108:	0800e47b 	.word	0x0800e47b
 800a10c:	0800e493 	.word	0x0800e493
 800a110:	0800e49f 	.word	0x0800e49f
 800a114:	0800e4b1 	.word	0x0800e4b1
 800a118:	0800e4c0 	.word	0x0800e4c0
 800a11c:	0800e4d0 	.word	0x0800e4d0
 800a120:	0800e4dd 	.word	0x0800e4dd
 800a124:	0800e4fc 	.word	0x0800e4fc
 800a128:	0800e50b 	.word	0x0800e50b
 800a12c:	0800e51c 	.word	0x0800e51c
 800a130:	0800e540 	.word	0x0800e540
 800a134:	0800e55e 	.word	0x0800e55e
 800a138:	0800e57c 	.word	0x0800e57c
 800a13c:	0800e59c 	.word	0x0800e59c
 800a140:	0800e5b3 	.word	0x0800e5b3
 800a144:	0800e5c2 	.word	0x0800e5c2
 800a148:	0800e5d1 	.word	0x0800e5d1
 800a14c:	0800e5e5 	.word	0x0800e5e5
 800a150:	0800e5fd 	.word	0x0800e5fd
 800a154:	0800e60b 	.word	0x0800e60b
 800a158:	0800e618 	.word	0x0800e618
 800a15c:	0800e62e 	.word	0x0800e62e
 800a160:	0800e63d 	.word	0x0800e63d
 800a164:	0800e649 	.word	0x0800e649
 800a168:	0800e678 	.word	0x0800e678
 800a16c:	0800e689 	.word	0x0800e689
 800a170:	0800e6a4 	.word	0x0800e6a4
 800a174:	0800e6b7 	.word	0x0800e6b7
 800a178:	0800e6cd 	.word	0x0800e6cd
 800a17c:	0800e6d6 	.word	0x0800e6d6
 800a180:	0800e6ed 	.word	0x0800e6ed
 800a184:	0800e6f5 	.word	0x0800e6f5
 800a188:	0800e702 	.word	0x0800e702
 800a18c:	0800e717 	.word	0x0800e717
 800a190:	0800e72b 	.word	0x0800e72b
 800a194:	0800e743 	.word	0x0800e743
 800a198:	0800e752 	.word	0x0800e752
 800a19c:	0800e763 	.word	0x0800e763
 800a1a0:	0800e776 	.word	0x0800e776
 800a1a4:	0800e782 	.word	0x0800e782
 800a1a8:	0800e79b 	.word	0x0800e79b
 800a1ac:	0800e7af 	.word	0x0800e7af
 800a1b0:	0800e7ca 	.word	0x0800e7ca
 800a1b4:	0800e7e2 	.word	0x0800e7e2
 800a1b8:	0800e7fc 	.word	0x0800e7fc
 800a1bc:	0800e804 	.word	0x0800e804
 800a1c0:	0800e834 	.word	0x0800e834
 800a1c4:	0800e853 	.word	0x0800e853
 800a1c8:	0800e872 	.word	0x0800e872
 800a1cc:	0800e889 	.word	0x0800e889
 800a1d0:	0800e89c 	.word	0x0800e89c
 800a1d4:	0800e8b5 	.word	0x0800e8b5
 800a1d8:	0800e8cc 	.word	0x0800e8cc
 800a1dc:	0800e8e2 	.word	0x0800e8e2
 800a1e0:	0800e903 	.word	0x0800e903
 800a1e4:	0800e91b 	.word	0x0800e91b
 800a1e8:	0800e937 	.word	0x0800e937
 800a1ec:	0800e94a 	.word	0x0800e94a
 800a1f0:	0800e960 	.word	0x0800e960
 800a1f4:	0800e974 	.word	0x0800e974
 800a1f8:	0800e996 	.word	0x0800e996
 800a1fc:	0800e9bc 	.word	0x0800e9bc
 800a200:	0800e9cd 	.word	0x0800e9cd
 800a204:	0800ee60 	.word	0x0800ee60
 800a208:	0800e9e2 	.word	0x0800e9e2

0800a20c <strstr>:
 800a20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a20e:	780c      	ldrb	r4, [r1, #0]
 800a210:	b164      	cbz	r4, 800a22c <strstr+0x20>
 800a212:	4603      	mov	r3, r0
 800a214:	781a      	ldrb	r2, [r3, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	1c5e      	adds	r6, r3, #1
 800a21a:	b90a      	cbnz	r2, 800a220 <strstr+0x14>
 800a21c:	4610      	mov	r0, r2
 800a21e:	e005      	b.n	800a22c <strstr+0x20>
 800a220:	4294      	cmp	r4, r2
 800a222:	d108      	bne.n	800a236 <strstr+0x2a>
 800a224:	460d      	mov	r5, r1
 800a226:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a22a:	b902      	cbnz	r2, 800a22e <strstr+0x22>
 800a22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a22e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a232:	4297      	cmp	r7, r2
 800a234:	d0f7      	beq.n	800a226 <strstr+0x1a>
 800a236:	4633      	mov	r3, r6
 800a238:	e7ec      	b.n	800a214 <strstr+0x8>

0800a23a <sulp>:
 800a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23e:	460f      	mov	r7, r1
 800a240:	4690      	mov	r8, r2
 800a242:	f002 ff49 	bl	800d0d8 <__ulp>
 800a246:	4604      	mov	r4, r0
 800a248:	460d      	mov	r5, r1
 800a24a:	f1b8 0f00 	cmp.w	r8, #0
 800a24e:	d011      	beq.n	800a274 <sulp+0x3a>
 800a250:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a254:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dd0b      	ble.n	800a274 <sulp+0x3a>
 800a25c:	051b      	lsls	r3, r3, #20
 800a25e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a262:	2400      	movs	r4, #0
 800a264:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a268:	4622      	mov	r2, r4
 800a26a:	462b      	mov	r3, r5
 800a26c:	f7f6 f9ac 	bl	80005c8 <__aeabi_dmul>
 800a270:	4604      	mov	r4, r0
 800a272:	460d      	mov	r5, r1
 800a274:	4620      	mov	r0, r4
 800a276:	4629      	mov	r1, r5
 800a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a27c:	0000      	movs	r0, r0
	...

0800a280 <_strtod_l>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	b0a1      	sub	sp, #132	; 0x84
 800a286:	469b      	mov	fp, r3
 800a288:	2300      	movs	r3, #0
 800a28a:	931c      	str	r3, [sp, #112]	; 0x70
 800a28c:	4ba1      	ldr	r3, [pc, #644]	; (800a514 <_strtod_l+0x294>)
 800a28e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a290:	681f      	ldr	r7, [r3, #0]
 800a292:	4682      	mov	sl, r0
 800a294:	4638      	mov	r0, r7
 800a296:	460e      	mov	r6, r1
 800a298:	f7f5 ff7c 	bl	8000194 <strlen>
 800a29c:	f04f 0800 	mov.w	r8, #0
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	f04f 0900 	mov.w	r9, #0
 800a2a6:	961b      	str	r6, [sp, #108]	; 0x6c
 800a2a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2aa:	781a      	ldrb	r2, [r3, #0]
 800a2ac:	2a2b      	cmp	r2, #43	; 0x2b
 800a2ae:	d04c      	beq.n	800a34a <_strtod_l+0xca>
 800a2b0:	d83a      	bhi.n	800a328 <_strtod_l+0xa8>
 800a2b2:	2a0d      	cmp	r2, #13
 800a2b4:	d833      	bhi.n	800a31e <_strtod_l+0x9e>
 800a2b6:	2a08      	cmp	r2, #8
 800a2b8:	d833      	bhi.n	800a322 <_strtod_l+0xa2>
 800a2ba:	2a00      	cmp	r2, #0
 800a2bc:	d03d      	beq.n	800a33a <_strtod_l+0xba>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	930c      	str	r3, [sp, #48]	; 0x30
 800a2c2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a2c4:	782b      	ldrb	r3, [r5, #0]
 800a2c6:	2b30      	cmp	r3, #48	; 0x30
 800a2c8:	f040 80af 	bne.w	800a42a <_strtod_l+0x1aa>
 800a2cc:	786b      	ldrb	r3, [r5, #1]
 800a2ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2d2:	2b58      	cmp	r3, #88	; 0x58
 800a2d4:	d16c      	bne.n	800a3b0 <_strtod_l+0x130>
 800a2d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	ab1c      	add	r3, sp, #112	; 0x70
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	4a8e      	ldr	r2, [pc, #568]	; (800a518 <_strtod_l+0x298>)
 800a2e0:	f8cd b008 	str.w	fp, [sp, #8]
 800a2e4:	ab1d      	add	r3, sp, #116	; 0x74
 800a2e6:	a91b      	add	r1, sp, #108	; 0x6c
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	f002 f803 	bl	800c2f4 <__gethex>
 800a2ee:	f010 0607 	ands.w	r6, r0, #7
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	d005      	beq.n	800a302 <_strtod_l+0x82>
 800a2f6:	2e06      	cmp	r6, #6
 800a2f8:	d129      	bne.n	800a34e <_strtod_l+0xce>
 800a2fa:	3501      	adds	r5, #1
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	951b      	str	r5, [sp, #108]	; 0x6c
 800a300:	930c      	str	r3, [sp, #48]	; 0x30
 800a302:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a304:	2b00      	cmp	r3, #0
 800a306:	f040 8596 	bne.w	800ae36 <_strtod_l+0xbb6>
 800a30a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a30c:	b1d3      	cbz	r3, 800a344 <_strtod_l+0xc4>
 800a30e:	4642      	mov	r2, r8
 800a310:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a314:	4610      	mov	r0, r2
 800a316:	4619      	mov	r1, r3
 800a318:	b021      	add	sp, #132	; 0x84
 800a31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31e:	2a20      	cmp	r2, #32
 800a320:	d1cd      	bne.n	800a2be <_strtod_l+0x3e>
 800a322:	3301      	adds	r3, #1
 800a324:	931b      	str	r3, [sp, #108]	; 0x6c
 800a326:	e7bf      	b.n	800a2a8 <_strtod_l+0x28>
 800a328:	2a2d      	cmp	r2, #45	; 0x2d
 800a32a:	d1c8      	bne.n	800a2be <_strtod_l+0x3e>
 800a32c:	2201      	movs	r2, #1
 800a32e:	920c      	str	r2, [sp, #48]	; 0x30
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	921b      	str	r2, [sp, #108]	; 0x6c
 800a334:	785b      	ldrb	r3, [r3, #1]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1c3      	bne.n	800a2c2 <_strtod_l+0x42>
 800a33a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a33c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f040 8577 	bne.w	800ae32 <_strtod_l+0xbb2>
 800a344:	4642      	mov	r2, r8
 800a346:	464b      	mov	r3, r9
 800a348:	e7e4      	b.n	800a314 <_strtod_l+0x94>
 800a34a:	2200      	movs	r2, #0
 800a34c:	e7ef      	b.n	800a32e <_strtod_l+0xae>
 800a34e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a350:	b13a      	cbz	r2, 800a362 <_strtod_l+0xe2>
 800a352:	2135      	movs	r1, #53	; 0x35
 800a354:	a81e      	add	r0, sp, #120	; 0x78
 800a356:	f002 ffc3 	bl	800d2e0 <__copybits>
 800a35a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a35c:	4650      	mov	r0, sl
 800a35e:	f002 fb8f 	bl	800ca80 <_Bfree>
 800a362:	3e01      	subs	r6, #1
 800a364:	2e05      	cmp	r6, #5
 800a366:	d807      	bhi.n	800a378 <_strtod_l+0xf8>
 800a368:	e8df f006 	tbb	[pc, r6]
 800a36c:	1d180b0e 	.word	0x1d180b0e
 800a370:	030e      	.short	0x030e
 800a372:	f04f 0900 	mov.w	r9, #0
 800a376:	46c8      	mov	r8, r9
 800a378:	0721      	lsls	r1, r4, #28
 800a37a:	d5c2      	bpl.n	800a302 <_strtod_l+0x82>
 800a37c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a380:	e7bf      	b.n	800a302 <_strtod_l+0x82>
 800a382:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800a386:	e7f7      	b.n	800a378 <_strtod_l+0xf8>
 800a388:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800a38c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a38e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a392:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a396:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a39a:	e7ed      	b.n	800a378 <_strtod_l+0xf8>
 800a39c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a51c <_strtod_l+0x29c>
 800a3a0:	f04f 0800 	mov.w	r8, #0
 800a3a4:	e7e8      	b.n	800a378 <_strtod_l+0xf8>
 800a3a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a3aa:	f04f 38ff 	mov.w	r8, #4294967295
 800a3ae:	e7e3      	b.n	800a378 <_strtod_l+0xf8>
 800a3b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	921b      	str	r2, [sp, #108]	; 0x6c
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	2b30      	cmp	r3, #48	; 0x30
 800a3ba:	d0f9      	beq.n	800a3b0 <_strtod_l+0x130>
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0a0      	beq.n	800a302 <_strtod_l+0x82>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	9307      	str	r3, [sp, #28]
 800a3c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3c6:	9308      	str	r3, [sp, #32]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a3ce:	469b      	mov	fp, r3
 800a3d0:	220a      	movs	r2, #10
 800a3d2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a3d4:	7805      	ldrb	r5, [r0, #0]
 800a3d6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a3da:	b2d9      	uxtb	r1, r3
 800a3dc:	2909      	cmp	r1, #9
 800a3de:	d926      	bls.n	800a42e <_strtod_l+0x1ae>
 800a3e0:	4622      	mov	r2, r4
 800a3e2:	4639      	mov	r1, r7
 800a3e4:	f003 fb13 	bl	800da0e <strncmp>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d032      	beq.n	800a452 <_strtod_l+0x1d2>
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	462b      	mov	r3, r5
 800a3f0:	465c      	mov	r4, fp
 800a3f2:	9004      	str	r0, [sp, #16]
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	2b65      	cmp	r3, #101	; 0x65
 800a3f8:	d001      	beq.n	800a3fe <_strtod_l+0x17e>
 800a3fa:	2b45      	cmp	r3, #69	; 0x45
 800a3fc:	d113      	bne.n	800a426 <_strtod_l+0x1a6>
 800a3fe:	b91c      	cbnz	r4, 800a408 <_strtod_l+0x188>
 800a400:	9b07      	ldr	r3, [sp, #28]
 800a402:	4303      	orrs	r3, r0
 800a404:	d099      	beq.n	800a33a <_strtod_l+0xba>
 800a406:	2400      	movs	r4, #0
 800a408:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a40a:	1c73      	adds	r3, r6, #1
 800a40c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a40e:	7873      	ldrb	r3, [r6, #1]
 800a410:	2b2b      	cmp	r3, #43	; 0x2b
 800a412:	d078      	beq.n	800a506 <_strtod_l+0x286>
 800a414:	2b2d      	cmp	r3, #45	; 0x2d
 800a416:	d07b      	beq.n	800a510 <_strtod_l+0x290>
 800a418:	2700      	movs	r7, #0
 800a41a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a41e:	2909      	cmp	r1, #9
 800a420:	f240 8082 	bls.w	800a528 <_strtod_l+0x2a8>
 800a424:	961b      	str	r6, [sp, #108]	; 0x6c
 800a426:	2500      	movs	r5, #0
 800a428:	e09e      	b.n	800a568 <_strtod_l+0x2e8>
 800a42a:	2300      	movs	r3, #0
 800a42c:	e7c9      	b.n	800a3c2 <_strtod_l+0x142>
 800a42e:	f1bb 0f08 	cmp.w	fp, #8
 800a432:	bfd5      	itete	le
 800a434:	9906      	ldrle	r1, [sp, #24]
 800a436:	9905      	ldrgt	r1, [sp, #20]
 800a438:	fb02 3301 	mlale	r3, r2, r1, r3
 800a43c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a440:	f100 0001 	add.w	r0, r0, #1
 800a444:	bfd4      	ite	le
 800a446:	9306      	strle	r3, [sp, #24]
 800a448:	9305      	strgt	r3, [sp, #20]
 800a44a:	f10b 0b01 	add.w	fp, fp, #1
 800a44e:	901b      	str	r0, [sp, #108]	; 0x6c
 800a450:	e7bf      	b.n	800a3d2 <_strtod_l+0x152>
 800a452:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a454:	191a      	adds	r2, r3, r4
 800a456:	921b      	str	r2, [sp, #108]	; 0x6c
 800a458:	5d1b      	ldrb	r3, [r3, r4]
 800a45a:	f1bb 0f00 	cmp.w	fp, #0
 800a45e:	d036      	beq.n	800a4ce <_strtod_l+0x24e>
 800a460:	9004      	str	r0, [sp, #16]
 800a462:	465c      	mov	r4, fp
 800a464:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a468:	2a09      	cmp	r2, #9
 800a46a:	d912      	bls.n	800a492 <_strtod_l+0x212>
 800a46c:	2201      	movs	r2, #1
 800a46e:	e7c2      	b.n	800a3f6 <_strtod_l+0x176>
 800a470:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a472:	1c5a      	adds	r2, r3, #1
 800a474:	921b      	str	r2, [sp, #108]	; 0x6c
 800a476:	785b      	ldrb	r3, [r3, #1]
 800a478:	3001      	adds	r0, #1
 800a47a:	2b30      	cmp	r3, #48	; 0x30
 800a47c:	d0f8      	beq.n	800a470 <_strtod_l+0x1f0>
 800a47e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a482:	2a08      	cmp	r2, #8
 800a484:	f200 84dc 	bhi.w	800ae40 <_strtod_l+0xbc0>
 800a488:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a48a:	9004      	str	r0, [sp, #16]
 800a48c:	2000      	movs	r0, #0
 800a48e:	9208      	str	r2, [sp, #32]
 800a490:	4604      	mov	r4, r0
 800a492:	3b30      	subs	r3, #48	; 0x30
 800a494:	f100 0201 	add.w	r2, r0, #1
 800a498:	d013      	beq.n	800a4c2 <_strtod_l+0x242>
 800a49a:	9904      	ldr	r1, [sp, #16]
 800a49c:	4411      	add	r1, r2
 800a49e:	9104      	str	r1, [sp, #16]
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	1905      	adds	r5, r0, r4
 800a4a4:	210a      	movs	r1, #10
 800a4a6:	42aa      	cmp	r2, r5
 800a4a8:	d113      	bne.n	800a4d2 <_strtod_l+0x252>
 800a4aa:	1822      	adds	r2, r4, r0
 800a4ac:	2a08      	cmp	r2, #8
 800a4ae:	f104 0401 	add.w	r4, r4, #1
 800a4b2:	4404      	add	r4, r0
 800a4b4:	dc1b      	bgt.n	800a4ee <_strtod_l+0x26e>
 800a4b6:	9906      	ldr	r1, [sp, #24]
 800a4b8:	220a      	movs	r2, #10
 800a4ba:	fb02 3301 	mla	r3, r2, r1, r3
 800a4be:	9306      	str	r3, [sp, #24]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4c4:	1c59      	adds	r1, r3, #1
 800a4c6:	911b      	str	r1, [sp, #108]	; 0x6c
 800a4c8:	785b      	ldrb	r3, [r3, #1]
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	e7ca      	b.n	800a464 <_strtod_l+0x1e4>
 800a4ce:	4658      	mov	r0, fp
 800a4d0:	e7d3      	b.n	800a47a <_strtod_l+0x1fa>
 800a4d2:	2a08      	cmp	r2, #8
 800a4d4:	dc04      	bgt.n	800a4e0 <_strtod_l+0x260>
 800a4d6:	9f06      	ldr	r7, [sp, #24]
 800a4d8:	434f      	muls	r7, r1
 800a4da:	9706      	str	r7, [sp, #24]
 800a4dc:	3201      	adds	r2, #1
 800a4de:	e7e2      	b.n	800a4a6 <_strtod_l+0x226>
 800a4e0:	1c57      	adds	r7, r2, #1
 800a4e2:	2f10      	cmp	r7, #16
 800a4e4:	bfde      	ittt	le
 800a4e6:	9f05      	ldrle	r7, [sp, #20]
 800a4e8:	434f      	mulle	r7, r1
 800a4ea:	9705      	strle	r7, [sp, #20]
 800a4ec:	e7f6      	b.n	800a4dc <_strtod_l+0x25c>
 800a4ee:	2c10      	cmp	r4, #16
 800a4f0:	bfdf      	itttt	le
 800a4f2:	9905      	ldrle	r1, [sp, #20]
 800a4f4:	220a      	movle	r2, #10
 800a4f6:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4fa:	9305      	strle	r3, [sp, #20]
 800a4fc:	e7e0      	b.n	800a4c0 <_strtod_l+0x240>
 800a4fe:	2300      	movs	r3, #0
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	2201      	movs	r2, #1
 800a504:	e77c      	b.n	800a400 <_strtod_l+0x180>
 800a506:	2700      	movs	r7, #0
 800a508:	1cb3      	adds	r3, r6, #2
 800a50a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a50c:	78b3      	ldrb	r3, [r6, #2]
 800a50e:	e784      	b.n	800a41a <_strtod_l+0x19a>
 800a510:	2701      	movs	r7, #1
 800a512:	e7f9      	b.n	800a508 <_strtod_l+0x288>
 800a514:	0800eca4 	.word	0x0800eca4
 800a518:	0800e9ec 	.word	0x0800e9ec
 800a51c:	7ff00000 	.word	0x7ff00000
 800a520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a522:	1c59      	adds	r1, r3, #1
 800a524:	911b      	str	r1, [sp, #108]	; 0x6c
 800a526:	785b      	ldrb	r3, [r3, #1]
 800a528:	2b30      	cmp	r3, #48	; 0x30
 800a52a:	d0f9      	beq.n	800a520 <_strtod_l+0x2a0>
 800a52c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a530:	2908      	cmp	r1, #8
 800a532:	f63f af78 	bhi.w	800a426 <_strtod_l+0x1a6>
 800a536:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800a53a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a53c:	9309      	str	r3, [sp, #36]	; 0x24
 800a53e:	f04f 0e0a 	mov.w	lr, #10
 800a542:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a544:	1c59      	adds	r1, r3, #1
 800a546:	911b      	str	r1, [sp, #108]	; 0x6c
 800a548:	785b      	ldrb	r3, [r3, #1]
 800a54a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800a54e:	2d09      	cmp	r5, #9
 800a550:	d935      	bls.n	800a5be <_strtod_l+0x33e>
 800a552:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a554:	1b49      	subs	r1, r1, r5
 800a556:	2908      	cmp	r1, #8
 800a558:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a55c:	dc02      	bgt.n	800a564 <_strtod_l+0x2e4>
 800a55e:	4565      	cmp	r5, ip
 800a560:	bfa8      	it	ge
 800a562:	4665      	movge	r5, ip
 800a564:	b107      	cbz	r7, 800a568 <_strtod_l+0x2e8>
 800a566:	426d      	negs	r5, r5
 800a568:	2c00      	cmp	r4, #0
 800a56a:	d14c      	bne.n	800a606 <_strtod_l+0x386>
 800a56c:	9907      	ldr	r1, [sp, #28]
 800a56e:	4301      	orrs	r1, r0
 800a570:	f47f aec7 	bne.w	800a302 <_strtod_l+0x82>
 800a574:	2a00      	cmp	r2, #0
 800a576:	f47f aee0 	bne.w	800a33a <_strtod_l+0xba>
 800a57a:	2b69      	cmp	r3, #105	; 0x69
 800a57c:	d026      	beq.n	800a5cc <_strtod_l+0x34c>
 800a57e:	dc23      	bgt.n	800a5c8 <_strtod_l+0x348>
 800a580:	2b49      	cmp	r3, #73	; 0x49
 800a582:	d023      	beq.n	800a5cc <_strtod_l+0x34c>
 800a584:	2b4e      	cmp	r3, #78	; 0x4e
 800a586:	f47f aed8 	bne.w	800a33a <_strtod_l+0xba>
 800a58a:	499c      	ldr	r1, [pc, #624]	; (800a7fc <_strtod_l+0x57c>)
 800a58c:	a81b      	add	r0, sp, #108	; 0x6c
 800a58e:	f002 f8fd 	bl	800c78c <__match>
 800a592:	2800      	cmp	r0, #0
 800a594:	f43f aed1 	beq.w	800a33a <_strtod_l+0xba>
 800a598:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2b28      	cmp	r3, #40	; 0x28
 800a59e:	d12c      	bne.n	800a5fa <_strtod_l+0x37a>
 800a5a0:	4997      	ldr	r1, [pc, #604]	; (800a800 <_strtod_l+0x580>)
 800a5a2:	aa1e      	add	r2, sp, #120	; 0x78
 800a5a4:	a81b      	add	r0, sp, #108	; 0x6c
 800a5a6:	f002 f905 	bl	800c7b4 <__hexnan>
 800a5aa:	2805      	cmp	r0, #5
 800a5ac:	d125      	bne.n	800a5fa <_strtod_l+0x37a>
 800a5ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a5b0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a5b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a5b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a5bc:	e6a1      	b.n	800a302 <_strtod_l+0x82>
 800a5be:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800a5c2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a5c6:	e7bc      	b.n	800a542 <_strtod_l+0x2c2>
 800a5c8:	2b6e      	cmp	r3, #110	; 0x6e
 800a5ca:	e7dc      	b.n	800a586 <_strtod_l+0x306>
 800a5cc:	498d      	ldr	r1, [pc, #564]	; (800a804 <_strtod_l+0x584>)
 800a5ce:	a81b      	add	r0, sp, #108	; 0x6c
 800a5d0:	f002 f8dc 	bl	800c78c <__match>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f43f aeb0 	beq.w	800a33a <_strtod_l+0xba>
 800a5da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5dc:	498a      	ldr	r1, [pc, #552]	; (800a808 <_strtod_l+0x588>)
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	a81b      	add	r0, sp, #108	; 0x6c
 800a5e2:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5e4:	f002 f8d2 	bl	800c78c <__match>
 800a5e8:	b910      	cbnz	r0, 800a5f0 <_strtod_l+0x370>
 800a5ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5f0:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800a818 <_strtod_l+0x598>
 800a5f4:	f04f 0800 	mov.w	r8, #0
 800a5f8:	e683      	b.n	800a302 <_strtod_l+0x82>
 800a5fa:	4884      	ldr	r0, [pc, #528]	; (800a80c <_strtod_l+0x58c>)
 800a5fc:	f003 f9be 	bl	800d97c <nan>
 800a600:	4680      	mov	r8, r0
 800a602:	4689      	mov	r9, r1
 800a604:	e67d      	b.n	800a302 <_strtod_l+0x82>
 800a606:	9b04      	ldr	r3, [sp, #16]
 800a608:	9806      	ldr	r0, [sp, #24]
 800a60a:	1aeb      	subs	r3, r5, r3
 800a60c:	f1bb 0f00 	cmp.w	fp, #0
 800a610:	bf08      	it	eq
 800a612:	46a3      	moveq	fp, r4
 800a614:	2c10      	cmp	r4, #16
 800a616:	9307      	str	r3, [sp, #28]
 800a618:	4626      	mov	r6, r4
 800a61a:	bfa8      	it	ge
 800a61c:	2610      	movge	r6, #16
 800a61e:	f7f5 ff59 	bl	80004d4 <__aeabi_ui2d>
 800a622:	2c09      	cmp	r4, #9
 800a624:	4680      	mov	r8, r0
 800a626:	4689      	mov	r9, r1
 800a628:	dd13      	ble.n	800a652 <_strtod_l+0x3d2>
 800a62a:	4b79      	ldr	r3, [pc, #484]	; (800a810 <_strtod_l+0x590>)
 800a62c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a630:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a634:	f7f5 ffc8 	bl	80005c8 <__aeabi_dmul>
 800a638:	4680      	mov	r8, r0
 800a63a:	9805      	ldr	r0, [sp, #20]
 800a63c:	4689      	mov	r9, r1
 800a63e:	f7f5 ff49 	bl	80004d4 <__aeabi_ui2d>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	f7f5 fe07 	bl	800025c <__adddf3>
 800a64e:	4680      	mov	r8, r0
 800a650:	4689      	mov	r9, r1
 800a652:	2c0f      	cmp	r4, #15
 800a654:	dc36      	bgt.n	800a6c4 <_strtod_l+0x444>
 800a656:	9b07      	ldr	r3, [sp, #28]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f43f ae52 	beq.w	800a302 <_strtod_l+0x82>
 800a65e:	dd22      	ble.n	800a6a6 <_strtod_l+0x426>
 800a660:	2b16      	cmp	r3, #22
 800a662:	dc09      	bgt.n	800a678 <_strtod_l+0x3f8>
 800a664:	4c6a      	ldr	r4, [pc, #424]	; (800a810 <_strtod_l+0x590>)
 800a666:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a66a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a66e:	4642      	mov	r2, r8
 800a670:	464b      	mov	r3, r9
 800a672:	f7f5 ffa9 	bl	80005c8 <__aeabi_dmul>
 800a676:	e7c3      	b.n	800a600 <_strtod_l+0x380>
 800a678:	9a07      	ldr	r2, [sp, #28]
 800a67a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a67e:	4293      	cmp	r3, r2
 800a680:	db20      	blt.n	800a6c4 <_strtod_l+0x444>
 800a682:	4d63      	ldr	r5, [pc, #396]	; (800a810 <_strtod_l+0x590>)
 800a684:	f1c4 040f 	rsb	r4, r4, #15
 800a688:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a68c:	4642      	mov	r2, r8
 800a68e:	464b      	mov	r3, r9
 800a690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a694:	f7f5 ff98 	bl	80005c8 <__aeabi_dmul>
 800a698:	9b07      	ldr	r3, [sp, #28]
 800a69a:	1b1c      	subs	r4, r3, r4
 800a69c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a6a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6a4:	e7e5      	b.n	800a672 <_strtod_l+0x3f2>
 800a6a6:	9b07      	ldr	r3, [sp, #28]
 800a6a8:	3316      	adds	r3, #22
 800a6aa:	db0b      	blt.n	800a6c4 <_strtod_l+0x444>
 800a6ac:	9b04      	ldr	r3, [sp, #16]
 800a6ae:	4a58      	ldr	r2, [pc, #352]	; (800a810 <_strtod_l+0x590>)
 800a6b0:	1b5d      	subs	r5, r3, r5
 800a6b2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a6b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	4649      	mov	r1, r9
 800a6be:	f7f6 f8ad 	bl	800081c <__aeabi_ddiv>
 800a6c2:	e79d      	b.n	800a600 <_strtod_l+0x380>
 800a6c4:	9b07      	ldr	r3, [sp, #28]
 800a6c6:	1ba6      	subs	r6, r4, r6
 800a6c8:	441e      	add	r6, r3
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	dd71      	ble.n	800a7b2 <_strtod_l+0x532>
 800a6ce:	f016 030f 	ands.w	r3, r6, #15
 800a6d2:	d00a      	beq.n	800a6ea <_strtod_l+0x46a>
 800a6d4:	494e      	ldr	r1, [pc, #312]	; (800a810 <_strtod_l+0x590>)
 800a6d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6da:	4642      	mov	r2, r8
 800a6dc:	464b      	mov	r3, r9
 800a6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6e2:	f7f5 ff71 	bl	80005c8 <__aeabi_dmul>
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	4689      	mov	r9, r1
 800a6ea:	f036 060f 	bics.w	r6, r6, #15
 800a6ee:	d050      	beq.n	800a792 <_strtod_l+0x512>
 800a6f0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a6f4:	dd27      	ble.n	800a746 <_strtod_l+0x4c6>
 800a6f6:	f04f 0b00 	mov.w	fp, #0
 800a6fa:	f8cd b010 	str.w	fp, [sp, #16]
 800a6fe:	f8cd b020 	str.w	fp, [sp, #32]
 800a702:	f8cd b018 	str.w	fp, [sp, #24]
 800a706:	2322      	movs	r3, #34	; 0x22
 800a708:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800a818 <_strtod_l+0x598>
 800a70c:	f8ca 3000 	str.w	r3, [sl]
 800a710:	f04f 0800 	mov.w	r8, #0
 800a714:	9b08      	ldr	r3, [sp, #32]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f43f adf3 	beq.w	800a302 <_strtod_l+0x82>
 800a71c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a71e:	4650      	mov	r0, sl
 800a720:	f002 f9ae 	bl	800ca80 <_Bfree>
 800a724:	9906      	ldr	r1, [sp, #24]
 800a726:	4650      	mov	r0, sl
 800a728:	f002 f9aa 	bl	800ca80 <_Bfree>
 800a72c:	9904      	ldr	r1, [sp, #16]
 800a72e:	4650      	mov	r0, sl
 800a730:	f002 f9a6 	bl	800ca80 <_Bfree>
 800a734:	9908      	ldr	r1, [sp, #32]
 800a736:	4650      	mov	r0, sl
 800a738:	f002 f9a2 	bl	800ca80 <_Bfree>
 800a73c:	4659      	mov	r1, fp
 800a73e:	4650      	mov	r0, sl
 800a740:	f002 f99e 	bl	800ca80 <_Bfree>
 800a744:	e5dd      	b.n	800a302 <_strtod_l+0x82>
 800a746:	2300      	movs	r3, #0
 800a748:	1136      	asrs	r6, r6, #4
 800a74a:	4640      	mov	r0, r8
 800a74c:	4649      	mov	r1, r9
 800a74e:	461f      	mov	r7, r3
 800a750:	2e01      	cmp	r6, #1
 800a752:	dc21      	bgt.n	800a798 <_strtod_l+0x518>
 800a754:	b10b      	cbz	r3, 800a75a <_strtod_l+0x4da>
 800a756:	4680      	mov	r8, r0
 800a758:	4689      	mov	r9, r1
 800a75a:	4b2e      	ldr	r3, [pc, #184]	; (800a814 <_strtod_l+0x594>)
 800a75c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a760:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a764:	4642      	mov	r2, r8
 800a766:	464b      	mov	r3, r9
 800a768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a76c:	f7f5 ff2c 	bl	80005c8 <__aeabi_dmul>
 800a770:	4b29      	ldr	r3, [pc, #164]	; (800a818 <_strtod_l+0x598>)
 800a772:	460a      	mov	r2, r1
 800a774:	400b      	ands	r3, r1
 800a776:	4929      	ldr	r1, [pc, #164]	; (800a81c <_strtod_l+0x59c>)
 800a778:	428b      	cmp	r3, r1
 800a77a:	4680      	mov	r8, r0
 800a77c:	d8bb      	bhi.n	800a6f6 <_strtod_l+0x476>
 800a77e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a782:	428b      	cmp	r3, r1
 800a784:	bf86      	itte	hi
 800a786:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800a820 <_strtod_l+0x5a0>
 800a78a:	f04f 38ff 	movhi.w	r8, #4294967295
 800a78e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a792:	2300      	movs	r3, #0
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	e07e      	b.n	800a896 <_strtod_l+0x616>
 800a798:	07f2      	lsls	r2, r6, #31
 800a79a:	d507      	bpl.n	800a7ac <_strtod_l+0x52c>
 800a79c:	4b1d      	ldr	r3, [pc, #116]	; (800a814 <_strtod_l+0x594>)
 800a79e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a6:	f7f5 ff0f 	bl	80005c8 <__aeabi_dmul>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	3701      	adds	r7, #1
 800a7ae:	1076      	asrs	r6, r6, #1
 800a7b0:	e7ce      	b.n	800a750 <_strtod_l+0x4d0>
 800a7b2:	d0ee      	beq.n	800a792 <_strtod_l+0x512>
 800a7b4:	4276      	negs	r6, r6
 800a7b6:	f016 020f 	ands.w	r2, r6, #15
 800a7ba:	d00a      	beq.n	800a7d2 <_strtod_l+0x552>
 800a7bc:	4b14      	ldr	r3, [pc, #80]	; (800a810 <_strtod_l+0x590>)
 800a7be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	f7f6 f827 	bl	800081c <__aeabi_ddiv>
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	4689      	mov	r9, r1
 800a7d2:	1136      	asrs	r6, r6, #4
 800a7d4:	d0dd      	beq.n	800a792 <_strtod_l+0x512>
 800a7d6:	2e1f      	cmp	r6, #31
 800a7d8:	dd24      	ble.n	800a824 <_strtod_l+0x5a4>
 800a7da:	f04f 0b00 	mov.w	fp, #0
 800a7de:	f8cd b010 	str.w	fp, [sp, #16]
 800a7e2:	f8cd b020 	str.w	fp, [sp, #32]
 800a7e6:	f8cd b018 	str.w	fp, [sp, #24]
 800a7ea:	2322      	movs	r3, #34	; 0x22
 800a7ec:	f04f 0800 	mov.w	r8, #0
 800a7f0:	f04f 0900 	mov.w	r9, #0
 800a7f4:	f8ca 3000 	str.w	r3, [sl]
 800a7f8:	e78c      	b.n	800a714 <_strtod_l+0x494>
 800a7fa:	bf00      	nop
 800a7fc:	0800e32d 	.word	0x0800e32d
 800a800:	0800ea00 	.word	0x0800ea00
 800a804:	0800e325 	.word	0x0800e325
 800a808:	0800eb44 	.word	0x0800eb44
 800a80c:	0800ee60 	.word	0x0800ee60
 800a810:	0800ed40 	.word	0x0800ed40
 800a814:	0800ed18 	.word	0x0800ed18
 800a818:	7ff00000 	.word	0x7ff00000
 800a81c:	7ca00000 	.word	0x7ca00000
 800a820:	7fefffff 	.word	0x7fefffff
 800a824:	f016 0310 	ands.w	r3, r6, #16
 800a828:	bf18      	it	ne
 800a82a:	236a      	movne	r3, #106	; 0x6a
 800a82c:	4fb3      	ldr	r7, [pc, #716]	; (800aafc <_strtod_l+0x87c>)
 800a82e:	9305      	str	r3, [sp, #20]
 800a830:	4640      	mov	r0, r8
 800a832:	4649      	mov	r1, r9
 800a834:	2300      	movs	r3, #0
 800a836:	07f2      	lsls	r2, r6, #31
 800a838:	d504      	bpl.n	800a844 <_strtod_l+0x5c4>
 800a83a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a83e:	f7f5 fec3 	bl	80005c8 <__aeabi_dmul>
 800a842:	2301      	movs	r3, #1
 800a844:	1076      	asrs	r6, r6, #1
 800a846:	f107 0708 	add.w	r7, r7, #8
 800a84a:	d1f4      	bne.n	800a836 <_strtod_l+0x5b6>
 800a84c:	b10b      	cbz	r3, 800a852 <_strtod_l+0x5d2>
 800a84e:	4680      	mov	r8, r0
 800a850:	4689      	mov	r9, r1
 800a852:	9b05      	ldr	r3, [sp, #20]
 800a854:	b1bb      	cbz	r3, 800a886 <_strtod_l+0x606>
 800a856:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800a85a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a85e:	2b00      	cmp	r3, #0
 800a860:	4649      	mov	r1, r9
 800a862:	dd10      	ble.n	800a886 <_strtod_l+0x606>
 800a864:	2b1f      	cmp	r3, #31
 800a866:	f340 8128 	ble.w	800aaba <_strtod_l+0x83a>
 800a86a:	2b34      	cmp	r3, #52	; 0x34
 800a86c:	bfde      	ittt	le
 800a86e:	3b20      	suble	r3, #32
 800a870:	f04f 32ff 	movle.w	r2, #4294967295
 800a874:	fa02 f303 	lslle.w	r3, r2, r3
 800a878:	f04f 0800 	mov.w	r8, #0
 800a87c:	bfcc      	ite	gt
 800a87e:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a882:	ea03 0901 	andle.w	r9, r3, r1
 800a886:	2200      	movs	r2, #0
 800a888:	2300      	movs	r3, #0
 800a88a:	4640      	mov	r0, r8
 800a88c:	4649      	mov	r1, r9
 800a88e:	f7f6 f903 	bl	8000a98 <__aeabi_dcmpeq>
 800a892:	2800      	cmp	r0, #0
 800a894:	d1a1      	bne.n	800a7da <_strtod_l+0x55a>
 800a896:	9b06      	ldr	r3, [sp, #24]
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	9908      	ldr	r1, [sp, #32]
 800a89c:	4623      	mov	r3, r4
 800a89e:	465a      	mov	r2, fp
 800a8a0:	4650      	mov	r0, sl
 800a8a2:	f002 f959 	bl	800cb58 <__s2b>
 800a8a6:	9008      	str	r0, [sp, #32]
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	f43f af24 	beq.w	800a6f6 <_strtod_l+0x476>
 800a8ae:	9b04      	ldr	r3, [sp, #16]
 800a8b0:	1b5d      	subs	r5, r3, r5
 800a8b2:	9b07      	ldr	r3, [sp, #28]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bfb4      	ite	lt
 800a8b8:	462b      	movlt	r3, r5
 800a8ba:	2300      	movge	r3, #0
 800a8bc:	930e      	str	r3, [sp, #56]	; 0x38
 800a8be:	9b07      	ldr	r3, [sp, #28]
 800a8c0:	f04f 0b00 	mov.w	fp, #0
 800a8c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a8c8:	9316      	str	r3, [sp, #88]	; 0x58
 800a8ca:	f8cd b010 	str.w	fp, [sp, #16]
 800a8ce:	9b08      	ldr	r3, [sp, #32]
 800a8d0:	4650      	mov	r0, sl
 800a8d2:	6859      	ldr	r1, [r3, #4]
 800a8d4:	f002 f894 	bl	800ca00 <_Balloc>
 800a8d8:	9006      	str	r0, [sp, #24]
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f43f af13 	beq.w	800a706 <_strtod_l+0x486>
 800a8e0:	9b08      	ldr	r3, [sp, #32]
 800a8e2:	691a      	ldr	r2, [r3, #16]
 800a8e4:	3202      	adds	r2, #2
 800a8e6:	f103 010c 	add.w	r1, r3, #12
 800a8ea:	0092      	lsls	r2, r2, #2
 800a8ec:	300c      	adds	r0, #12
 800a8ee:	f7fe fc19 	bl	8009124 <memcpy>
 800a8f2:	ab1e      	add	r3, sp, #120	; 0x78
 800a8f4:	9301      	str	r3, [sp, #4]
 800a8f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	464b      	mov	r3, r9
 800a8fe:	4650      	mov	r0, sl
 800a900:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800a904:	f002 fc62 	bl	800d1cc <__d2b>
 800a908:	901c      	str	r0, [sp, #112]	; 0x70
 800a90a:	2800      	cmp	r0, #0
 800a90c:	f43f aefb 	beq.w	800a706 <_strtod_l+0x486>
 800a910:	2101      	movs	r1, #1
 800a912:	4650      	mov	r0, sl
 800a914:	f002 f9b8 	bl	800cc88 <__i2b>
 800a918:	9004      	str	r0, [sp, #16]
 800a91a:	4603      	mov	r3, r0
 800a91c:	2800      	cmp	r0, #0
 800a91e:	f43f aef2 	beq.w	800a706 <_strtod_l+0x486>
 800a922:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a924:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a926:	2d00      	cmp	r5, #0
 800a928:	bfab      	itete	ge
 800a92a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a92c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a92e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a930:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a932:	bfac      	ite	ge
 800a934:	18ee      	addge	r6, r5, r3
 800a936:	1b5c      	sublt	r4, r3, r5
 800a938:	9b05      	ldr	r3, [sp, #20]
 800a93a:	1aed      	subs	r5, r5, r3
 800a93c:	4415      	add	r5, r2
 800a93e:	4b70      	ldr	r3, [pc, #448]	; (800ab00 <_strtod_l+0x880>)
 800a940:	3d01      	subs	r5, #1
 800a942:	429d      	cmp	r5, r3
 800a944:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a948:	f280 80c9 	bge.w	800aade <_strtod_l+0x85e>
 800a94c:	1b5b      	subs	r3, r3, r5
 800a94e:	2b1f      	cmp	r3, #31
 800a950:	eba2 0203 	sub.w	r2, r2, r3
 800a954:	f04f 0701 	mov.w	r7, #1
 800a958:	f300 80b6 	bgt.w	800aac8 <_strtod_l+0x848>
 800a95c:	fa07 f303 	lsl.w	r3, r7, r3
 800a960:	930f      	str	r3, [sp, #60]	; 0x3c
 800a962:	2500      	movs	r5, #0
 800a964:	18b7      	adds	r7, r6, r2
 800a966:	9b05      	ldr	r3, [sp, #20]
 800a968:	42be      	cmp	r6, r7
 800a96a:	4414      	add	r4, r2
 800a96c:	441c      	add	r4, r3
 800a96e:	4633      	mov	r3, r6
 800a970:	bfa8      	it	ge
 800a972:	463b      	movge	r3, r7
 800a974:	42a3      	cmp	r3, r4
 800a976:	bfa8      	it	ge
 800a978:	4623      	movge	r3, r4
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	bfc2      	ittt	gt
 800a97e:	1aff      	subgt	r7, r7, r3
 800a980:	1ae4      	subgt	r4, r4, r3
 800a982:	1af6      	subgt	r6, r6, r3
 800a984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a986:	2b00      	cmp	r3, #0
 800a988:	dd17      	ble.n	800a9ba <_strtod_l+0x73a>
 800a98a:	9904      	ldr	r1, [sp, #16]
 800a98c:	461a      	mov	r2, r3
 800a98e:	4650      	mov	r0, sl
 800a990:	f002 fa36 	bl	800ce00 <__pow5mult>
 800a994:	9004      	str	r0, [sp, #16]
 800a996:	2800      	cmp	r0, #0
 800a998:	f43f aeb5 	beq.w	800a706 <_strtod_l+0x486>
 800a99c:	4601      	mov	r1, r0
 800a99e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	f002 f987 	bl	800ccb4 <__multiply>
 800a9a6:	9009      	str	r0, [sp, #36]	; 0x24
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	f43f aeac 	beq.w	800a706 <_strtod_l+0x486>
 800a9ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	f002 f865 	bl	800ca80 <_Bfree>
 800a9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b8:	931c      	str	r3, [sp, #112]	; 0x70
 800a9ba:	2f00      	cmp	r7, #0
 800a9bc:	f300 8093 	bgt.w	800aae6 <_strtod_l+0x866>
 800a9c0:	9b07      	ldr	r3, [sp, #28]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dd08      	ble.n	800a9d8 <_strtod_l+0x758>
 800a9c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a9c8:	9906      	ldr	r1, [sp, #24]
 800a9ca:	4650      	mov	r0, sl
 800a9cc:	f002 fa18 	bl	800ce00 <__pow5mult>
 800a9d0:	9006      	str	r0, [sp, #24]
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	f43f ae97 	beq.w	800a706 <_strtod_l+0x486>
 800a9d8:	2c00      	cmp	r4, #0
 800a9da:	dd08      	ble.n	800a9ee <_strtod_l+0x76e>
 800a9dc:	9906      	ldr	r1, [sp, #24]
 800a9de:	4622      	mov	r2, r4
 800a9e0:	4650      	mov	r0, sl
 800a9e2:	f002 fa67 	bl	800ceb4 <__lshift>
 800a9e6:	9006      	str	r0, [sp, #24]
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f43f ae8c 	beq.w	800a706 <_strtod_l+0x486>
 800a9ee:	2e00      	cmp	r6, #0
 800a9f0:	dd08      	ble.n	800aa04 <_strtod_l+0x784>
 800a9f2:	9904      	ldr	r1, [sp, #16]
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	4650      	mov	r0, sl
 800a9f8:	f002 fa5c 	bl	800ceb4 <__lshift>
 800a9fc:	9004      	str	r0, [sp, #16]
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	f43f ae81 	beq.w	800a706 <_strtod_l+0x486>
 800aa04:	9a06      	ldr	r2, [sp, #24]
 800aa06:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa08:	4650      	mov	r0, sl
 800aa0a:	f002 fadb 	bl	800cfc4 <__mdiff>
 800aa0e:	4683      	mov	fp, r0
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f43f ae78 	beq.w	800a706 <_strtod_l+0x486>
 800aa16:	2400      	movs	r4, #0
 800aa18:	68c3      	ldr	r3, [r0, #12]
 800aa1a:	9904      	ldr	r1, [sp, #16]
 800aa1c:	60c4      	str	r4, [r0, #12]
 800aa1e:	930d      	str	r3, [sp, #52]	; 0x34
 800aa20:	f002 fab4 	bl	800cf8c <__mcmp>
 800aa24:	42a0      	cmp	r0, r4
 800aa26:	da71      	bge.n	800ab0c <_strtod_l+0x88c>
 800aa28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa2a:	ea53 0308 	orrs.w	r3, r3, r8
 800aa2e:	f040 8097 	bne.w	800ab60 <_strtod_l+0x8e0>
 800aa32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f040 8092 	bne.w	800ab60 <_strtod_l+0x8e0>
 800aa3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa40:	0d1b      	lsrs	r3, r3, #20
 800aa42:	051b      	lsls	r3, r3, #20
 800aa44:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa48:	f240 808a 	bls.w	800ab60 <_strtod_l+0x8e0>
 800aa4c:	f8db 3014 	ldr.w	r3, [fp, #20]
 800aa50:	b923      	cbnz	r3, 800aa5c <_strtod_l+0x7dc>
 800aa52:	f8db 3010 	ldr.w	r3, [fp, #16]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	f340 8082 	ble.w	800ab60 <_strtod_l+0x8e0>
 800aa5c:	4659      	mov	r1, fp
 800aa5e:	2201      	movs	r2, #1
 800aa60:	4650      	mov	r0, sl
 800aa62:	f002 fa27 	bl	800ceb4 <__lshift>
 800aa66:	9904      	ldr	r1, [sp, #16]
 800aa68:	4683      	mov	fp, r0
 800aa6a:	f002 fa8f 	bl	800cf8c <__mcmp>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	dd76      	ble.n	800ab60 <_strtod_l+0x8e0>
 800aa72:	9905      	ldr	r1, [sp, #20]
 800aa74:	4a23      	ldr	r2, [pc, #140]	; (800ab04 <_strtod_l+0x884>)
 800aa76:	464b      	mov	r3, r9
 800aa78:	2900      	cmp	r1, #0
 800aa7a:	f000 8092 	beq.w	800aba2 <_strtod_l+0x922>
 800aa7e:	ea02 0109 	and.w	r1, r2, r9
 800aa82:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa86:	f300 808c 	bgt.w	800aba2 <_strtod_l+0x922>
 800aa8a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa8e:	f77f aeac 	ble.w	800a7ea <_strtod_l+0x56a>
 800aa92:	4a1d      	ldr	r2, [pc, #116]	; (800ab08 <_strtod_l+0x888>)
 800aa94:	2300      	movs	r3, #0
 800aa96:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800aa9a:	4640      	mov	r0, r8
 800aa9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	f7f5 fd91 	bl	80005c8 <__aeabi_dmul>
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	4303      	orrs	r3, r0
 800aaaa:	bf08      	it	eq
 800aaac:	2322      	moveq	r3, #34	; 0x22
 800aaae:	4680      	mov	r8, r0
 800aab0:	4689      	mov	r9, r1
 800aab2:	bf08      	it	eq
 800aab4:	f8ca 3000 	streq.w	r3, [sl]
 800aab8:	e630      	b.n	800a71c <_strtod_l+0x49c>
 800aaba:	f04f 32ff 	mov.w	r2, #4294967295
 800aabe:	fa02 f303 	lsl.w	r3, r2, r3
 800aac2:	ea03 0808 	and.w	r8, r3, r8
 800aac6:	e6de      	b.n	800a886 <_strtod_l+0x606>
 800aac8:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800aacc:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800aad0:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800aad4:	35e2      	adds	r5, #226	; 0xe2
 800aad6:	fa07 f505 	lsl.w	r5, r7, r5
 800aada:	970f      	str	r7, [sp, #60]	; 0x3c
 800aadc:	e742      	b.n	800a964 <_strtod_l+0x6e4>
 800aade:	2301      	movs	r3, #1
 800aae0:	2500      	movs	r5, #0
 800aae2:	930f      	str	r3, [sp, #60]	; 0x3c
 800aae4:	e73e      	b.n	800a964 <_strtod_l+0x6e4>
 800aae6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aae8:	463a      	mov	r2, r7
 800aaea:	4650      	mov	r0, sl
 800aaec:	f002 f9e2 	bl	800ceb4 <__lshift>
 800aaf0:	901c      	str	r0, [sp, #112]	; 0x70
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	f47f af64 	bne.w	800a9c0 <_strtod_l+0x740>
 800aaf8:	e605      	b.n	800a706 <_strtod_l+0x486>
 800aafa:	bf00      	nop
 800aafc:	0800ea18 	.word	0x0800ea18
 800ab00:	fffffc02 	.word	0xfffffc02
 800ab04:	7ff00000 	.word	0x7ff00000
 800ab08:	39500000 	.word	0x39500000
 800ab0c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ab10:	d166      	bne.n	800abe0 <_strtod_l+0x960>
 800ab12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab18:	b35a      	cbz	r2, 800ab72 <_strtod_l+0x8f2>
 800ab1a:	4a9d      	ldr	r2, [pc, #628]	; (800ad90 <_strtod_l+0xb10>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d12c      	bne.n	800ab7a <_strtod_l+0x8fa>
 800ab20:	9b05      	ldr	r3, [sp, #20]
 800ab22:	4640      	mov	r0, r8
 800ab24:	b303      	cbz	r3, 800ab68 <_strtod_l+0x8e8>
 800ab26:	4a9b      	ldr	r2, [pc, #620]	; (800ad94 <_strtod_l+0xb14>)
 800ab28:	464b      	mov	r3, r9
 800ab2a:	401a      	ands	r2, r3
 800ab2c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ab30:	f04f 31ff 	mov.w	r1, #4294967295
 800ab34:	d81b      	bhi.n	800ab6e <_strtod_l+0x8ee>
 800ab36:	0d12      	lsrs	r2, r2, #20
 800ab38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab40:	4298      	cmp	r0, r3
 800ab42:	d11a      	bne.n	800ab7a <_strtod_l+0x8fa>
 800ab44:	4b94      	ldr	r3, [pc, #592]	; (800ad98 <_strtod_l+0xb18>)
 800ab46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d102      	bne.n	800ab52 <_strtod_l+0x8d2>
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	f43f adda 	beq.w	800a706 <_strtod_l+0x486>
 800ab52:	4b90      	ldr	r3, [pc, #576]	; (800ad94 <_strtod_l+0xb14>)
 800ab54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab56:	401a      	ands	r2, r3
 800ab58:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ab5c:	f04f 0800 	mov.w	r8, #0
 800ab60:	9b05      	ldr	r3, [sp, #20]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d195      	bne.n	800aa92 <_strtod_l+0x812>
 800ab66:	e5d9      	b.n	800a71c <_strtod_l+0x49c>
 800ab68:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6c:	e7e8      	b.n	800ab40 <_strtod_l+0x8c0>
 800ab6e:	460b      	mov	r3, r1
 800ab70:	e7e6      	b.n	800ab40 <_strtod_l+0x8c0>
 800ab72:	ea53 0308 	orrs.w	r3, r3, r8
 800ab76:	f43f af7c 	beq.w	800aa72 <_strtod_l+0x7f2>
 800ab7a:	b1e5      	cbz	r5, 800abb6 <_strtod_l+0x936>
 800ab7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab7e:	421d      	tst	r5, r3
 800ab80:	d0ee      	beq.n	800ab60 <_strtod_l+0x8e0>
 800ab82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab84:	9a05      	ldr	r2, [sp, #20]
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	b1c3      	cbz	r3, 800abbe <_strtod_l+0x93e>
 800ab8c:	f7ff fb55 	bl	800a23a <sulp>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab98:	f7f5 fb60 	bl	800025c <__adddf3>
 800ab9c:	4680      	mov	r8, r0
 800ab9e:	4689      	mov	r9, r1
 800aba0:	e7de      	b.n	800ab60 <_strtod_l+0x8e0>
 800aba2:	4013      	ands	r3, r2
 800aba4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aba8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800abac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800abb0:	f04f 38ff 	mov.w	r8, #4294967295
 800abb4:	e7d4      	b.n	800ab60 <_strtod_l+0x8e0>
 800abb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abb8:	ea13 0f08 	tst.w	r3, r8
 800abbc:	e7e0      	b.n	800ab80 <_strtod_l+0x900>
 800abbe:	f7ff fb3c 	bl	800a23a <sulp>
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
 800abc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800abca:	f7f5 fb45 	bl	8000258 <__aeabi_dsub>
 800abce:	2200      	movs	r2, #0
 800abd0:	2300      	movs	r3, #0
 800abd2:	4680      	mov	r8, r0
 800abd4:	4689      	mov	r9, r1
 800abd6:	f7f5 ff5f 	bl	8000a98 <__aeabi_dcmpeq>
 800abda:	2800      	cmp	r0, #0
 800abdc:	d0c0      	beq.n	800ab60 <_strtod_l+0x8e0>
 800abde:	e604      	b.n	800a7ea <_strtod_l+0x56a>
 800abe0:	9904      	ldr	r1, [sp, #16]
 800abe2:	4658      	mov	r0, fp
 800abe4:	f002 fb4e 	bl	800d284 <__ratio>
 800abe8:	2200      	movs	r2, #0
 800abea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abee:	4606      	mov	r6, r0
 800abf0:	460f      	mov	r7, r1
 800abf2:	f7f5 ff65 	bl	8000ac0 <__aeabi_dcmple>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d075      	beq.n	800ace6 <_strtod_l+0xa66>
 800abfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d047      	beq.n	800ac90 <_strtod_l+0xa10>
 800ac00:	4f66      	ldr	r7, [pc, #408]	; (800ad9c <_strtod_l+0xb1c>)
 800ac02:	2600      	movs	r6, #0
 800ac04:	4d65      	ldr	r5, [pc, #404]	; (800ad9c <_strtod_l+0xb1c>)
 800ac06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac0c:	0d1b      	lsrs	r3, r3, #20
 800ac0e:	051b      	lsls	r3, r3, #20
 800ac10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac14:	4b62      	ldr	r3, [pc, #392]	; (800ada0 <_strtod_l+0xb20>)
 800ac16:	429a      	cmp	r2, r3
 800ac18:	f040 80ca 	bne.w	800adb0 <_strtod_l+0xb30>
 800ac1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac20:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ac24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac26:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	f002 fa53 	bl	800d0d8 <__ulp>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4630      	mov	r0, r6
 800ac38:	4639      	mov	r1, r7
 800ac3a:	f7f5 fcc5 	bl	80005c8 <__aeabi_dmul>
 800ac3e:	4642      	mov	r2, r8
 800ac40:	464b      	mov	r3, r9
 800ac42:	f7f5 fb0b 	bl	800025c <__adddf3>
 800ac46:	460b      	mov	r3, r1
 800ac48:	4952      	ldr	r1, [pc, #328]	; (800ad94 <_strtod_l+0xb14>)
 800ac4a:	4a56      	ldr	r2, [pc, #344]	; (800ada4 <_strtod_l+0xb24>)
 800ac4c:	4019      	ands	r1, r3
 800ac4e:	4291      	cmp	r1, r2
 800ac50:	4680      	mov	r8, r0
 800ac52:	d95e      	bls.n	800ad12 <_strtod_l+0xa92>
 800ac54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac56:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d103      	bne.n	800ac66 <_strtod_l+0x9e6>
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac60:	3301      	adds	r3, #1
 800ac62:	f43f ad50 	beq.w	800a706 <_strtod_l+0x486>
 800ac66:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800ad98 <_strtod_l+0xb18>
 800ac6a:	f04f 38ff 	mov.w	r8, #4294967295
 800ac6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac70:	4650      	mov	r0, sl
 800ac72:	f001 ff05 	bl	800ca80 <_Bfree>
 800ac76:	9906      	ldr	r1, [sp, #24]
 800ac78:	4650      	mov	r0, sl
 800ac7a:	f001 ff01 	bl	800ca80 <_Bfree>
 800ac7e:	9904      	ldr	r1, [sp, #16]
 800ac80:	4650      	mov	r0, sl
 800ac82:	f001 fefd 	bl	800ca80 <_Bfree>
 800ac86:	4659      	mov	r1, fp
 800ac88:	4650      	mov	r0, sl
 800ac8a:	f001 fef9 	bl	800ca80 <_Bfree>
 800ac8e:	e61e      	b.n	800a8ce <_strtod_l+0x64e>
 800ac90:	f1b8 0f00 	cmp.w	r8, #0
 800ac94:	d119      	bne.n	800acca <_strtod_l+0xa4a>
 800ac96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac9c:	b9e3      	cbnz	r3, 800acd8 <_strtod_l+0xa58>
 800ac9e:	4b3f      	ldr	r3, [pc, #252]	; (800ad9c <_strtod_l+0xb1c>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	4630      	mov	r0, r6
 800aca4:	4639      	mov	r1, r7
 800aca6:	f7f5 ff01 	bl	8000aac <__aeabi_dcmplt>
 800acaa:	b9c8      	cbnz	r0, 800ace0 <_strtod_l+0xa60>
 800acac:	4b3e      	ldr	r3, [pc, #248]	; (800ada8 <_strtod_l+0xb28>)
 800acae:	2200      	movs	r2, #0
 800acb0:	4630      	mov	r0, r6
 800acb2:	4639      	mov	r1, r7
 800acb4:	f7f5 fc88 	bl	80005c8 <__aeabi_dmul>
 800acb8:	4604      	mov	r4, r0
 800acba:	460d      	mov	r5, r1
 800acbc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800acc0:	9418      	str	r4, [sp, #96]	; 0x60
 800acc2:	9319      	str	r3, [sp, #100]	; 0x64
 800acc4:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800acc8:	e79d      	b.n	800ac06 <_strtod_l+0x986>
 800acca:	f1b8 0f01 	cmp.w	r8, #1
 800acce:	d103      	bne.n	800acd8 <_strtod_l+0xa58>
 800acd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f43f ad89 	beq.w	800a7ea <_strtod_l+0x56a>
 800acd8:	4f34      	ldr	r7, [pc, #208]	; (800adac <_strtod_l+0xb2c>)
 800acda:	2600      	movs	r6, #0
 800acdc:	2400      	movs	r4, #0
 800acde:	e791      	b.n	800ac04 <_strtod_l+0x984>
 800ace0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ace2:	4d31      	ldr	r5, [pc, #196]	; (800ada8 <_strtod_l+0xb28>)
 800ace4:	e7ea      	b.n	800acbc <_strtod_l+0xa3c>
 800ace6:	4b30      	ldr	r3, [pc, #192]	; (800ada8 <_strtod_l+0xb28>)
 800ace8:	2200      	movs	r2, #0
 800acea:	4630      	mov	r0, r6
 800acec:	4639      	mov	r1, r7
 800acee:	f7f5 fc6b 	bl	80005c8 <__aeabi_dmul>
 800acf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acf4:	4604      	mov	r4, r0
 800acf6:	460d      	mov	r5, r1
 800acf8:	b933      	cbnz	r3, 800ad08 <_strtod_l+0xa88>
 800acfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acfe:	9010      	str	r0, [sp, #64]	; 0x40
 800ad00:	9311      	str	r3, [sp, #68]	; 0x44
 800ad02:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ad06:	e77e      	b.n	800ac06 <_strtod_l+0x986>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ad10:	e7f7      	b.n	800ad02 <_strtod_l+0xa82>
 800ad12:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ad16:	9b05      	ldr	r3, [sp, #20]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1a8      	bne.n	800ac6e <_strtod_l+0x9ee>
 800ad1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad22:	0d1b      	lsrs	r3, r3, #20
 800ad24:	051b      	lsls	r3, r3, #20
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d1a1      	bne.n	800ac6e <_strtod_l+0x9ee>
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f7f5 ffab 	bl	8000c88 <__aeabi_d2lz>
 800ad32:	f7f5 fc1b 	bl	800056c <__aeabi_l2d>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	f7f5 fa8b 	bl	8000258 <__aeabi_dsub>
 800ad42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad48:	ea43 0308 	orr.w	r3, r3, r8
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	4604      	mov	r4, r0
 800ad50:	460d      	mov	r5, r1
 800ad52:	d068      	beq.n	800ae26 <_strtod_l+0xba6>
 800ad54:	a30a      	add	r3, pc, #40	; (adr r3, 800ad80 <_strtod_l+0xb00>)
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	f7f5 fea7 	bl	8000aac <__aeabi_dcmplt>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f47f acdc 	bne.w	800a71c <_strtod_l+0x49c>
 800ad64:	a308      	add	r3, pc, #32	; (adr r3, 800ad88 <_strtod_l+0xb08>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	f7f5 febb 	bl	8000ae8 <__aeabi_dcmpgt>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	f43f af7b 	beq.w	800ac6e <_strtod_l+0x9ee>
 800ad78:	e4d0      	b.n	800a71c <_strtod_l+0x49c>
 800ad7a:	bf00      	nop
 800ad7c:	f3af 8000 	nop.w
 800ad80:	94a03595 	.word	0x94a03595
 800ad84:	3fdfffff 	.word	0x3fdfffff
 800ad88:	35afe535 	.word	0x35afe535
 800ad8c:	3fe00000 	.word	0x3fe00000
 800ad90:	000fffff 	.word	0x000fffff
 800ad94:	7ff00000 	.word	0x7ff00000
 800ad98:	7fefffff 	.word	0x7fefffff
 800ad9c:	3ff00000 	.word	0x3ff00000
 800ada0:	7fe00000 	.word	0x7fe00000
 800ada4:	7c9fffff 	.word	0x7c9fffff
 800ada8:	3fe00000 	.word	0x3fe00000
 800adac:	bff00000 	.word	0xbff00000
 800adb0:	9b05      	ldr	r3, [sp, #20]
 800adb2:	b313      	cbz	r3, 800adfa <_strtod_l+0xb7a>
 800adb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800adba:	d81e      	bhi.n	800adfa <_strtod_l+0xb7a>
 800adbc:	a326      	add	r3, pc, #152	; (adr r3, 800ae58 <_strtod_l+0xbd8>)
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	4620      	mov	r0, r4
 800adc4:	4629      	mov	r1, r5
 800adc6:	f7f5 fe7b 	bl	8000ac0 <__aeabi_dcmple>
 800adca:	b190      	cbz	r0, 800adf2 <_strtod_l+0xb72>
 800adcc:	4629      	mov	r1, r5
 800adce:	4620      	mov	r0, r4
 800add0:	f7f5 fed2 	bl	8000b78 <__aeabi_d2uiz>
 800add4:	2801      	cmp	r0, #1
 800add6:	bf38      	it	cc
 800add8:	2001      	movcc	r0, #1
 800adda:	f7f5 fb7b 	bl	80004d4 <__aeabi_ui2d>
 800adde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ade0:	4604      	mov	r4, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	b9d3      	cbnz	r3, 800ae1c <_strtod_l+0xb9c>
 800ade6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adea:	9012      	str	r0, [sp, #72]	; 0x48
 800adec:	9313      	str	r3, [sp, #76]	; 0x4c
 800adee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800adf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adf4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800adf8:	1a9f      	subs	r7, r3, r2
 800adfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800adfe:	f002 f96b 	bl	800d0d8 <__ulp>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4630      	mov	r0, r6
 800ae08:	4639      	mov	r1, r7
 800ae0a:	f7f5 fbdd 	bl	80005c8 <__aeabi_dmul>
 800ae0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae12:	f7f5 fa23 	bl	800025c <__adddf3>
 800ae16:	4680      	mov	r8, r0
 800ae18:	4689      	mov	r9, r1
 800ae1a:	e77c      	b.n	800ad16 <_strtod_l+0xa96>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800ae24:	e7e3      	b.n	800adee <_strtod_l+0xb6e>
 800ae26:	a30e      	add	r3, pc, #56	; (adr r3, 800ae60 <_strtod_l+0xbe0>)
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	f7f5 fe3e 	bl	8000aac <__aeabi_dcmplt>
 800ae30:	e79f      	b.n	800ad72 <_strtod_l+0xaf2>
 800ae32:	2300      	movs	r3, #0
 800ae34:	930c      	str	r3, [sp, #48]	; 0x30
 800ae36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	f7ff ba65 	b.w	800a30a <_strtod_l+0x8a>
 800ae40:	2b65      	cmp	r3, #101	; 0x65
 800ae42:	f43f ab5c 	beq.w	800a4fe <_strtod_l+0x27e>
 800ae46:	2b45      	cmp	r3, #69	; 0x45
 800ae48:	f43f ab59 	beq.w	800a4fe <_strtod_l+0x27e>
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f7ff bb8d 	b.w	800a56c <_strtod_l+0x2ec>
 800ae52:	bf00      	nop
 800ae54:	f3af 8000 	nop.w
 800ae58:	ffc00000 	.word	0xffc00000
 800ae5c:	41dfffff 	.word	0x41dfffff
 800ae60:	94a03595 	.word	0x94a03595
 800ae64:	3fcfffff 	.word	0x3fcfffff

0800ae68 <strtod>:
 800ae68:	460a      	mov	r2, r1
 800ae6a:	4601      	mov	r1, r0
 800ae6c:	4802      	ldr	r0, [pc, #8]	; (800ae78 <strtod+0x10>)
 800ae6e:	4b03      	ldr	r3, [pc, #12]	; (800ae7c <strtod+0x14>)
 800ae70:	6800      	ldr	r0, [r0, #0]
 800ae72:	f7ff ba05 	b.w	800a280 <_strtod_l>
 800ae76:	bf00      	nop
 800ae78:	20000010 	.word	0x20000010
 800ae7c:	20000078 	.word	0x20000078

0800ae80 <_strtol_l.isra.0>:
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae86:	4686      	mov	lr, r0
 800ae88:	d001      	beq.n	800ae8e <_strtol_l.isra.0+0xe>
 800ae8a:	2b24      	cmp	r3, #36	; 0x24
 800ae8c:	d906      	bls.n	800ae9c <_strtol_l.isra.0+0x1c>
 800ae8e:	f7fe f90f 	bl	80090b0 <__errno>
 800ae92:	2316      	movs	r3, #22
 800ae94:	6003      	str	r3, [r0, #0]
 800ae96:	2000      	movs	r0, #0
 800ae98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9c:	4e3a      	ldr	r6, [pc, #232]	; (800af88 <_strtol_l.isra.0+0x108>)
 800ae9e:	468c      	mov	ip, r1
 800aea0:	4660      	mov	r0, ip
 800aea2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800aea6:	5da5      	ldrb	r5, [r4, r6]
 800aea8:	f015 0508 	ands.w	r5, r5, #8
 800aeac:	d1f8      	bne.n	800aea0 <_strtol_l.isra.0+0x20>
 800aeae:	2c2d      	cmp	r4, #45	; 0x2d
 800aeb0:	d133      	bne.n	800af1a <_strtol_l.isra.0+0x9a>
 800aeb2:	f89c 4000 	ldrb.w	r4, [ip]
 800aeb6:	f04f 0801 	mov.w	r8, #1
 800aeba:	f100 0c02 	add.w	ip, r0, #2
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d05d      	beq.n	800af7e <_strtol_l.isra.0+0xfe>
 800aec2:	2b10      	cmp	r3, #16
 800aec4:	d10c      	bne.n	800aee0 <_strtol_l.isra.0+0x60>
 800aec6:	2c30      	cmp	r4, #48	; 0x30
 800aec8:	d10a      	bne.n	800aee0 <_strtol_l.isra.0+0x60>
 800aeca:	f89c 0000 	ldrb.w	r0, [ip]
 800aece:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aed2:	2858      	cmp	r0, #88	; 0x58
 800aed4:	d14e      	bne.n	800af74 <_strtol_l.isra.0+0xf4>
 800aed6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800aeda:	2310      	movs	r3, #16
 800aedc:	f10c 0c02 	add.w	ip, ip, #2
 800aee0:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800aee4:	3f01      	subs	r7, #1
 800aee6:	2500      	movs	r5, #0
 800aee8:	fbb7 f9f3 	udiv	r9, r7, r3
 800aeec:	4628      	mov	r0, r5
 800aeee:	fb03 7a19 	mls	sl, r3, r9, r7
 800aef2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800aef6:	2e09      	cmp	r6, #9
 800aef8:	d818      	bhi.n	800af2c <_strtol_l.isra.0+0xac>
 800aefa:	4634      	mov	r4, r6
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	dd24      	ble.n	800af4a <_strtol_l.isra.0+0xca>
 800af00:	2d00      	cmp	r5, #0
 800af02:	db1f      	blt.n	800af44 <_strtol_l.isra.0+0xc4>
 800af04:	4581      	cmp	r9, r0
 800af06:	d31d      	bcc.n	800af44 <_strtol_l.isra.0+0xc4>
 800af08:	d101      	bne.n	800af0e <_strtol_l.isra.0+0x8e>
 800af0a:	45a2      	cmp	sl, r4
 800af0c:	db1a      	blt.n	800af44 <_strtol_l.isra.0+0xc4>
 800af0e:	fb00 4003 	mla	r0, r0, r3, r4
 800af12:	2501      	movs	r5, #1
 800af14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800af18:	e7eb      	b.n	800aef2 <_strtol_l.isra.0+0x72>
 800af1a:	2c2b      	cmp	r4, #43	; 0x2b
 800af1c:	bf08      	it	eq
 800af1e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800af22:	46a8      	mov	r8, r5
 800af24:	bf08      	it	eq
 800af26:	f100 0c02 	addeq.w	ip, r0, #2
 800af2a:	e7c8      	b.n	800aebe <_strtol_l.isra.0+0x3e>
 800af2c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800af30:	2e19      	cmp	r6, #25
 800af32:	d801      	bhi.n	800af38 <_strtol_l.isra.0+0xb8>
 800af34:	3c37      	subs	r4, #55	; 0x37
 800af36:	e7e1      	b.n	800aefc <_strtol_l.isra.0+0x7c>
 800af38:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800af3c:	2e19      	cmp	r6, #25
 800af3e:	d804      	bhi.n	800af4a <_strtol_l.isra.0+0xca>
 800af40:	3c57      	subs	r4, #87	; 0x57
 800af42:	e7db      	b.n	800aefc <_strtol_l.isra.0+0x7c>
 800af44:	f04f 35ff 	mov.w	r5, #4294967295
 800af48:	e7e4      	b.n	800af14 <_strtol_l.isra.0+0x94>
 800af4a:	2d00      	cmp	r5, #0
 800af4c:	da08      	bge.n	800af60 <_strtol_l.isra.0+0xe0>
 800af4e:	2322      	movs	r3, #34	; 0x22
 800af50:	f8ce 3000 	str.w	r3, [lr]
 800af54:	4638      	mov	r0, r7
 800af56:	2a00      	cmp	r2, #0
 800af58:	d09e      	beq.n	800ae98 <_strtol_l.isra.0+0x18>
 800af5a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800af5e:	e007      	b.n	800af70 <_strtol_l.isra.0+0xf0>
 800af60:	f1b8 0f00 	cmp.w	r8, #0
 800af64:	d000      	beq.n	800af68 <_strtol_l.isra.0+0xe8>
 800af66:	4240      	negs	r0, r0
 800af68:	2a00      	cmp	r2, #0
 800af6a:	d095      	beq.n	800ae98 <_strtol_l.isra.0+0x18>
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	d1f4      	bne.n	800af5a <_strtol_l.isra.0+0xda>
 800af70:	6011      	str	r1, [r2, #0]
 800af72:	e791      	b.n	800ae98 <_strtol_l.isra.0+0x18>
 800af74:	2430      	movs	r4, #48	; 0x30
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1b2      	bne.n	800aee0 <_strtol_l.isra.0+0x60>
 800af7a:	2308      	movs	r3, #8
 800af7c:	e7b0      	b.n	800aee0 <_strtol_l.isra.0+0x60>
 800af7e:	2c30      	cmp	r4, #48	; 0x30
 800af80:	d0a3      	beq.n	800aeca <_strtol_l.isra.0+0x4a>
 800af82:	230a      	movs	r3, #10
 800af84:	e7ac      	b.n	800aee0 <_strtol_l.isra.0+0x60>
 800af86:	bf00      	nop
 800af88:	0800ea41 	.word	0x0800ea41

0800af8c <strtol>:
 800af8c:	4613      	mov	r3, r2
 800af8e:	460a      	mov	r2, r1
 800af90:	4601      	mov	r1, r0
 800af92:	4802      	ldr	r0, [pc, #8]	; (800af9c <strtol+0x10>)
 800af94:	6800      	ldr	r0, [r0, #0]
 800af96:	f7ff bf73 	b.w	800ae80 <_strtol_l.isra.0>
 800af9a:	bf00      	nop
 800af9c:	20000010 	.word	0x20000010

0800afa0 <_user_strerror>:
 800afa0:	2000      	movs	r0, #0
 800afa2:	4770      	bx	lr

0800afa4 <__swbuf_r>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	460e      	mov	r6, r1
 800afa8:	4614      	mov	r4, r2
 800afaa:	4605      	mov	r5, r0
 800afac:	b118      	cbz	r0, 800afb6 <__swbuf_r+0x12>
 800afae:	6983      	ldr	r3, [r0, #24]
 800afb0:	b90b      	cbnz	r3, 800afb6 <__swbuf_r+0x12>
 800afb2:	f001 f89b 	bl	800c0ec <__sinit>
 800afb6:	4b21      	ldr	r3, [pc, #132]	; (800b03c <__swbuf_r+0x98>)
 800afb8:	429c      	cmp	r4, r3
 800afba:	d12b      	bne.n	800b014 <__swbuf_r+0x70>
 800afbc:	686c      	ldr	r4, [r5, #4]
 800afbe:	69a3      	ldr	r3, [r4, #24]
 800afc0:	60a3      	str	r3, [r4, #8]
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	071a      	lsls	r2, r3, #28
 800afc6:	d52f      	bpl.n	800b028 <__swbuf_r+0x84>
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	b36b      	cbz	r3, 800b028 <__swbuf_r+0x84>
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	6820      	ldr	r0, [r4, #0]
 800afd0:	1ac0      	subs	r0, r0, r3
 800afd2:	6963      	ldr	r3, [r4, #20]
 800afd4:	b2f6      	uxtb	r6, r6
 800afd6:	4283      	cmp	r3, r0
 800afd8:	4637      	mov	r7, r6
 800afda:	dc04      	bgt.n	800afe6 <__swbuf_r+0x42>
 800afdc:	4621      	mov	r1, r4
 800afde:	4628      	mov	r0, r5
 800afe0:	f000 ffb2 	bl	800bf48 <_fflush_r>
 800afe4:	bb30      	cbnz	r0, 800b034 <__swbuf_r+0x90>
 800afe6:	68a3      	ldr	r3, [r4, #8]
 800afe8:	3b01      	subs	r3, #1
 800afea:	60a3      	str	r3, [r4, #8]
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	6022      	str	r2, [r4, #0]
 800aff2:	701e      	strb	r6, [r3, #0]
 800aff4:	6963      	ldr	r3, [r4, #20]
 800aff6:	3001      	adds	r0, #1
 800aff8:	4283      	cmp	r3, r0
 800affa:	d004      	beq.n	800b006 <__swbuf_r+0x62>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	07db      	lsls	r3, r3, #31
 800b000:	d506      	bpl.n	800b010 <__swbuf_r+0x6c>
 800b002:	2e0a      	cmp	r6, #10
 800b004:	d104      	bne.n	800b010 <__swbuf_r+0x6c>
 800b006:	4621      	mov	r1, r4
 800b008:	4628      	mov	r0, r5
 800b00a:	f000 ff9d 	bl	800bf48 <_fflush_r>
 800b00e:	b988      	cbnz	r0, 800b034 <__swbuf_r+0x90>
 800b010:	4638      	mov	r0, r7
 800b012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b014:	4b0a      	ldr	r3, [pc, #40]	; (800b040 <__swbuf_r+0x9c>)
 800b016:	429c      	cmp	r4, r3
 800b018:	d101      	bne.n	800b01e <__swbuf_r+0x7a>
 800b01a:	68ac      	ldr	r4, [r5, #8]
 800b01c:	e7cf      	b.n	800afbe <__swbuf_r+0x1a>
 800b01e:	4b09      	ldr	r3, [pc, #36]	; (800b044 <__swbuf_r+0xa0>)
 800b020:	429c      	cmp	r4, r3
 800b022:	bf08      	it	eq
 800b024:	68ec      	ldreq	r4, [r5, #12]
 800b026:	e7ca      	b.n	800afbe <__swbuf_r+0x1a>
 800b028:	4621      	mov	r1, r4
 800b02a:	4628      	mov	r0, r5
 800b02c:	f000 f81e 	bl	800b06c <__swsetup_r>
 800b030:	2800      	cmp	r0, #0
 800b032:	d0cb      	beq.n	800afcc <__swbuf_r+0x28>
 800b034:	f04f 37ff 	mov.w	r7, #4294967295
 800b038:	e7ea      	b.n	800b010 <__swbuf_r+0x6c>
 800b03a:	bf00      	nop
 800b03c:	0800ebf8 	.word	0x0800ebf8
 800b040:	0800ec18 	.word	0x0800ec18
 800b044:	0800ebd8 	.word	0x0800ebd8

0800b048 <_write_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d07      	ldr	r5, [pc, #28]	; (800b068 <_write_r+0x20>)
 800b04c:	4604      	mov	r4, r0
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	2200      	movs	r2, #0
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f6 fd68 	bl	8001b2c <_write>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_write_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_write_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	200005e0 	.word	0x200005e0

0800b06c <__swsetup_r>:
 800b06c:	4b32      	ldr	r3, [pc, #200]	; (800b138 <__swsetup_r+0xcc>)
 800b06e:	b570      	push	{r4, r5, r6, lr}
 800b070:	681d      	ldr	r5, [r3, #0]
 800b072:	4606      	mov	r6, r0
 800b074:	460c      	mov	r4, r1
 800b076:	b125      	cbz	r5, 800b082 <__swsetup_r+0x16>
 800b078:	69ab      	ldr	r3, [r5, #24]
 800b07a:	b913      	cbnz	r3, 800b082 <__swsetup_r+0x16>
 800b07c:	4628      	mov	r0, r5
 800b07e:	f001 f835 	bl	800c0ec <__sinit>
 800b082:	4b2e      	ldr	r3, [pc, #184]	; (800b13c <__swsetup_r+0xd0>)
 800b084:	429c      	cmp	r4, r3
 800b086:	d10f      	bne.n	800b0a8 <__swsetup_r+0x3c>
 800b088:	686c      	ldr	r4, [r5, #4]
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b090:	0719      	lsls	r1, r3, #28
 800b092:	d42c      	bmi.n	800b0ee <__swsetup_r+0x82>
 800b094:	06dd      	lsls	r5, r3, #27
 800b096:	d411      	bmi.n	800b0bc <__swsetup_r+0x50>
 800b098:	2309      	movs	r3, #9
 800b09a:	6033      	str	r3, [r6, #0]
 800b09c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a6:	e03e      	b.n	800b126 <__swsetup_r+0xba>
 800b0a8:	4b25      	ldr	r3, [pc, #148]	; (800b140 <__swsetup_r+0xd4>)
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	d101      	bne.n	800b0b2 <__swsetup_r+0x46>
 800b0ae:	68ac      	ldr	r4, [r5, #8]
 800b0b0:	e7eb      	b.n	800b08a <__swsetup_r+0x1e>
 800b0b2:	4b24      	ldr	r3, [pc, #144]	; (800b144 <__swsetup_r+0xd8>)
 800b0b4:	429c      	cmp	r4, r3
 800b0b6:	bf08      	it	eq
 800b0b8:	68ec      	ldreq	r4, [r5, #12]
 800b0ba:	e7e6      	b.n	800b08a <__swsetup_r+0x1e>
 800b0bc:	0758      	lsls	r0, r3, #29
 800b0be:	d512      	bpl.n	800b0e6 <__swsetup_r+0x7a>
 800b0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0c2:	b141      	cbz	r1, 800b0d6 <__swsetup_r+0x6a>
 800b0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d002      	beq.n	800b0d2 <__swsetup_r+0x66>
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7fe f83f 	bl	8009150 <_free_r>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0dc:	81a3      	strh	r3, [r4, #12]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6063      	str	r3, [r4, #4]
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	f043 0308 	orr.w	r3, r3, #8
 800b0ec:	81a3      	strh	r3, [r4, #12]
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	b94b      	cbnz	r3, 800b106 <__swsetup_r+0x9a>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0fc:	d003      	beq.n	800b106 <__swsetup_r+0x9a>
 800b0fe:	4621      	mov	r1, r4
 800b100:	4630      	mov	r0, r6
 800b102:	f001 fc1f 	bl	800c944 <__smakebuf_r>
 800b106:	89a0      	ldrh	r0, [r4, #12]
 800b108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b10c:	f010 0301 	ands.w	r3, r0, #1
 800b110:	d00a      	beq.n	800b128 <__swsetup_r+0xbc>
 800b112:	2300      	movs	r3, #0
 800b114:	60a3      	str	r3, [r4, #8]
 800b116:	6963      	ldr	r3, [r4, #20]
 800b118:	425b      	negs	r3, r3
 800b11a:	61a3      	str	r3, [r4, #24]
 800b11c:	6923      	ldr	r3, [r4, #16]
 800b11e:	b943      	cbnz	r3, 800b132 <__swsetup_r+0xc6>
 800b120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b124:	d1ba      	bne.n	800b09c <__swsetup_r+0x30>
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	0781      	lsls	r1, r0, #30
 800b12a:	bf58      	it	pl
 800b12c:	6963      	ldrpl	r3, [r4, #20]
 800b12e:	60a3      	str	r3, [r4, #8]
 800b130:	e7f4      	b.n	800b11c <__swsetup_r+0xb0>
 800b132:	2000      	movs	r0, #0
 800b134:	e7f7      	b.n	800b126 <__swsetup_r+0xba>
 800b136:	bf00      	nop
 800b138:	20000010 	.word	0x20000010
 800b13c:	0800ebf8 	.word	0x0800ebf8
 800b140:	0800ec18 	.word	0x0800ec18
 800b144:	0800ebd8 	.word	0x0800ebd8

0800b148 <quorem>:
 800b148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	6903      	ldr	r3, [r0, #16]
 800b14e:	690c      	ldr	r4, [r1, #16]
 800b150:	42a3      	cmp	r3, r4
 800b152:	4607      	mov	r7, r0
 800b154:	f2c0 8081 	blt.w	800b25a <quorem+0x112>
 800b158:	3c01      	subs	r4, #1
 800b15a:	f101 0814 	add.w	r8, r1, #20
 800b15e:	f100 0514 	add.w	r5, r0, #20
 800b162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b16c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b170:	3301      	adds	r3, #1
 800b172:	429a      	cmp	r2, r3
 800b174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b17c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b180:	d331      	bcc.n	800b1e6 <quorem+0x9e>
 800b182:	f04f 0e00 	mov.w	lr, #0
 800b186:	4640      	mov	r0, r8
 800b188:	46ac      	mov	ip, r5
 800b18a:	46f2      	mov	sl, lr
 800b18c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b190:	b293      	uxth	r3, r2
 800b192:	fb06 e303 	mla	r3, r6, r3, lr
 800b196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	ebaa 0303 	sub.w	r3, sl, r3
 800b1a0:	0c12      	lsrs	r2, r2, #16
 800b1a2:	f8dc a000 	ldr.w	sl, [ip]
 800b1a6:	fb06 e202 	mla	r2, r6, r2, lr
 800b1aa:	fa13 f38a 	uxtah	r3, r3, sl
 800b1ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b1b2:	fa1f fa82 	uxth.w	sl, r2
 800b1b6:	f8dc 2000 	ldr.w	r2, [ip]
 800b1ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b1be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1c8:	4581      	cmp	r9, r0
 800b1ca:	f84c 3b04 	str.w	r3, [ip], #4
 800b1ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1d2:	d2db      	bcs.n	800b18c <quorem+0x44>
 800b1d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1d8:	b92b      	cbnz	r3, 800b1e6 <quorem+0x9e>
 800b1da:	9b01      	ldr	r3, [sp, #4]
 800b1dc:	3b04      	subs	r3, #4
 800b1de:	429d      	cmp	r5, r3
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	d32e      	bcc.n	800b242 <quorem+0xfa>
 800b1e4:	613c      	str	r4, [r7, #16]
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	f001 fed0 	bl	800cf8c <__mcmp>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	db24      	blt.n	800b23a <quorem+0xf2>
 800b1f0:	3601      	adds	r6, #1
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f04f 0c00 	mov.w	ip, #0
 800b1f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1fc:	f8d0 e000 	ldr.w	lr, [r0]
 800b200:	b293      	uxth	r3, r2
 800b202:	ebac 0303 	sub.w	r3, ip, r3
 800b206:	0c12      	lsrs	r2, r2, #16
 800b208:	fa13 f38e 	uxtah	r3, r3, lr
 800b20c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b214:	b29b      	uxth	r3, r3
 800b216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b21a:	45c1      	cmp	r9, r8
 800b21c:	f840 3b04 	str.w	r3, [r0], #4
 800b220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b224:	d2e8      	bcs.n	800b1f8 <quorem+0xb0>
 800b226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b22e:	b922      	cbnz	r2, 800b23a <quorem+0xf2>
 800b230:	3b04      	subs	r3, #4
 800b232:	429d      	cmp	r5, r3
 800b234:	461a      	mov	r2, r3
 800b236:	d30a      	bcc.n	800b24e <quorem+0x106>
 800b238:	613c      	str	r4, [r7, #16]
 800b23a:	4630      	mov	r0, r6
 800b23c:	b003      	add	sp, #12
 800b23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b242:	6812      	ldr	r2, [r2, #0]
 800b244:	3b04      	subs	r3, #4
 800b246:	2a00      	cmp	r2, #0
 800b248:	d1cc      	bne.n	800b1e4 <quorem+0x9c>
 800b24a:	3c01      	subs	r4, #1
 800b24c:	e7c7      	b.n	800b1de <quorem+0x96>
 800b24e:	6812      	ldr	r2, [r2, #0]
 800b250:	3b04      	subs	r3, #4
 800b252:	2a00      	cmp	r2, #0
 800b254:	d1f0      	bne.n	800b238 <quorem+0xf0>
 800b256:	3c01      	subs	r4, #1
 800b258:	e7eb      	b.n	800b232 <quorem+0xea>
 800b25a:	2000      	movs	r0, #0
 800b25c:	e7ee      	b.n	800b23c <quorem+0xf4>
	...

0800b260 <_dtoa_r>:
 800b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b266:	b099      	sub	sp, #100	; 0x64
 800b268:	4616      	mov	r6, r2
 800b26a:	461f      	mov	r7, r3
 800b26c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b270:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b274:	4605      	mov	r5, r0
 800b276:	b974      	cbnz	r4, 800b296 <_dtoa_r+0x36>
 800b278:	2010      	movs	r0, #16
 800b27a:	f7fd ff43 	bl	8009104 <malloc>
 800b27e:	4602      	mov	r2, r0
 800b280:	6268      	str	r0, [r5, #36]	; 0x24
 800b282:	b920      	cbnz	r0, 800b28e <_dtoa_r+0x2e>
 800b284:	4ba8      	ldr	r3, [pc, #672]	; (800b528 <_dtoa_r+0x2c8>)
 800b286:	21ea      	movs	r1, #234	; 0xea
 800b288:	48a8      	ldr	r0, [pc, #672]	; (800b52c <_dtoa_r+0x2cc>)
 800b28a:	f002 fbdf 	bl	800da4c <__assert_func>
 800b28e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b292:	6004      	str	r4, [r0, #0]
 800b294:	60c4      	str	r4, [r0, #12]
 800b296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b298:	6819      	ldr	r1, [r3, #0]
 800b29a:	b151      	cbz	r1, 800b2b2 <_dtoa_r+0x52>
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	604a      	str	r2, [r1, #4]
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	4093      	lsls	r3, r2
 800b2a4:	608b      	str	r3, [r1, #8]
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	f001 fbea 	bl	800ca80 <_Bfree>
 800b2ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	1e3b      	subs	r3, r7, #0
 800b2b4:	bfb9      	ittee	lt
 800b2b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b2ba:	9305      	strlt	r3, [sp, #20]
 800b2bc:	2300      	movge	r3, #0
 800b2be:	f8c8 3000 	strge.w	r3, [r8]
 800b2c2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b2c6:	4b9a      	ldr	r3, [pc, #616]	; (800b530 <_dtoa_r+0x2d0>)
 800b2c8:	bfbc      	itt	lt
 800b2ca:	2201      	movlt	r2, #1
 800b2cc:	f8c8 2000 	strlt.w	r2, [r8]
 800b2d0:	ea33 0309 	bics.w	r3, r3, r9
 800b2d4:	d119      	bne.n	800b30a <_dtoa_r+0xaa>
 800b2d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b2d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2e2:	4333      	orrs	r3, r6
 800b2e4:	f000 8581 	beq.w	800bdea <_dtoa_r+0xb8a>
 800b2e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b2ea:	b953      	cbnz	r3, 800b302 <_dtoa_r+0xa2>
 800b2ec:	4b91      	ldr	r3, [pc, #580]	; (800b534 <_dtoa_r+0x2d4>)
 800b2ee:	e022      	b.n	800b336 <_dtoa_r+0xd6>
 800b2f0:	4b91      	ldr	r3, [pc, #580]	; (800b538 <_dtoa_r+0x2d8>)
 800b2f2:	9308      	str	r3, [sp, #32]
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	9808      	ldr	r0, [sp, #32]
 800b2fc:	b019      	add	sp, #100	; 0x64
 800b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b302:	4b8c      	ldr	r3, [pc, #560]	; (800b534 <_dtoa_r+0x2d4>)
 800b304:	9308      	str	r3, [sp, #32]
 800b306:	3303      	adds	r3, #3
 800b308:	e7f5      	b.n	800b2f6 <_dtoa_r+0x96>
 800b30a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b30e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b312:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b316:	2200      	movs	r2, #0
 800b318:	2300      	movs	r3, #0
 800b31a:	f7f5 fbbd 	bl	8000a98 <__aeabi_dcmpeq>
 800b31e:	4680      	mov	r8, r0
 800b320:	b158      	cbz	r0, 800b33a <_dtoa_r+0xda>
 800b322:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b324:	2301      	movs	r3, #1
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 855a 	beq.w	800bde4 <_dtoa_r+0xb84>
 800b330:	4882      	ldr	r0, [pc, #520]	; (800b53c <_dtoa_r+0x2dc>)
 800b332:	6018      	str	r0, [r3, #0]
 800b334:	1e43      	subs	r3, r0, #1
 800b336:	9308      	str	r3, [sp, #32]
 800b338:	e7df      	b.n	800b2fa <_dtoa_r+0x9a>
 800b33a:	ab16      	add	r3, sp, #88	; 0x58
 800b33c:	9301      	str	r3, [sp, #4]
 800b33e:	ab17      	add	r3, sp, #92	; 0x5c
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	4628      	mov	r0, r5
 800b344:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b348:	f001 ff40 	bl	800d1cc <__d2b>
 800b34c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b350:	4682      	mov	sl, r0
 800b352:	2c00      	cmp	r4, #0
 800b354:	d07e      	beq.n	800b454 <_dtoa_r+0x1f4>
 800b356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b358:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b35c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b364:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b368:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b36c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b370:	4b73      	ldr	r3, [pc, #460]	; (800b540 <_dtoa_r+0x2e0>)
 800b372:	2200      	movs	r2, #0
 800b374:	f7f4 ff70 	bl	8000258 <__aeabi_dsub>
 800b378:	a365      	add	r3, pc, #404	; (adr r3, 800b510 <_dtoa_r+0x2b0>)
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	f7f5 f923 	bl	80005c8 <__aeabi_dmul>
 800b382:	a365      	add	r3, pc, #404	; (adr r3, 800b518 <_dtoa_r+0x2b8>)
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	f7f4 ff68 	bl	800025c <__adddf3>
 800b38c:	4606      	mov	r6, r0
 800b38e:	4620      	mov	r0, r4
 800b390:	460f      	mov	r7, r1
 800b392:	f7f5 f8af 	bl	80004f4 <__aeabi_i2d>
 800b396:	a362      	add	r3, pc, #392	; (adr r3, 800b520 <_dtoa_r+0x2c0>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f5 f914 	bl	80005c8 <__aeabi_dmul>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	f7f4 ff58 	bl	800025c <__adddf3>
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	460f      	mov	r7, r1
 800b3b0:	f7f5 fbba 	bl	8000b28 <__aeabi_d2iz>
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	4681      	mov	r9, r0
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	4639      	mov	r1, r7
 800b3be:	f7f5 fb75 	bl	8000aac <__aeabi_dcmplt>
 800b3c2:	b148      	cbz	r0, 800b3d8 <_dtoa_r+0x178>
 800b3c4:	4648      	mov	r0, r9
 800b3c6:	f7f5 f895 	bl	80004f4 <__aeabi_i2d>
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	f7f5 fb63 	bl	8000a98 <__aeabi_dcmpeq>
 800b3d2:	b908      	cbnz	r0, 800b3d8 <_dtoa_r+0x178>
 800b3d4:	f109 39ff 	add.w	r9, r9, #4294967295
 800b3d8:	f1b9 0f16 	cmp.w	r9, #22
 800b3dc:	d857      	bhi.n	800b48e <_dtoa_r+0x22e>
 800b3de:	4b59      	ldr	r3, [pc, #356]	; (800b544 <_dtoa_r+0x2e4>)
 800b3e0:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3ec:	f7f5 fb5e 	bl	8000aac <__aeabi_dcmplt>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d04e      	beq.n	800b492 <_dtoa_r+0x232>
 800b3f4:	f109 39ff 	add.w	r9, r9, #4294967295
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3fe:	1b1c      	subs	r4, r3, r4
 800b400:	1e63      	subs	r3, r4, #1
 800b402:	9309      	str	r3, [sp, #36]	; 0x24
 800b404:	bf45      	ittet	mi
 800b406:	f1c4 0301 	rsbmi	r3, r4, #1
 800b40a:	9306      	strmi	r3, [sp, #24]
 800b40c:	2300      	movpl	r3, #0
 800b40e:	2300      	movmi	r3, #0
 800b410:	bf4c      	ite	mi
 800b412:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b414:	9306      	strpl	r3, [sp, #24]
 800b416:	f1b9 0f00 	cmp.w	r9, #0
 800b41a:	db3c      	blt.n	800b496 <_dtoa_r+0x236>
 800b41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b422:	444b      	add	r3, r9
 800b424:	9309      	str	r3, [sp, #36]	; 0x24
 800b426:	2300      	movs	r3, #0
 800b428:	930a      	str	r3, [sp, #40]	; 0x28
 800b42a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b42c:	2b09      	cmp	r3, #9
 800b42e:	f200 808d 	bhi.w	800b54c <_dtoa_r+0x2ec>
 800b432:	2b05      	cmp	r3, #5
 800b434:	bfc4      	itt	gt
 800b436:	3b04      	subgt	r3, #4
 800b438:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b43a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b43c:	f1a3 0302 	sub.w	r3, r3, #2
 800b440:	bfcc      	ite	gt
 800b442:	2400      	movgt	r4, #0
 800b444:	2401      	movle	r4, #1
 800b446:	2b03      	cmp	r3, #3
 800b448:	f200 808c 	bhi.w	800b564 <_dtoa_r+0x304>
 800b44c:	e8df f003 	tbb	[pc, r3]
 800b450:	5b4d4f2d 	.word	0x5b4d4f2d
 800b454:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b458:	441c      	add	r4, r3
 800b45a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b45e:	2b20      	cmp	r3, #32
 800b460:	bfc3      	ittte	gt
 800b462:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b466:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b46a:	fa09 f303 	lslgt.w	r3, r9, r3
 800b46e:	f1c3 0320 	rsble	r3, r3, #32
 800b472:	bfc6      	itte	gt
 800b474:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b478:	4318      	orrgt	r0, r3
 800b47a:	fa06 f003 	lslle.w	r0, r6, r3
 800b47e:	f7f5 f829 	bl	80004d4 <__aeabi_ui2d>
 800b482:	2301      	movs	r3, #1
 800b484:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b488:	3c01      	subs	r4, #1
 800b48a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b48c:	e770      	b.n	800b370 <_dtoa_r+0x110>
 800b48e:	2301      	movs	r3, #1
 800b490:	e7b3      	b.n	800b3fa <_dtoa_r+0x19a>
 800b492:	900f      	str	r0, [sp, #60]	; 0x3c
 800b494:	e7b2      	b.n	800b3fc <_dtoa_r+0x19c>
 800b496:	9b06      	ldr	r3, [sp, #24]
 800b498:	eba3 0309 	sub.w	r3, r3, r9
 800b49c:	9306      	str	r3, [sp, #24]
 800b49e:	f1c9 0300 	rsb	r3, r9, #0
 800b4a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	930e      	str	r3, [sp, #56]	; 0x38
 800b4a8:	e7bf      	b.n	800b42a <_dtoa_r+0x1ca>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dc5a      	bgt.n	800b56a <_dtoa_r+0x30a>
 800b4b4:	f04f 0b01 	mov.w	fp, #1
 800b4b8:	f8cd b008 	str.w	fp, [sp, #8]
 800b4bc:	465b      	mov	r3, fp
 800b4be:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800b4c2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	6042      	str	r2, [r0, #4]
 800b4c8:	2204      	movs	r2, #4
 800b4ca:	f102 0614 	add.w	r6, r2, #20
 800b4ce:	429e      	cmp	r6, r3
 800b4d0:	6841      	ldr	r1, [r0, #4]
 800b4d2:	d950      	bls.n	800b576 <_dtoa_r+0x316>
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f001 fa93 	bl	800ca00 <_Balloc>
 800b4da:	9008      	str	r0, [sp, #32]
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d14e      	bne.n	800b57e <_dtoa_r+0x31e>
 800b4e0:	4b19      	ldr	r3, [pc, #100]	; (800b548 <_dtoa_r+0x2e8>)
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b4e8:	e6ce      	b.n	800b288 <_dtoa_r+0x28>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e7de      	b.n	800b4ac <_dtoa_r+0x24c>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4f4:	eb09 0b03 	add.w	fp, r9, r3
 800b4f8:	f10b 0301 	add.w	r3, fp, #1
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	9302      	str	r3, [sp, #8]
 800b500:	bfb8      	it	lt
 800b502:	2301      	movlt	r3, #1
 800b504:	e7dd      	b.n	800b4c2 <_dtoa_r+0x262>
 800b506:	2301      	movs	r3, #1
 800b508:	e7f2      	b.n	800b4f0 <_dtoa_r+0x290>
 800b50a:	bf00      	nop
 800b50c:	f3af 8000 	nop.w
 800b510:	636f4361 	.word	0x636f4361
 800b514:	3fd287a7 	.word	0x3fd287a7
 800b518:	8b60c8b3 	.word	0x8b60c8b3
 800b51c:	3fc68a28 	.word	0x3fc68a28
 800b520:	509f79fb 	.word	0x509f79fb
 800b524:	3fd34413 	.word	0x3fd34413
 800b528:	0800eb4e 	.word	0x0800eb4e
 800b52c:	0800eb65 	.word	0x0800eb65
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	0800eb4a 	.word	0x0800eb4a
 800b538:	0800eb41 	.word	0x0800eb41
 800b53c:	0800e331 	.word	0x0800e331
 800b540:	3ff80000 	.word	0x3ff80000
 800b544:	0800ed40 	.word	0x0800ed40
 800b548:	0800ebc4 	.word	0x0800ebc4
 800b54c:	2401      	movs	r4, #1
 800b54e:	2300      	movs	r3, #0
 800b550:	9322      	str	r3, [sp, #136]	; 0x88
 800b552:	940b      	str	r4, [sp, #44]	; 0x2c
 800b554:	f04f 3bff 	mov.w	fp, #4294967295
 800b558:	2200      	movs	r2, #0
 800b55a:	f8cd b008 	str.w	fp, [sp, #8]
 800b55e:	2312      	movs	r3, #18
 800b560:	9223      	str	r2, [sp, #140]	; 0x8c
 800b562:	e7ae      	b.n	800b4c2 <_dtoa_r+0x262>
 800b564:	2301      	movs	r3, #1
 800b566:	930b      	str	r3, [sp, #44]	; 0x2c
 800b568:	e7f4      	b.n	800b554 <_dtoa_r+0x2f4>
 800b56a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b56e:	f8cd b008 	str.w	fp, [sp, #8]
 800b572:	465b      	mov	r3, fp
 800b574:	e7a5      	b.n	800b4c2 <_dtoa_r+0x262>
 800b576:	3101      	adds	r1, #1
 800b578:	6041      	str	r1, [r0, #4]
 800b57a:	0052      	lsls	r2, r2, #1
 800b57c:	e7a5      	b.n	800b4ca <_dtoa_r+0x26a>
 800b57e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b580:	9a08      	ldr	r2, [sp, #32]
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	9b02      	ldr	r3, [sp, #8]
 800b586:	2b0e      	cmp	r3, #14
 800b588:	f200 80a8 	bhi.w	800b6dc <_dtoa_r+0x47c>
 800b58c:	2c00      	cmp	r4, #0
 800b58e:	f000 80a5 	beq.w	800b6dc <_dtoa_r+0x47c>
 800b592:	f1b9 0f00 	cmp.w	r9, #0
 800b596:	dd34      	ble.n	800b602 <_dtoa_r+0x3a2>
 800b598:	4a9a      	ldr	r2, [pc, #616]	; (800b804 <_dtoa_r+0x5a4>)
 800b59a:	f009 030f 	and.w	r3, r9, #15
 800b59e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5a6:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b5aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b5ae:	ea4f 1429 	mov.w	r4, r9, asr #4
 800b5b2:	d016      	beq.n	800b5e2 <_dtoa_r+0x382>
 800b5b4:	4b94      	ldr	r3, [pc, #592]	; (800b808 <_dtoa_r+0x5a8>)
 800b5b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b5ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5be:	f7f5 f92d 	bl	800081c <__aeabi_ddiv>
 800b5c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5c6:	f004 040f 	and.w	r4, r4, #15
 800b5ca:	2703      	movs	r7, #3
 800b5cc:	4e8e      	ldr	r6, [pc, #568]	; (800b808 <_dtoa_r+0x5a8>)
 800b5ce:	b954      	cbnz	r4, 800b5e6 <_dtoa_r+0x386>
 800b5d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5d8:	f7f5 f920 	bl	800081c <__aeabi_ddiv>
 800b5dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5e0:	e029      	b.n	800b636 <_dtoa_r+0x3d6>
 800b5e2:	2702      	movs	r7, #2
 800b5e4:	e7f2      	b.n	800b5cc <_dtoa_r+0x36c>
 800b5e6:	07e1      	lsls	r1, r4, #31
 800b5e8:	d508      	bpl.n	800b5fc <_dtoa_r+0x39c>
 800b5ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5f2:	f7f4 ffe9 	bl	80005c8 <__aeabi_dmul>
 800b5f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b5fa:	3701      	adds	r7, #1
 800b5fc:	1064      	asrs	r4, r4, #1
 800b5fe:	3608      	adds	r6, #8
 800b600:	e7e5      	b.n	800b5ce <_dtoa_r+0x36e>
 800b602:	f000 80a5 	beq.w	800b750 <_dtoa_r+0x4f0>
 800b606:	f1c9 0400 	rsb	r4, r9, #0
 800b60a:	4b7e      	ldr	r3, [pc, #504]	; (800b804 <_dtoa_r+0x5a4>)
 800b60c:	4e7e      	ldr	r6, [pc, #504]	; (800b808 <_dtoa_r+0x5a8>)
 800b60e:	f004 020f 	and.w	r2, r4, #15
 800b612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b61e:	f7f4 ffd3 	bl	80005c8 <__aeabi_dmul>
 800b622:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b626:	1124      	asrs	r4, r4, #4
 800b628:	2300      	movs	r3, #0
 800b62a:	2702      	movs	r7, #2
 800b62c:	2c00      	cmp	r4, #0
 800b62e:	f040 8084 	bne.w	800b73a <_dtoa_r+0x4da>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1d2      	bne.n	800b5dc <_dtoa_r+0x37c>
 800b636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 808b 	beq.w	800b754 <_dtoa_r+0x4f4>
 800b63e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b642:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b64a:	4b70      	ldr	r3, [pc, #448]	; (800b80c <_dtoa_r+0x5ac>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	f7f5 fa2d 	bl	8000aac <__aeabi_dcmplt>
 800b652:	2800      	cmp	r0, #0
 800b654:	d07e      	beq.n	800b754 <_dtoa_r+0x4f4>
 800b656:	9b02      	ldr	r3, [sp, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d07b      	beq.n	800b754 <_dtoa_r+0x4f4>
 800b65c:	f1bb 0f00 	cmp.w	fp, #0
 800b660:	dd38      	ble.n	800b6d4 <_dtoa_r+0x474>
 800b662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b666:	4b6a      	ldr	r3, [pc, #424]	; (800b810 <_dtoa_r+0x5b0>)
 800b668:	2200      	movs	r2, #0
 800b66a:	f7f4 ffad 	bl	80005c8 <__aeabi_dmul>
 800b66e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b672:	f109 38ff 	add.w	r8, r9, #4294967295
 800b676:	3701      	adds	r7, #1
 800b678:	465c      	mov	r4, fp
 800b67a:	4638      	mov	r0, r7
 800b67c:	f7f4 ff3a 	bl	80004f4 <__aeabi_i2d>
 800b680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b684:	f7f4 ffa0 	bl	80005c8 <__aeabi_dmul>
 800b688:	4b62      	ldr	r3, [pc, #392]	; (800b814 <_dtoa_r+0x5b4>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	f7f4 fde6 	bl	800025c <__adddf3>
 800b690:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b694:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b698:	9611      	str	r6, [sp, #68]	; 0x44
 800b69a:	2c00      	cmp	r4, #0
 800b69c:	d15d      	bne.n	800b75a <_dtoa_r+0x4fa>
 800b69e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6a2:	4b5d      	ldr	r3, [pc, #372]	; (800b818 <_dtoa_r+0x5b8>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f7f4 fdd7 	bl	8000258 <__aeabi_dsub>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6b4:	4633      	mov	r3, r6
 800b6b6:	f7f5 fa17 	bl	8000ae8 <__aeabi_dcmpgt>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	f040 829e 	bne.w	800bbfc <_dtoa_r+0x99c>
 800b6c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b6ca:	f7f5 f9ef 	bl	8000aac <__aeabi_dcmplt>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	f040 8292 	bne.w	800bbf8 <_dtoa_r+0x998>
 800b6d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b6d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b6dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f2c0 8153 	blt.w	800b98a <_dtoa_r+0x72a>
 800b6e4:	f1b9 0f0e 	cmp.w	r9, #14
 800b6e8:	f300 814f 	bgt.w	800b98a <_dtoa_r+0x72a>
 800b6ec:	4b45      	ldr	r3, [pc, #276]	; (800b804 <_dtoa_r+0x5a4>)
 800b6ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b6f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b6fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f280 80db 	bge.w	800b8b8 <_dtoa_r+0x658>
 800b702:	9b02      	ldr	r3, [sp, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	f300 80d7 	bgt.w	800b8b8 <_dtoa_r+0x658>
 800b70a:	f040 8274 	bne.w	800bbf6 <_dtoa_r+0x996>
 800b70e:	4b42      	ldr	r3, [pc, #264]	; (800b818 <_dtoa_r+0x5b8>)
 800b710:	2200      	movs	r2, #0
 800b712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b716:	f7f4 ff57 	bl	80005c8 <__aeabi_dmul>
 800b71a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b71e:	f7f5 f9d9 	bl	8000ad4 <__aeabi_dcmpge>
 800b722:	9c02      	ldr	r4, [sp, #8]
 800b724:	4626      	mov	r6, r4
 800b726:	2800      	cmp	r0, #0
 800b728:	f040 824a 	bne.w	800bbc0 <_dtoa_r+0x960>
 800b72c:	9f08      	ldr	r7, [sp, #32]
 800b72e:	2331      	movs	r3, #49	; 0x31
 800b730:	f807 3b01 	strb.w	r3, [r7], #1
 800b734:	f109 0901 	add.w	r9, r9, #1
 800b738:	e246      	b.n	800bbc8 <_dtoa_r+0x968>
 800b73a:	07e2      	lsls	r2, r4, #31
 800b73c:	d505      	bpl.n	800b74a <_dtoa_r+0x4ea>
 800b73e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b742:	f7f4 ff41 	bl	80005c8 <__aeabi_dmul>
 800b746:	3701      	adds	r7, #1
 800b748:	2301      	movs	r3, #1
 800b74a:	1064      	asrs	r4, r4, #1
 800b74c:	3608      	adds	r6, #8
 800b74e:	e76d      	b.n	800b62c <_dtoa_r+0x3cc>
 800b750:	2702      	movs	r7, #2
 800b752:	e770      	b.n	800b636 <_dtoa_r+0x3d6>
 800b754:	9c02      	ldr	r4, [sp, #8]
 800b756:	46c8      	mov	r8, r9
 800b758:	e78f      	b.n	800b67a <_dtoa_r+0x41a>
 800b75a:	9908      	ldr	r1, [sp, #32]
 800b75c:	4b29      	ldr	r3, [pc, #164]	; (800b804 <_dtoa_r+0x5a4>)
 800b75e:	4421      	add	r1, r4
 800b760:	9112      	str	r1, [sp, #72]	; 0x48
 800b762:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b764:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b768:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b76c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b770:	2900      	cmp	r1, #0
 800b772:	d055      	beq.n	800b820 <_dtoa_r+0x5c0>
 800b774:	4929      	ldr	r1, [pc, #164]	; (800b81c <_dtoa_r+0x5bc>)
 800b776:	2000      	movs	r0, #0
 800b778:	f7f5 f850 	bl	800081c <__aeabi_ddiv>
 800b77c:	463b      	mov	r3, r7
 800b77e:	4632      	mov	r2, r6
 800b780:	f7f4 fd6a 	bl	8000258 <__aeabi_dsub>
 800b784:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b788:	9f08      	ldr	r7, [sp, #32]
 800b78a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b78e:	f7f5 f9cb 	bl	8000b28 <__aeabi_d2iz>
 800b792:	4604      	mov	r4, r0
 800b794:	f7f4 feae 	bl	80004f4 <__aeabi_i2d>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7a0:	f7f4 fd5a 	bl	8000258 <__aeabi_dsub>
 800b7a4:	3430      	adds	r4, #48	; 0x30
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7ae:	f807 4b01 	strb.w	r4, [r7], #1
 800b7b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b7b6:	f7f5 f979 	bl	8000aac <__aeabi_dcmplt>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d174      	bne.n	800b8a8 <_dtoa_r+0x648>
 800b7be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7c2:	4912      	ldr	r1, [pc, #72]	; (800b80c <_dtoa_r+0x5ac>)
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	f7f4 fd47 	bl	8000258 <__aeabi_dsub>
 800b7ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b7ce:	f7f5 f96d 	bl	8000aac <__aeabi_dcmplt>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	f040 80b6 	bne.w	800b944 <_dtoa_r+0x6e4>
 800b7d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7da:	429f      	cmp	r7, r3
 800b7dc:	f43f af7a 	beq.w	800b6d4 <_dtoa_r+0x474>
 800b7e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <_dtoa_r+0x5b0>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f7f4 feee 	bl	80005c8 <__aeabi_dmul>
 800b7ec:	4b08      	ldr	r3, [pc, #32]	; (800b810 <_dtoa_r+0x5b0>)
 800b7ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7f8:	f7f4 fee6 	bl	80005c8 <__aeabi_dmul>
 800b7fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b800:	e7c3      	b.n	800b78a <_dtoa_r+0x52a>
 800b802:	bf00      	nop
 800b804:	0800ed40 	.word	0x0800ed40
 800b808:	0800ed18 	.word	0x0800ed18
 800b80c:	3ff00000 	.word	0x3ff00000
 800b810:	40240000 	.word	0x40240000
 800b814:	401c0000 	.word	0x401c0000
 800b818:	40140000 	.word	0x40140000
 800b81c:	3fe00000 	.word	0x3fe00000
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f7f4 fed0 	bl	80005c8 <__aeabi_dmul>
 800b828:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b82c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b82e:	9c08      	ldr	r4, [sp, #32]
 800b830:	9314      	str	r3, [sp, #80]	; 0x50
 800b832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b836:	f7f5 f977 	bl	8000b28 <__aeabi_d2iz>
 800b83a:	9015      	str	r0, [sp, #84]	; 0x54
 800b83c:	f7f4 fe5a 	bl	80004f4 <__aeabi_i2d>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b848:	f7f4 fd06 	bl	8000258 <__aeabi_dsub>
 800b84c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b84e:	3330      	adds	r3, #48	; 0x30
 800b850:	f804 3b01 	strb.w	r3, [r4], #1
 800b854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b856:	429c      	cmp	r4, r3
 800b858:	4606      	mov	r6, r0
 800b85a:	460f      	mov	r7, r1
 800b85c:	f04f 0200 	mov.w	r2, #0
 800b860:	d124      	bne.n	800b8ac <_dtoa_r+0x64c>
 800b862:	4bb2      	ldr	r3, [pc, #712]	; (800bb2c <_dtoa_r+0x8cc>)
 800b864:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b868:	f7f4 fcf8 	bl	800025c <__adddf3>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	4630      	mov	r0, r6
 800b872:	4639      	mov	r1, r7
 800b874:	f7f5 f938 	bl	8000ae8 <__aeabi_dcmpgt>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d162      	bne.n	800b942 <_dtoa_r+0x6e2>
 800b87c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b880:	49aa      	ldr	r1, [pc, #680]	; (800bb2c <_dtoa_r+0x8cc>)
 800b882:	2000      	movs	r0, #0
 800b884:	f7f4 fce8 	bl	8000258 <__aeabi_dsub>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4630      	mov	r0, r6
 800b88e:	4639      	mov	r1, r7
 800b890:	f7f5 f90c 	bl	8000aac <__aeabi_dcmplt>
 800b894:	2800      	cmp	r0, #0
 800b896:	f43f af1d 	beq.w	800b6d4 <_dtoa_r+0x474>
 800b89a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b89c:	1e7b      	subs	r3, r7, #1
 800b89e:	9314      	str	r3, [sp, #80]	; 0x50
 800b8a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b8a4:	2b30      	cmp	r3, #48	; 0x30
 800b8a6:	d0f8      	beq.n	800b89a <_dtoa_r+0x63a>
 800b8a8:	46c1      	mov	r9, r8
 800b8aa:	e03a      	b.n	800b922 <_dtoa_r+0x6c2>
 800b8ac:	4ba0      	ldr	r3, [pc, #640]	; (800bb30 <_dtoa_r+0x8d0>)
 800b8ae:	f7f4 fe8b 	bl	80005c8 <__aeabi_dmul>
 800b8b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8b6:	e7bc      	b.n	800b832 <_dtoa_r+0x5d2>
 800b8b8:	9f08      	ldr	r7, [sp, #32]
 800b8ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8c2:	f7f4 ffab 	bl	800081c <__aeabi_ddiv>
 800b8c6:	f7f5 f92f 	bl	8000b28 <__aeabi_d2iz>
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	f7f4 fe12 	bl	80004f4 <__aeabi_i2d>
 800b8d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8d4:	f7f4 fe78 	bl	80005c8 <__aeabi_dmul>
 800b8d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4602      	mov	r2, r0
 800b8e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8e4:	f7f4 fcb8 	bl	8000258 <__aeabi_dsub>
 800b8e8:	f807 6b01 	strb.w	r6, [r7], #1
 800b8ec:	9e08      	ldr	r6, [sp, #32]
 800b8ee:	9b02      	ldr	r3, [sp, #8]
 800b8f0:	1bbe      	subs	r6, r7, r6
 800b8f2:	42b3      	cmp	r3, r6
 800b8f4:	d13a      	bne.n	800b96c <_dtoa_r+0x70c>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	f7f4 fcaf 	bl	800025c <__adddf3>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b90a:	f7f5 f8ed 	bl	8000ae8 <__aeabi_dcmpgt>
 800b90e:	bb58      	cbnz	r0, 800b968 <_dtoa_r+0x708>
 800b910:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b918:	f7f5 f8be 	bl	8000a98 <__aeabi_dcmpeq>
 800b91c:	b108      	cbz	r0, 800b922 <_dtoa_r+0x6c2>
 800b91e:	07e1      	lsls	r1, r4, #31
 800b920:	d422      	bmi.n	800b968 <_dtoa_r+0x708>
 800b922:	4628      	mov	r0, r5
 800b924:	4651      	mov	r1, sl
 800b926:	f001 f8ab 	bl	800ca80 <_Bfree>
 800b92a:	2300      	movs	r3, #0
 800b92c:	703b      	strb	r3, [r7, #0]
 800b92e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b930:	f109 0001 	add.w	r0, r9, #1
 800b934:	6018      	str	r0, [r3, #0]
 800b936:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f43f acde 	beq.w	800b2fa <_dtoa_r+0x9a>
 800b93e:	601f      	str	r7, [r3, #0]
 800b940:	e4db      	b.n	800b2fa <_dtoa_r+0x9a>
 800b942:	4627      	mov	r7, r4
 800b944:	463b      	mov	r3, r7
 800b946:	461f      	mov	r7, r3
 800b948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b94c:	2a39      	cmp	r2, #57	; 0x39
 800b94e:	d107      	bne.n	800b960 <_dtoa_r+0x700>
 800b950:	9a08      	ldr	r2, [sp, #32]
 800b952:	429a      	cmp	r2, r3
 800b954:	d1f7      	bne.n	800b946 <_dtoa_r+0x6e6>
 800b956:	9908      	ldr	r1, [sp, #32]
 800b958:	2230      	movs	r2, #48	; 0x30
 800b95a:	f108 0801 	add.w	r8, r8, #1
 800b95e:	700a      	strb	r2, [r1, #0]
 800b960:	781a      	ldrb	r2, [r3, #0]
 800b962:	3201      	adds	r2, #1
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	e79f      	b.n	800b8a8 <_dtoa_r+0x648>
 800b968:	46c8      	mov	r8, r9
 800b96a:	e7eb      	b.n	800b944 <_dtoa_r+0x6e4>
 800b96c:	4b70      	ldr	r3, [pc, #448]	; (800bb30 <_dtoa_r+0x8d0>)
 800b96e:	2200      	movs	r2, #0
 800b970:	f7f4 fe2a 	bl	80005c8 <__aeabi_dmul>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b97c:	2200      	movs	r2, #0
 800b97e:	2300      	movs	r3, #0
 800b980:	f7f5 f88a 	bl	8000a98 <__aeabi_dcmpeq>
 800b984:	2800      	cmp	r0, #0
 800b986:	d098      	beq.n	800b8ba <_dtoa_r+0x65a>
 800b988:	e7cb      	b.n	800b922 <_dtoa_r+0x6c2>
 800b98a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b98c:	2a00      	cmp	r2, #0
 800b98e:	f000 80d1 	beq.w	800bb34 <_dtoa_r+0x8d4>
 800b992:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b994:	2a01      	cmp	r2, #1
 800b996:	f300 80af 	bgt.w	800baf8 <_dtoa_r+0x898>
 800b99a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b99c:	2a00      	cmp	r2, #0
 800b99e:	f000 80a7 	beq.w	800baf0 <_dtoa_r+0x890>
 800b9a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b9a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b9a8:	9f06      	ldr	r7, [sp, #24]
 800b9aa:	9a06      	ldr	r2, [sp, #24]
 800b9ac:	441a      	add	r2, r3
 800b9ae:	9206      	str	r2, [sp, #24]
 800b9b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	441a      	add	r2, r3
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ba:	f001 f965 	bl	800cc88 <__i2b>
 800b9be:	4606      	mov	r6, r0
 800b9c0:	2f00      	cmp	r7, #0
 800b9c2:	dd0c      	ble.n	800b9de <_dtoa_r+0x77e>
 800b9c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	dd09      	ble.n	800b9de <_dtoa_r+0x77e>
 800b9ca:	42bb      	cmp	r3, r7
 800b9cc:	9a06      	ldr	r2, [sp, #24]
 800b9ce:	bfa8      	it	ge
 800b9d0:	463b      	movge	r3, r7
 800b9d2:	1ad2      	subs	r2, r2, r3
 800b9d4:	9206      	str	r2, [sp, #24]
 800b9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d8:	1aff      	subs	r7, r7, r3
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e0:	b1f3      	cbz	r3, 800ba20 <_dtoa_r+0x7c0>
 800b9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 80a9 	beq.w	800bb3c <_dtoa_r+0x8dc>
 800b9ea:	2c00      	cmp	r4, #0
 800b9ec:	dd10      	ble.n	800ba10 <_dtoa_r+0x7b0>
 800b9ee:	4631      	mov	r1, r6
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f001 fa04 	bl	800ce00 <__pow5mult>
 800b9f8:	4652      	mov	r2, sl
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f001 f958 	bl	800ccb4 <__multiply>
 800ba04:	4651      	mov	r1, sl
 800ba06:	4680      	mov	r8, r0
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f001 f839 	bl	800ca80 <_Bfree>
 800ba0e:	46c2      	mov	sl, r8
 800ba10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba12:	1b1a      	subs	r2, r3, r4
 800ba14:	d004      	beq.n	800ba20 <_dtoa_r+0x7c0>
 800ba16:	4651      	mov	r1, sl
 800ba18:	4628      	mov	r0, r5
 800ba1a:	f001 f9f1 	bl	800ce00 <__pow5mult>
 800ba1e:	4682      	mov	sl, r0
 800ba20:	2101      	movs	r1, #1
 800ba22:	4628      	mov	r0, r5
 800ba24:	f001 f930 	bl	800cc88 <__i2b>
 800ba28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	f340 8087 	ble.w	800bb40 <_dtoa_r+0x8e0>
 800ba32:	461a      	mov	r2, r3
 800ba34:	4601      	mov	r1, r0
 800ba36:	4628      	mov	r0, r5
 800ba38:	f001 f9e2 	bl	800ce00 <__pow5mult>
 800ba3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	4604      	mov	r4, r0
 800ba42:	f340 8080 	ble.w	800bb46 <_dtoa_r+0x8e6>
 800ba46:	f04f 0800 	mov.w	r8, #0
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba50:	6918      	ldr	r0, [r3, #16]
 800ba52:	f001 f8cb 	bl	800cbec <__hi0bits>
 800ba56:	f1c0 0020 	rsb	r0, r0, #32
 800ba5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba5c:	4418      	add	r0, r3
 800ba5e:	f010 001f 	ands.w	r0, r0, #31
 800ba62:	f000 8092 	beq.w	800bb8a <_dtoa_r+0x92a>
 800ba66:	f1c0 0320 	rsb	r3, r0, #32
 800ba6a:	2b04      	cmp	r3, #4
 800ba6c:	f340 808a 	ble.w	800bb84 <_dtoa_r+0x924>
 800ba70:	f1c0 001c 	rsb	r0, r0, #28
 800ba74:	9b06      	ldr	r3, [sp, #24]
 800ba76:	4403      	add	r3, r0
 800ba78:	9306      	str	r3, [sp, #24]
 800ba7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba7c:	4403      	add	r3, r0
 800ba7e:	4407      	add	r7, r0
 800ba80:	9309      	str	r3, [sp, #36]	; 0x24
 800ba82:	9b06      	ldr	r3, [sp, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dd05      	ble.n	800ba94 <_dtoa_r+0x834>
 800ba88:	4651      	mov	r1, sl
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f001 fa11 	bl	800ceb4 <__lshift>
 800ba92:	4682      	mov	sl, r0
 800ba94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dd05      	ble.n	800baa6 <_dtoa_r+0x846>
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f001 fa08 	bl	800ceb4 <__lshift>
 800baa4:	4604      	mov	r4, r0
 800baa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d070      	beq.n	800bb8e <_dtoa_r+0x92e>
 800baac:	4621      	mov	r1, r4
 800baae:	4650      	mov	r0, sl
 800bab0:	f001 fa6c 	bl	800cf8c <__mcmp>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	da6a      	bge.n	800bb8e <_dtoa_r+0x92e>
 800bab8:	2300      	movs	r3, #0
 800baba:	4651      	mov	r1, sl
 800babc:	220a      	movs	r2, #10
 800babe:	4628      	mov	r0, r5
 800bac0:	f001 f800 	bl	800cac4 <__multadd>
 800bac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bac6:	f109 39ff 	add.w	r9, r9, #4294967295
 800baca:	4682      	mov	sl, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f000 8193 	beq.w	800bdf8 <_dtoa_r+0xb98>
 800bad2:	4631      	mov	r1, r6
 800bad4:	2300      	movs	r3, #0
 800bad6:	220a      	movs	r2, #10
 800bad8:	4628      	mov	r0, r5
 800bada:	f000 fff3 	bl	800cac4 <__multadd>
 800bade:	f1bb 0f00 	cmp.w	fp, #0
 800bae2:	4606      	mov	r6, r0
 800bae4:	f300 8093 	bgt.w	800bc0e <_dtoa_r+0x9ae>
 800bae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800baea:	2b02      	cmp	r3, #2
 800baec:	dc57      	bgt.n	800bb9e <_dtoa_r+0x93e>
 800baee:	e08e      	b.n	800bc0e <_dtoa_r+0x9ae>
 800baf0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800baf2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800baf6:	e756      	b.n	800b9a6 <_dtoa_r+0x746>
 800baf8:	9b02      	ldr	r3, [sp, #8]
 800bafa:	1e5c      	subs	r4, r3, #1
 800bafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bafe:	42a3      	cmp	r3, r4
 800bb00:	bfbf      	itttt	lt
 800bb02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb04:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bb06:	1ae2      	sublt	r2, r4, r3
 800bb08:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bb0a:	bfb6      	itet	lt
 800bb0c:	189b      	addlt	r3, r3, r2
 800bb0e:	1b1c      	subge	r4, r3, r4
 800bb10:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bb12:	9b02      	ldr	r3, [sp, #8]
 800bb14:	bfb8      	it	lt
 800bb16:	2400      	movlt	r4, #0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	bfb9      	ittee	lt
 800bb1c:	9b06      	ldrlt	r3, [sp, #24]
 800bb1e:	9a02      	ldrlt	r2, [sp, #8]
 800bb20:	9f06      	ldrge	r7, [sp, #24]
 800bb22:	9b02      	ldrge	r3, [sp, #8]
 800bb24:	bfbc      	itt	lt
 800bb26:	1a9f      	sublt	r7, r3, r2
 800bb28:	2300      	movlt	r3, #0
 800bb2a:	e73e      	b.n	800b9aa <_dtoa_r+0x74a>
 800bb2c:	3fe00000 	.word	0x3fe00000
 800bb30:	40240000 	.word	0x40240000
 800bb34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bb36:	9f06      	ldr	r7, [sp, #24]
 800bb38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bb3a:	e741      	b.n	800b9c0 <_dtoa_r+0x760>
 800bb3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb3e:	e76a      	b.n	800ba16 <_dtoa_r+0x7b6>
 800bb40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	dc19      	bgt.n	800bb7a <_dtoa_r+0x91a>
 800bb46:	9b04      	ldr	r3, [sp, #16]
 800bb48:	b9bb      	cbnz	r3, 800bb7a <_dtoa_r+0x91a>
 800bb4a:	9b05      	ldr	r3, [sp, #20]
 800bb4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb50:	b99b      	cbnz	r3, 800bb7a <_dtoa_r+0x91a>
 800bb52:	9b05      	ldr	r3, [sp, #20]
 800bb54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb58:	0d1b      	lsrs	r3, r3, #20
 800bb5a:	051b      	lsls	r3, r3, #20
 800bb5c:	b183      	cbz	r3, 800bb80 <_dtoa_r+0x920>
 800bb5e:	9b06      	ldr	r3, [sp, #24]
 800bb60:	3301      	adds	r3, #1
 800bb62:	9306      	str	r3, [sp, #24]
 800bb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb66:	3301      	adds	r3, #1
 800bb68:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6a:	f04f 0801 	mov.w	r8, #1
 800bb6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f47f af6a 	bne.w	800ba4a <_dtoa_r+0x7ea>
 800bb76:	2001      	movs	r0, #1
 800bb78:	e76f      	b.n	800ba5a <_dtoa_r+0x7fa>
 800bb7a:	f04f 0800 	mov.w	r8, #0
 800bb7e:	e7f6      	b.n	800bb6e <_dtoa_r+0x90e>
 800bb80:	4698      	mov	r8, r3
 800bb82:	e7f4      	b.n	800bb6e <_dtoa_r+0x90e>
 800bb84:	f43f af7d 	beq.w	800ba82 <_dtoa_r+0x822>
 800bb88:	4618      	mov	r0, r3
 800bb8a:	301c      	adds	r0, #28
 800bb8c:	e772      	b.n	800ba74 <_dtoa_r+0x814>
 800bb8e:	9b02      	ldr	r3, [sp, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	dc36      	bgt.n	800bc02 <_dtoa_r+0x9a2>
 800bb94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	dd33      	ble.n	800bc02 <_dtoa_r+0x9a2>
 800bb9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bb9e:	f1bb 0f00 	cmp.w	fp, #0
 800bba2:	d10d      	bne.n	800bbc0 <_dtoa_r+0x960>
 800bba4:	4621      	mov	r1, r4
 800bba6:	465b      	mov	r3, fp
 800bba8:	2205      	movs	r2, #5
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f000 ff8a 	bl	800cac4 <__multadd>
 800bbb0:	4601      	mov	r1, r0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4650      	mov	r0, sl
 800bbb6:	f001 f9e9 	bl	800cf8c <__mcmp>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	f73f adb6 	bgt.w	800b72c <_dtoa_r+0x4cc>
 800bbc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bbc2:	9f08      	ldr	r7, [sp, #32]
 800bbc4:	ea6f 0903 	mvn.w	r9, r3
 800bbc8:	f04f 0800 	mov.w	r8, #0
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f000 ff56 	bl	800ca80 <_Bfree>
 800bbd4:	2e00      	cmp	r6, #0
 800bbd6:	f43f aea4 	beq.w	800b922 <_dtoa_r+0x6c2>
 800bbda:	f1b8 0f00 	cmp.w	r8, #0
 800bbde:	d005      	beq.n	800bbec <_dtoa_r+0x98c>
 800bbe0:	45b0      	cmp	r8, r6
 800bbe2:	d003      	beq.n	800bbec <_dtoa_r+0x98c>
 800bbe4:	4641      	mov	r1, r8
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f000 ff4a 	bl	800ca80 <_Bfree>
 800bbec:	4631      	mov	r1, r6
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 ff46 	bl	800ca80 <_Bfree>
 800bbf4:	e695      	b.n	800b922 <_dtoa_r+0x6c2>
 800bbf6:	2400      	movs	r4, #0
 800bbf8:	4626      	mov	r6, r4
 800bbfa:	e7e1      	b.n	800bbc0 <_dtoa_r+0x960>
 800bbfc:	46c1      	mov	r9, r8
 800bbfe:	4626      	mov	r6, r4
 800bc00:	e594      	b.n	800b72c <_dtoa_r+0x4cc>
 800bc02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc04:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 80fc 	beq.w	800be06 <_dtoa_r+0xba6>
 800bc0e:	2f00      	cmp	r7, #0
 800bc10:	dd05      	ble.n	800bc1e <_dtoa_r+0x9be>
 800bc12:	4631      	mov	r1, r6
 800bc14:	463a      	mov	r2, r7
 800bc16:	4628      	mov	r0, r5
 800bc18:	f001 f94c 	bl	800ceb4 <__lshift>
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	f1b8 0f00 	cmp.w	r8, #0
 800bc22:	d05c      	beq.n	800bcde <_dtoa_r+0xa7e>
 800bc24:	6871      	ldr	r1, [r6, #4]
 800bc26:	4628      	mov	r0, r5
 800bc28:	f000 feea 	bl	800ca00 <_Balloc>
 800bc2c:	4607      	mov	r7, r0
 800bc2e:	b928      	cbnz	r0, 800bc3c <_dtoa_r+0x9dc>
 800bc30:	4b7f      	ldr	r3, [pc, #508]	; (800be30 <_dtoa_r+0xbd0>)
 800bc32:	4602      	mov	r2, r0
 800bc34:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc38:	f7ff bb26 	b.w	800b288 <_dtoa_r+0x28>
 800bc3c:	6932      	ldr	r2, [r6, #16]
 800bc3e:	3202      	adds	r2, #2
 800bc40:	0092      	lsls	r2, r2, #2
 800bc42:	f106 010c 	add.w	r1, r6, #12
 800bc46:	300c      	adds	r0, #12
 800bc48:	f7fd fa6c 	bl	8009124 <memcpy>
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	4639      	mov	r1, r7
 800bc50:	4628      	mov	r0, r5
 800bc52:	f001 f92f 	bl	800ceb4 <__lshift>
 800bc56:	9b08      	ldr	r3, [sp, #32]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	9302      	str	r3, [sp, #8]
 800bc5c:	9b08      	ldr	r3, [sp, #32]
 800bc5e:	445b      	add	r3, fp
 800bc60:	930a      	str	r3, [sp, #40]	; 0x28
 800bc62:	9b04      	ldr	r3, [sp, #16]
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	46b0      	mov	r8, r6
 800bc6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	9b02      	ldr	r3, [sp, #8]
 800bc70:	4621      	mov	r1, r4
 800bc72:	4650      	mov	r0, sl
 800bc74:	f103 3bff 	add.w	fp, r3, #4294967295
 800bc78:	f7ff fa66 	bl	800b148 <quorem>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	3330      	adds	r3, #48	; 0x30
 800bc80:	9004      	str	r0, [sp, #16]
 800bc82:	4641      	mov	r1, r8
 800bc84:	4650      	mov	r0, sl
 800bc86:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc88:	f001 f980 	bl	800cf8c <__mcmp>
 800bc8c:	4632      	mov	r2, r6
 800bc8e:	9006      	str	r0, [sp, #24]
 800bc90:	4621      	mov	r1, r4
 800bc92:	4628      	mov	r0, r5
 800bc94:	f001 f996 	bl	800cfc4 <__mdiff>
 800bc98:	68c2      	ldr	r2, [r0, #12]
 800bc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc9c:	4607      	mov	r7, r0
 800bc9e:	bb02      	cbnz	r2, 800bce2 <_dtoa_r+0xa82>
 800bca0:	4601      	mov	r1, r0
 800bca2:	4650      	mov	r0, sl
 800bca4:	f001 f972 	bl	800cf8c <__mcmp>
 800bca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcaa:	4602      	mov	r2, r0
 800bcac:	4639      	mov	r1, r7
 800bcae:	4628      	mov	r0, r5
 800bcb0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bcb4:	f000 fee4 	bl	800ca80 <_Bfree>
 800bcb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bcba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcbc:	9f02      	ldr	r7, [sp, #8]
 800bcbe:	ea43 0102 	orr.w	r1, r3, r2
 800bcc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc4:	430b      	orrs	r3, r1
 800bcc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcc8:	d10d      	bne.n	800bce6 <_dtoa_r+0xa86>
 800bcca:	2b39      	cmp	r3, #57	; 0x39
 800bccc:	d027      	beq.n	800bd1e <_dtoa_r+0xabe>
 800bcce:	9a06      	ldr	r2, [sp, #24]
 800bcd0:	2a00      	cmp	r2, #0
 800bcd2:	dd01      	ble.n	800bcd8 <_dtoa_r+0xa78>
 800bcd4:	9b04      	ldr	r3, [sp, #16]
 800bcd6:	3331      	adds	r3, #49	; 0x31
 800bcd8:	f88b 3000 	strb.w	r3, [fp]
 800bcdc:	e776      	b.n	800bbcc <_dtoa_r+0x96c>
 800bcde:	4630      	mov	r0, r6
 800bce0:	e7b9      	b.n	800bc56 <_dtoa_r+0x9f6>
 800bce2:	2201      	movs	r2, #1
 800bce4:	e7e2      	b.n	800bcac <_dtoa_r+0xa4c>
 800bce6:	9906      	ldr	r1, [sp, #24]
 800bce8:	2900      	cmp	r1, #0
 800bcea:	db04      	blt.n	800bcf6 <_dtoa_r+0xa96>
 800bcec:	9822      	ldr	r0, [sp, #136]	; 0x88
 800bcee:	4301      	orrs	r1, r0
 800bcf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcf2:	4301      	orrs	r1, r0
 800bcf4:	d120      	bne.n	800bd38 <_dtoa_r+0xad8>
 800bcf6:	2a00      	cmp	r2, #0
 800bcf8:	ddee      	ble.n	800bcd8 <_dtoa_r+0xa78>
 800bcfa:	4651      	mov	r1, sl
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	4628      	mov	r0, r5
 800bd00:	9302      	str	r3, [sp, #8]
 800bd02:	f001 f8d7 	bl	800ceb4 <__lshift>
 800bd06:	4621      	mov	r1, r4
 800bd08:	4682      	mov	sl, r0
 800bd0a:	f001 f93f 	bl	800cf8c <__mcmp>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	9b02      	ldr	r3, [sp, #8]
 800bd12:	dc02      	bgt.n	800bd1a <_dtoa_r+0xaba>
 800bd14:	d1e0      	bne.n	800bcd8 <_dtoa_r+0xa78>
 800bd16:	07da      	lsls	r2, r3, #31
 800bd18:	d5de      	bpl.n	800bcd8 <_dtoa_r+0xa78>
 800bd1a:	2b39      	cmp	r3, #57	; 0x39
 800bd1c:	d1da      	bne.n	800bcd4 <_dtoa_r+0xa74>
 800bd1e:	2339      	movs	r3, #57	; 0x39
 800bd20:	f88b 3000 	strb.w	r3, [fp]
 800bd24:	463b      	mov	r3, r7
 800bd26:	461f      	mov	r7, r3
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bd2e:	2a39      	cmp	r2, #57	; 0x39
 800bd30:	d050      	beq.n	800bdd4 <_dtoa_r+0xb74>
 800bd32:	3201      	adds	r2, #1
 800bd34:	701a      	strb	r2, [r3, #0]
 800bd36:	e749      	b.n	800bbcc <_dtoa_r+0x96c>
 800bd38:	2a00      	cmp	r2, #0
 800bd3a:	dd03      	ble.n	800bd44 <_dtoa_r+0xae4>
 800bd3c:	2b39      	cmp	r3, #57	; 0x39
 800bd3e:	d0ee      	beq.n	800bd1e <_dtoa_r+0xabe>
 800bd40:	3301      	adds	r3, #1
 800bd42:	e7c9      	b.n	800bcd8 <_dtoa_r+0xa78>
 800bd44:	9a02      	ldr	r2, [sp, #8]
 800bd46:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd48:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bd4c:	428a      	cmp	r2, r1
 800bd4e:	d02a      	beq.n	800bda6 <_dtoa_r+0xb46>
 800bd50:	4651      	mov	r1, sl
 800bd52:	2300      	movs	r3, #0
 800bd54:	220a      	movs	r2, #10
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 feb4 	bl	800cac4 <__multadd>
 800bd5c:	45b0      	cmp	r8, r6
 800bd5e:	4682      	mov	sl, r0
 800bd60:	f04f 0300 	mov.w	r3, #0
 800bd64:	f04f 020a 	mov.w	r2, #10
 800bd68:	4641      	mov	r1, r8
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	d107      	bne.n	800bd7e <_dtoa_r+0xb1e>
 800bd6e:	f000 fea9 	bl	800cac4 <__multadd>
 800bd72:	4680      	mov	r8, r0
 800bd74:	4606      	mov	r6, r0
 800bd76:	9b02      	ldr	r3, [sp, #8]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	9302      	str	r3, [sp, #8]
 800bd7c:	e777      	b.n	800bc6e <_dtoa_r+0xa0e>
 800bd7e:	f000 fea1 	bl	800cac4 <__multadd>
 800bd82:	4631      	mov	r1, r6
 800bd84:	4680      	mov	r8, r0
 800bd86:	2300      	movs	r3, #0
 800bd88:	220a      	movs	r2, #10
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	f000 fe9a 	bl	800cac4 <__multadd>
 800bd90:	4606      	mov	r6, r0
 800bd92:	e7f0      	b.n	800bd76 <_dtoa_r+0xb16>
 800bd94:	f1bb 0f00 	cmp.w	fp, #0
 800bd98:	9a08      	ldr	r2, [sp, #32]
 800bd9a:	bfcc      	ite	gt
 800bd9c:	465f      	movgt	r7, fp
 800bd9e:	2701      	movle	r7, #1
 800bda0:	4417      	add	r7, r2
 800bda2:	f04f 0800 	mov.w	r8, #0
 800bda6:	4651      	mov	r1, sl
 800bda8:	2201      	movs	r2, #1
 800bdaa:	4628      	mov	r0, r5
 800bdac:	9302      	str	r3, [sp, #8]
 800bdae:	f001 f881 	bl	800ceb4 <__lshift>
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	4682      	mov	sl, r0
 800bdb6:	f001 f8e9 	bl	800cf8c <__mcmp>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	dcb2      	bgt.n	800bd24 <_dtoa_r+0xac4>
 800bdbe:	d102      	bne.n	800bdc6 <_dtoa_r+0xb66>
 800bdc0:	9b02      	ldr	r3, [sp, #8]
 800bdc2:	07db      	lsls	r3, r3, #31
 800bdc4:	d4ae      	bmi.n	800bd24 <_dtoa_r+0xac4>
 800bdc6:	463b      	mov	r3, r7
 800bdc8:	461f      	mov	r7, r3
 800bdca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdce:	2a30      	cmp	r2, #48	; 0x30
 800bdd0:	d0fa      	beq.n	800bdc8 <_dtoa_r+0xb68>
 800bdd2:	e6fb      	b.n	800bbcc <_dtoa_r+0x96c>
 800bdd4:	9a08      	ldr	r2, [sp, #32]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d1a5      	bne.n	800bd26 <_dtoa_r+0xac6>
 800bdda:	2331      	movs	r3, #49	; 0x31
 800bddc:	f109 0901 	add.w	r9, r9, #1
 800bde0:	7013      	strb	r3, [r2, #0]
 800bde2:	e6f3      	b.n	800bbcc <_dtoa_r+0x96c>
 800bde4:	4b13      	ldr	r3, [pc, #76]	; (800be34 <_dtoa_r+0xbd4>)
 800bde6:	f7ff baa6 	b.w	800b336 <_dtoa_r+0xd6>
 800bdea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f47f aa7f 	bne.w	800b2f0 <_dtoa_r+0x90>
 800bdf2:	4b11      	ldr	r3, [pc, #68]	; (800be38 <_dtoa_r+0xbd8>)
 800bdf4:	f7ff ba9f 	b.w	800b336 <_dtoa_r+0xd6>
 800bdf8:	f1bb 0f00 	cmp.w	fp, #0
 800bdfc:	dc03      	bgt.n	800be06 <_dtoa_r+0xba6>
 800bdfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be00:	2b02      	cmp	r3, #2
 800be02:	f73f aecc 	bgt.w	800bb9e <_dtoa_r+0x93e>
 800be06:	9f08      	ldr	r7, [sp, #32]
 800be08:	4621      	mov	r1, r4
 800be0a:	4650      	mov	r0, sl
 800be0c:	f7ff f99c 	bl	800b148 <quorem>
 800be10:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800be14:	f807 3b01 	strb.w	r3, [r7], #1
 800be18:	9a08      	ldr	r2, [sp, #32]
 800be1a:	1aba      	subs	r2, r7, r2
 800be1c:	4593      	cmp	fp, r2
 800be1e:	ddb9      	ble.n	800bd94 <_dtoa_r+0xb34>
 800be20:	4651      	mov	r1, sl
 800be22:	2300      	movs	r3, #0
 800be24:	220a      	movs	r2, #10
 800be26:	4628      	mov	r0, r5
 800be28:	f000 fe4c 	bl	800cac4 <__multadd>
 800be2c:	4682      	mov	sl, r0
 800be2e:	e7eb      	b.n	800be08 <_dtoa_r+0xba8>
 800be30:	0800ebc4 	.word	0x0800ebc4
 800be34:	0800e330 	.word	0x0800e330
 800be38:	0800eb41 	.word	0x0800eb41

0800be3c <__sflush_r>:
 800be3c:	898a      	ldrh	r2, [r1, #12]
 800be3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be42:	4605      	mov	r5, r0
 800be44:	0710      	lsls	r0, r2, #28
 800be46:	460c      	mov	r4, r1
 800be48:	d458      	bmi.n	800befc <__sflush_r+0xc0>
 800be4a:	684b      	ldr	r3, [r1, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dc05      	bgt.n	800be5c <__sflush_r+0x20>
 800be50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be52:	2b00      	cmp	r3, #0
 800be54:	dc02      	bgt.n	800be5c <__sflush_r+0x20>
 800be56:	2000      	movs	r0, #0
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be5e:	2e00      	cmp	r6, #0
 800be60:	d0f9      	beq.n	800be56 <__sflush_r+0x1a>
 800be62:	2300      	movs	r3, #0
 800be64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be68:	682f      	ldr	r7, [r5, #0]
 800be6a:	602b      	str	r3, [r5, #0]
 800be6c:	d032      	beq.n	800bed4 <__sflush_r+0x98>
 800be6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	075a      	lsls	r2, r3, #29
 800be74:	d505      	bpl.n	800be82 <__sflush_r+0x46>
 800be76:	6863      	ldr	r3, [r4, #4]
 800be78:	1ac0      	subs	r0, r0, r3
 800be7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be7c:	b10b      	cbz	r3, 800be82 <__sflush_r+0x46>
 800be7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be80:	1ac0      	subs	r0, r0, r3
 800be82:	2300      	movs	r3, #0
 800be84:	4602      	mov	r2, r0
 800be86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be88:	6a21      	ldr	r1, [r4, #32]
 800be8a:	4628      	mov	r0, r5
 800be8c:	47b0      	blx	r6
 800be8e:	1c43      	adds	r3, r0, #1
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	d106      	bne.n	800bea2 <__sflush_r+0x66>
 800be94:	6829      	ldr	r1, [r5, #0]
 800be96:	291d      	cmp	r1, #29
 800be98:	d82c      	bhi.n	800bef4 <__sflush_r+0xb8>
 800be9a:	4a2a      	ldr	r2, [pc, #168]	; (800bf44 <__sflush_r+0x108>)
 800be9c:	40ca      	lsrs	r2, r1
 800be9e:	07d6      	lsls	r6, r2, #31
 800bea0:	d528      	bpl.n	800bef4 <__sflush_r+0xb8>
 800bea2:	2200      	movs	r2, #0
 800bea4:	6062      	str	r2, [r4, #4]
 800bea6:	04d9      	lsls	r1, r3, #19
 800bea8:	6922      	ldr	r2, [r4, #16]
 800beaa:	6022      	str	r2, [r4, #0]
 800beac:	d504      	bpl.n	800beb8 <__sflush_r+0x7c>
 800beae:	1c42      	adds	r2, r0, #1
 800beb0:	d101      	bne.n	800beb6 <__sflush_r+0x7a>
 800beb2:	682b      	ldr	r3, [r5, #0]
 800beb4:	b903      	cbnz	r3, 800beb8 <__sflush_r+0x7c>
 800beb6:	6560      	str	r0, [r4, #84]	; 0x54
 800beb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beba:	602f      	str	r7, [r5, #0]
 800bebc:	2900      	cmp	r1, #0
 800bebe:	d0ca      	beq.n	800be56 <__sflush_r+0x1a>
 800bec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bec4:	4299      	cmp	r1, r3
 800bec6:	d002      	beq.n	800bece <__sflush_r+0x92>
 800bec8:	4628      	mov	r0, r5
 800beca:	f7fd f941 	bl	8009150 <_free_r>
 800bece:	2000      	movs	r0, #0
 800bed0:	6360      	str	r0, [r4, #52]	; 0x34
 800bed2:	e7c1      	b.n	800be58 <__sflush_r+0x1c>
 800bed4:	6a21      	ldr	r1, [r4, #32]
 800bed6:	2301      	movs	r3, #1
 800bed8:	4628      	mov	r0, r5
 800beda:	47b0      	blx	r6
 800bedc:	1c41      	adds	r1, r0, #1
 800bede:	d1c7      	bne.n	800be70 <__sflush_r+0x34>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d0c4      	beq.n	800be70 <__sflush_r+0x34>
 800bee6:	2b1d      	cmp	r3, #29
 800bee8:	d001      	beq.n	800beee <__sflush_r+0xb2>
 800beea:	2b16      	cmp	r3, #22
 800beec:	d101      	bne.n	800bef2 <__sflush_r+0xb6>
 800beee:	602f      	str	r7, [r5, #0]
 800bef0:	e7b1      	b.n	800be56 <__sflush_r+0x1a>
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bef8:	81a3      	strh	r3, [r4, #12]
 800befa:	e7ad      	b.n	800be58 <__sflush_r+0x1c>
 800befc:	690f      	ldr	r7, [r1, #16]
 800befe:	2f00      	cmp	r7, #0
 800bf00:	d0a9      	beq.n	800be56 <__sflush_r+0x1a>
 800bf02:	0793      	lsls	r3, r2, #30
 800bf04:	680e      	ldr	r6, [r1, #0]
 800bf06:	bf08      	it	eq
 800bf08:	694b      	ldreq	r3, [r1, #20]
 800bf0a:	600f      	str	r7, [r1, #0]
 800bf0c:	bf18      	it	ne
 800bf0e:	2300      	movne	r3, #0
 800bf10:	eba6 0807 	sub.w	r8, r6, r7
 800bf14:	608b      	str	r3, [r1, #8]
 800bf16:	f1b8 0f00 	cmp.w	r8, #0
 800bf1a:	dd9c      	ble.n	800be56 <__sflush_r+0x1a>
 800bf1c:	6a21      	ldr	r1, [r4, #32]
 800bf1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf20:	4643      	mov	r3, r8
 800bf22:	463a      	mov	r2, r7
 800bf24:	4628      	mov	r0, r5
 800bf26:	47b0      	blx	r6
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	dc06      	bgt.n	800bf3a <__sflush_r+0xfe>
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf32:	81a3      	strh	r3, [r4, #12]
 800bf34:	f04f 30ff 	mov.w	r0, #4294967295
 800bf38:	e78e      	b.n	800be58 <__sflush_r+0x1c>
 800bf3a:	4407      	add	r7, r0
 800bf3c:	eba8 0800 	sub.w	r8, r8, r0
 800bf40:	e7e9      	b.n	800bf16 <__sflush_r+0xda>
 800bf42:	bf00      	nop
 800bf44:	20400001 	.word	0x20400001

0800bf48 <_fflush_r>:
 800bf48:	b538      	push	{r3, r4, r5, lr}
 800bf4a:	690b      	ldr	r3, [r1, #16]
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	b913      	cbnz	r3, 800bf58 <_fflush_r+0x10>
 800bf52:	2500      	movs	r5, #0
 800bf54:	4628      	mov	r0, r5
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	b118      	cbz	r0, 800bf62 <_fflush_r+0x1a>
 800bf5a:	6983      	ldr	r3, [r0, #24]
 800bf5c:	b90b      	cbnz	r3, 800bf62 <_fflush_r+0x1a>
 800bf5e:	f000 f8c5 	bl	800c0ec <__sinit>
 800bf62:	4b14      	ldr	r3, [pc, #80]	; (800bfb4 <_fflush_r+0x6c>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	d11b      	bne.n	800bfa0 <_fflush_r+0x58>
 800bf68:	686c      	ldr	r4, [r5, #4]
 800bf6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0ef      	beq.n	800bf52 <_fflush_r+0xa>
 800bf72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf74:	07d0      	lsls	r0, r2, #31
 800bf76:	d404      	bmi.n	800bf82 <_fflush_r+0x3a>
 800bf78:	0599      	lsls	r1, r3, #22
 800bf7a:	d402      	bmi.n	800bf82 <_fflush_r+0x3a>
 800bf7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf7e:	f000 fcba 	bl	800c8f6 <__retarget_lock_acquire_recursive>
 800bf82:	4628      	mov	r0, r5
 800bf84:	4621      	mov	r1, r4
 800bf86:	f7ff ff59 	bl	800be3c <__sflush_r>
 800bf8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf8c:	07da      	lsls	r2, r3, #31
 800bf8e:	4605      	mov	r5, r0
 800bf90:	d4e0      	bmi.n	800bf54 <_fflush_r+0xc>
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	059b      	lsls	r3, r3, #22
 800bf96:	d4dd      	bmi.n	800bf54 <_fflush_r+0xc>
 800bf98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf9a:	f000 fcad 	bl	800c8f8 <__retarget_lock_release_recursive>
 800bf9e:	e7d9      	b.n	800bf54 <_fflush_r+0xc>
 800bfa0:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <_fflush_r+0x70>)
 800bfa2:	429c      	cmp	r4, r3
 800bfa4:	d101      	bne.n	800bfaa <_fflush_r+0x62>
 800bfa6:	68ac      	ldr	r4, [r5, #8]
 800bfa8:	e7df      	b.n	800bf6a <_fflush_r+0x22>
 800bfaa:	4b04      	ldr	r3, [pc, #16]	; (800bfbc <_fflush_r+0x74>)
 800bfac:	429c      	cmp	r4, r3
 800bfae:	bf08      	it	eq
 800bfb0:	68ec      	ldreq	r4, [r5, #12]
 800bfb2:	e7da      	b.n	800bf6a <_fflush_r+0x22>
 800bfb4:	0800ebf8 	.word	0x0800ebf8
 800bfb8:	0800ec18 	.word	0x0800ec18
 800bfbc:	0800ebd8 	.word	0x0800ebd8

0800bfc0 <fileno>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	4e1a      	ldr	r6, [pc, #104]	; (800c02c <fileno+0x6c>)
 800bfc4:	6835      	ldr	r5, [r6, #0]
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	b125      	cbz	r5, 800bfd4 <fileno+0x14>
 800bfca:	69ab      	ldr	r3, [r5, #24]
 800bfcc:	b913      	cbnz	r3, 800bfd4 <fileno+0x14>
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f000 f88c 	bl	800c0ec <__sinit>
 800bfd4:	4b16      	ldr	r3, [pc, #88]	; (800c030 <fileno+0x70>)
 800bfd6:	429c      	cmp	r4, r3
 800bfd8:	d118      	bne.n	800c00c <fileno+0x4c>
 800bfda:	686c      	ldr	r4, [r5, #4]
 800bfdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfde:	07d8      	lsls	r0, r3, #31
 800bfe0:	d405      	bmi.n	800bfee <fileno+0x2e>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	0599      	lsls	r1, r3, #22
 800bfe6:	d402      	bmi.n	800bfee <fileno+0x2e>
 800bfe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfea:	f000 fc84 	bl	800c8f6 <__retarget_lock_acquire_recursive>
 800bfee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bff2:	b1ab      	cbz	r3, 800c020 <fileno+0x60>
 800bff4:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800bff8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bffa:	07d2      	lsls	r2, r2, #31
 800bffc:	d404      	bmi.n	800c008 <fileno+0x48>
 800bffe:	059b      	lsls	r3, r3, #22
 800c000:	d402      	bmi.n	800c008 <fileno+0x48>
 800c002:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c004:	f000 fc78 	bl	800c8f8 <__retarget_lock_release_recursive>
 800c008:	4628      	mov	r0, r5
 800c00a:	bd70      	pop	{r4, r5, r6, pc}
 800c00c:	4b09      	ldr	r3, [pc, #36]	; (800c034 <fileno+0x74>)
 800c00e:	429c      	cmp	r4, r3
 800c010:	d101      	bne.n	800c016 <fileno+0x56>
 800c012:	68ac      	ldr	r4, [r5, #8]
 800c014:	e7e2      	b.n	800bfdc <fileno+0x1c>
 800c016:	4b08      	ldr	r3, [pc, #32]	; (800c038 <fileno+0x78>)
 800c018:	429c      	cmp	r4, r3
 800c01a:	bf08      	it	eq
 800c01c:	68ec      	ldreq	r4, [r5, #12]
 800c01e:	e7dd      	b.n	800bfdc <fileno+0x1c>
 800c020:	6832      	ldr	r2, [r6, #0]
 800c022:	2109      	movs	r1, #9
 800c024:	6011      	str	r1, [r2, #0]
 800c026:	f04f 35ff 	mov.w	r5, #4294967295
 800c02a:	e7e5      	b.n	800bff8 <fileno+0x38>
 800c02c:	20000010 	.word	0x20000010
 800c030:	0800ebf8 	.word	0x0800ebf8
 800c034:	0800ec18 	.word	0x0800ec18
 800c038:	0800ebd8 	.word	0x0800ebd8

0800c03c <std>:
 800c03c:	2300      	movs	r3, #0
 800c03e:	b510      	push	{r4, lr}
 800c040:	4604      	mov	r4, r0
 800c042:	e9c0 3300 	strd	r3, r3, [r0]
 800c046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c04a:	6083      	str	r3, [r0, #8]
 800c04c:	8181      	strh	r1, [r0, #12]
 800c04e:	6643      	str	r3, [r0, #100]	; 0x64
 800c050:	81c2      	strh	r2, [r0, #14]
 800c052:	6183      	str	r3, [r0, #24]
 800c054:	4619      	mov	r1, r3
 800c056:	2208      	movs	r2, #8
 800c058:	305c      	adds	r0, #92	; 0x5c
 800c05a:	f7fd f871 	bl	8009140 <memset>
 800c05e:	4b05      	ldr	r3, [pc, #20]	; (800c074 <std+0x38>)
 800c060:	6263      	str	r3, [r4, #36]	; 0x24
 800c062:	4b05      	ldr	r3, [pc, #20]	; (800c078 <std+0x3c>)
 800c064:	62a3      	str	r3, [r4, #40]	; 0x28
 800c066:	4b05      	ldr	r3, [pc, #20]	; (800c07c <std+0x40>)
 800c068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c06a:	4b05      	ldr	r3, [pc, #20]	; (800c080 <std+0x44>)
 800c06c:	6224      	str	r4, [r4, #32]
 800c06e:	6323      	str	r3, [r4, #48]	; 0x30
 800c070:	bd10      	pop	{r4, pc}
 800c072:	bf00      	nop
 800c074:	0800d989 	.word	0x0800d989
 800c078:	0800d9ab 	.word	0x0800d9ab
 800c07c:	0800d9e3 	.word	0x0800d9e3
 800c080:	0800da07 	.word	0x0800da07

0800c084 <_cleanup_r>:
 800c084:	4901      	ldr	r1, [pc, #4]	; (800c08c <_cleanup_r+0x8>)
 800c086:	f000 b8af 	b.w	800c1e8 <_fwalk_reent>
 800c08a:	bf00      	nop
 800c08c:	0800bf49 	.word	0x0800bf49

0800c090 <__sfmoreglue>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	1e4a      	subs	r2, r1, #1
 800c094:	2568      	movs	r5, #104	; 0x68
 800c096:	4355      	muls	r5, r2
 800c098:	460e      	mov	r6, r1
 800c09a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c09e:	f7fd f8a5 	bl	80091ec <_malloc_r>
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	b140      	cbz	r0, 800c0b8 <__sfmoreglue+0x28>
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	e9c0 1600 	strd	r1, r6, [r0]
 800c0ac:	300c      	adds	r0, #12
 800c0ae:	60a0      	str	r0, [r4, #8]
 800c0b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0b4:	f7fd f844 	bl	8009140 <memset>
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}

0800c0bc <__sfp_lock_acquire>:
 800c0bc:	4801      	ldr	r0, [pc, #4]	; (800c0c4 <__sfp_lock_acquire+0x8>)
 800c0be:	f000 bc1a 	b.w	800c8f6 <__retarget_lock_acquire_recursive>
 800c0c2:	bf00      	nop
 800c0c4:	200005dc 	.word	0x200005dc

0800c0c8 <__sfp_lock_release>:
 800c0c8:	4801      	ldr	r0, [pc, #4]	; (800c0d0 <__sfp_lock_release+0x8>)
 800c0ca:	f000 bc15 	b.w	800c8f8 <__retarget_lock_release_recursive>
 800c0ce:	bf00      	nop
 800c0d0:	200005dc 	.word	0x200005dc

0800c0d4 <__sinit_lock_acquire>:
 800c0d4:	4801      	ldr	r0, [pc, #4]	; (800c0dc <__sinit_lock_acquire+0x8>)
 800c0d6:	f000 bc0e 	b.w	800c8f6 <__retarget_lock_acquire_recursive>
 800c0da:	bf00      	nop
 800c0dc:	200005d7 	.word	0x200005d7

0800c0e0 <__sinit_lock_release>:
 800c0e0:	4801      	ldr	r0, [pc, #4]	; (800c0e8 <__sinit_lock_release+0x8>)
 800c0e2:	f000 bc09 	b.w	800c8f8 <__retarget_lock_release_recursive>
 800c0e6:	bf00      	nop
 800c0e8:	200005d7 	.word	0x200005d7

0800c0ec <__sinit>:
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	f7ff fff0 	bl	800c0d4 <__sinit_lock_acquire>
 800c0f4:	69a3      	ldr	r3, [r4, #24]
 800c0f6:	b11b      	cbz	r3, 800c100 <__sinit+0x14>
 800c0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0fc:	f7ff bff0 	b.w	800c0e0 <__sinit_lock_release>
 800c100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c104:	6523      	str	r3, [r4, #80]	; 0x50
 800c106:	4b13      	ldr	r3, [pc, #76]	; (800c154 <__sinit+0x68>)
 800c108:	4a13      	ldr	r2, [pc, #76]	; (800c158 <__sinit+0x6c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c10e:	42a3      	cmp	r3, r4
 800c110:	bf04      	itt	eq
 800c112:	2301      	moveq	r3, #1
 800c114:	61a3      	streq	r3, [r4, #24]
 800c116:	4620      	mov	r0, r4
 800c118:	f000 f820 	bl	800c15c <__sfp>
 800c11c:	6060      	str	r0, [r4, #4]
 800c11e:	4620      	mov	r0, r4
 800c120:	f000 f81c 	bl	800c15c <__sfp>
 800c124:	60a0      	str	r0, [r4, #8]
 800c126:	4620      	mov	r0, r4
 800c128:	f000 f818 	bl	800c15c <__sfp>
 800c12c:	2200      	movs	r2, #0
 800c12e:	60e0      	str	r0, [r4, #12]
 800c130:	2104      	movs	r1, #4
 800c132:	6860      	ldr	r0, [r4, #4]
 800c134:	f7ff ff82 	bl	800c03c <std>
 800c138:	68a0      	ldr	r0, [r4, #8]
 800c13a:	2201      	movs	r2, #1
 800c13c:	2109      	movs	r1, #9
 800c13e:	f7ff ff7d 	bl	800c03c <std>
 800c142:	68e0      	ldr	r0, [r4, #12]
 800c144:	2202      	movs	r2, #2
 800c146:	2112      	movs	r1, #18
 800c148:	f7ff ff78 	bl	800c03c <std>
 800c14c:	2301      	movs	r3, #1
 800c14e:	61a3      	str	r3, [r4, #24]
 800c150:	e7d2      	b.n	800c0f8 <__sinit+0xc>
 800c152:	bf00      	nop
 800c154:	0800e31c 	.word	0x0800e31c
 800c158:	0800c085 	.word	0x0800c085

0800c15c <__sfp>:
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15e:	4607      	mov	r7, r0
 800c160:	f7ff ffac 	bl	800c0bc <__sfp_lock_acquire>
 800c164:	4b1e      	ldr	r3, [pc, #120]	; (800c1e0 <__sfp+0x84>)
 800c166:	681e      	ldr	r6, [r3, #0]
 800c168:	69b3      	ldr	r3, [r6, #24]
 800c16a:	b913      	cbnz	r3, 800c172 <__sfp+0x16>
 800c16c:	4630      	mov	r0, r6
 800c16e:	f7ff ffbd 	bl	800c0ec <__sinit>
 800c172:	3648      	adds	r6, #72	; 0x48
 800c174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c178:	3b01      	subs	r3, #1
 800c17a:	d503      	bpl.n	800c184 <__sfp+0x28>
 800c17c:	6833      	ldr	r3, [r6, #0]
 800c17e:	b30b      	cbz	r3, 800c1c4 <__sfp+0x68>
 800c180:	6836      	ldr	r6, [r6, #0]
 800c182:	e7f7      	b.n	800c174 <__sfp+0x18>
 800c184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c188:	b9d5      	cbnz	r5, 800c1c0 <__sfp+0x64>
 800c18a:	4b16      	ldr	r3, [pc, #88]	; (800c1e4 <__sfp+0x88>)
 800c18c:	60e3      	str	r3, [r4, #12]
 800c18e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c192:	6665      	str	r5, [r4, #100]	; 0x64
 800c194:	f000 fbae 	bl	800c8f4 <__retarget_lock_init_recursive>
 800c198:	f7ff ff96 	bl	800c0c8 <__sfp_lock_release>
 800c19c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1a4:	6025      	str	r5, [r4, #0]
 800c1a6:	61a5      	str	r5, [r4, #24]
 800c1a8:	2208      	movs	r2, #8
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1b0:	f7fc ffc6 	bl	8009140 <memset>
 800c1b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1bc:	4620      	mov	r0, r4
 800c1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1c0:	3468      	adds	r4, #104	; 0x68
 800c1c2:	e7d9      	b.n	800c178 <__sfp+0x1c>
 800c1c4:	2104      	movs	r1, #4
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	f7ff ff62 	bl	800c090 <__sfmoreglue>
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	6030      	str	r0, [r6, #0]
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d1d5      	bne.n	800c180 <__sfp+0x24>
 800c1d4:	f7ff ff78 	bl	800c0c8 <__sfp_lock_release>
 800c1d8:	230c      	movs	r3, #12
 800c1da:	603b      	str	r3, [r7, #0]
 800c1dc:	e7ee      	b.n	800c1bc <__sfp+0x60>
 800c1de:	bf00      	nop
 800c1e0:	0800e31c 	.word	0x0800e31c
 800c1e4:	ffff0001 	.word	0xffff0001

0800c1e8 <_fwalk_reent>:
 800c1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1ec:	4606      	mov	r6, r0
 800c1ee:	4688      	mov	r8, r1
 800c1f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c1f4:	2700      	movs	r7, #0
 800c1f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1fa:	f1b9 0901 	subs.w	r9, r9, #1
 800c1fe:	d505      	bpl.n	800c20c <_fwalk_reent+0x24>
 800c200:	6824      	ldr	r4, [r4, #0]
 800c202:	2c00      	cmp	r4, #0
 800c204:	d1f7      	bne.n	800c1f6 <_fwalk_reent+0xe>
 800c206:	4638      	mov	r0, r7
 800c208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c20c:	89ab      	ldrh	r3, [r5, #12]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d907      	bls.n	800c222 <_fwalk_reent+0x3a>
 800c212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c216:	3301      	adds	r3, #1
 800c218:	d003      	beq.n	800c222 <_fwalk_reent+0x3a>
 800c21a:	4629      	mov	r1, r5
 800c21c:	4630      	mov	r0, r6
 800c21e:	47c0      	blx	r8
 800c220:	4307      	orrs	r7, r0
 800c222:	3568      	adds	r5, #104	; 0x68
 800c224:	e7e9      	b.n	800c1fa <_fwalk_reent+0x12>

0800c226 <rshift>:
 800c226:	6903      	ldr	r3, [r0, #16]
 800c228:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c230:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c234:	f100 0414 	add.w	r4, r0, #20
 800c238:	dd45      	ble.n	800c2c6 <rshift+0xa0>
 800c23a:	f011 011f 	ands.w	r1, r1, #31
 800c23e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c242:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c246:	d10c      	bne.n	800c262 <rshift+0x3c>
 800c248:	f100 0710 	add.w	r7, r0, #16
 800c24c:	4629      	mov	r1, r5
 800c24e:	42b1      	cmp	r1, r6
 800c250:	d334      	bcc.n	800c2bc <rshift+0x96>
 800c252:	1a9b      	subs	r3, r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	1eea      	subs	r2, r5, #3
 800c258:	4296      	cmp	r6, r2
 800c25a:	bf38      	it	cc
 800c25c:	2300      	movcc	r3, #0
 800c25e:	4423      	add	r3, r4
 800c260:	e015      	b.n	800c28e <rshift+0x68>
 800c262:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c266:	f1c1 0820 	rsb	r8, r1, #32
 800c26a:	40cf      	lsrs	r7, r1
 800c26c:	f105 0e04 	add.w	lr, r5, #4
 800c270:	46a1      	mov	r9, r4
 800c272:	4576      	cmp	r6, lr
 800c274:	46f4      	mov	ip, lr
 800c276:	d815      	bhi.n	800c2a4 <rshift+0x7e>
 800c278:	1a9b      	subs	r3, r3, r2
 800c27a:	009a      	lsls	r2, r3, #2
 800c27c:	3a04      	subs	r2, #4
 800c27e:	3501      	adds	r5, #1
 800c280:	42ae      	cmp	r6, r5
 800c282:	bf38      	it	cc
 800c284:	2200      	movcc	r2, #0
 800c286:	18a3      	adds	r3, r4, r2
 800c288:	50a7      	str	r7, [r4, r2]
 800c28a:	b107      	cbz	r7, 800c28e <rshift+0x68>
 800c28c:	3304      	adds	r3, #4
 800c28e:	1b1a      	subs	r2, r3, r4
 800c290:	42a3      	cmp	r3, r4
 800c292:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c296:	bf08      	it	eq
 800c298:	2300      	moveq	r3, #0
 800c29a:	6102      	str	r2, [r0, #16]
 800c29c:	bf08      	it	eq
 800c29e:	6143      	streq	r3, [r0, #20]
 800c2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2a4:	f8dc c000 	ldr.w	ip, [ip]
 800c2a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c2ac:	ea4c 0707 	orr.w	r7, ip, r7
 800c2b0:	f849 7b04 	str.w	r7, [r9], #4
 800c2b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2b8:	40cf      	lsrs	r7, r1
 800c2ba:	e7da      	b.n	800c272 <rshift+0x4c>
 800c2bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c2c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c2c4:	e7c3      	b.n	800c24e <rshift+0x28>
 800c2c6:	4623      	mov	r3, r4
 800c2c8:	e7e1      	b.n	800c28e <rshift+0x68>

0800c2ca <__hexdig_fun>:
 800c2ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c2ce:	2b09      	cmp	r3, #9
 800c2d0:	d802      	bhi.n	800c2d8 <__hexdig_fun+0xe>
 800c2d2:	3820      	subs	r0, #32
 800c2d4:	b2c0      	uxtb	r0, r0
 800c2d6:	4770      	bx	lr
 800c2d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c2dc:	2b05      	cmp	r3, #5
 800c2de:	d801      	bhi.n	800c2e4 <__hexdig_fun+0x1a>
 800c2e0:	3847      	subs	r0, #71	; 0x47
 800c2e2:	e7f7      	b.n	800c2d4 <__hexdig_fun+0xa>
 800c2e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c2e8:	2b05      	cmp	r3, #5
 800c2ea:	d801      	bhi.n	800c2f0 <__hexdig_fun+0x26>
 800c2ec:	3827      	subs	r0, #39	; 0x27
 800c2ee:	e7f1      	b.n	800c2d4 <__hexdig_fun+0xa>
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	4770      	bx	lr

0800c2f4 <__gethex>:
 800c2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f8:	b08b      	sub	sp, #44	; 0x2c
 800c2fa:	468b      	mov	fp, r1
 800c2fc:	9306      	str	r3, [sp, #24]
 800c2fe:	4bb9      	ldr	r3, [pc, #740]	; (800c5e4 <__gethex+0x2f0>)
 800c300:	9002      	str	r0, [sp, #8]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	9303      	str	r3, [sp, #12]
 800c306:	4618      	mov	r0, r3
 800c308:	4690      	mov	r8, r2
 800c30a:	f7f3 ff43 	bl	8000194 <strlen>
 800c30e:	9b03      	ldr	r3, [sp, #12]
 800c310:	f8db 2000 	ldr.w	r2, [fp]
 800c314:	4403      	add	r3, r0
 800c316:	4682      	mov	sl, r0
 800c318:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c31c:	9307      	str	r3, [sp, #28]
 800c31e:	1c93      	adds	r3, r2, #2
 800c320:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c324:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c328:	32fe      	adds	r2, #254	; 0xfe
 800c32a:	18d1      	adds	r1, r2, r3
 800c32c:	461f      	mov	r7, r3
 800c32e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c332:	9101      	str	r1, [sp, #4]
 800c334:	2830      	cmp	r0, #48	; 0x30
 800c336:	d0f8      	beq.n	800c32a <__gethex+0x36>
 800c338:	f7ff ffc7 	bl	800c2ca <__hexdig_fun>
 800c33c:	4604      	mov	r4, r0
 800c33e:	2800      	cmp	r0, #0
 800c340:	d13a      	bne.n	800c3b8 <__gethex+0xc4>
 800c342:	9903      	ldr	r1, [sp, #12]
 800c344:	4652      	mov	r2, sl
 800c346:	4638      	mov	r0, r7
 800c348:	f001 fb61 	bl	800da0e <strncmp>
 800c34c:	4605      	mov	r5, r0
 800c34e:	2800      	cmp	r0, #0
 800c350:	d166      	bne.n	800c420 <__gethex+0x12c>
 800c352:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c356:	eb07 060a 	add.w	r6, r7, sl
 800c35a:	f7ff ffb6 	bl	800c2ca <__hexdig_fun>
 800c35e:	2800      	cmp	r0, #0
 800c360:	d060      	beq.n	800c424 <__gethex+0x130>
 800c362:	4633      	mov	r3, r6
 800c364:	7818      	ldrb	r0, [r3, #0]
 800c366:	2830      	cmp	r0, #48	; 0x30
 800c368:	461f      	mov	r7, r3
 800c36a:	f103 0301 	add.w	r3, r3, #1
 800c36e:	d0f9      	beq.n	800c364 <__gethex+0x70>
 800c370:	f7ff ffab 	bl	800c2ca <__hexdig_fun>
 800c374:	2301      	movs	r3, #1
 800c376:	fab0 f480 	clz	r4, r0
 800c37a:	0964      	lsrs	r4, r4, #5
 800c37c:	4635      	mov	r5, r6
 800c37e:	9301      	str	r3, [sp, #4]
 800c380:	463a      	mov	r2, r7
 800c382:	4616      	mov	r6, r2
 800c384:	3201      	adds	r2, #1
 800c386:	7830      	ldrb	r0, [r6, #0]
 800c388:	f7ff ff9f 	bl	800c2ca <__hexdig_fun>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d1f8      	bne.n	800c382 <__gethex+0x8e>
 800c390:	9903      	ldr	r1, [sp, #12]
 800c392:	4652      	mov	r2, sl
 800c394:	4630      	mov	r0, r6
 800c396:	f001 fb3a 	bl	800da0e <strncmp>
 800c39a:	b980      	cbnz	r0, 800c3be <__gethex+0xca>
 800c39c:	b94d      	cbnz	r5, 800c3b2 <__gethex+0xbe>
 800c39e:	eb06 050a 	add.w	r5, r6, sl
 800c3a2:	462a      	mov	r2, r5
 800c3a4:	4616      	mov	r6, r2
 800c3a6:	3201      	adds	r2, #1
 800c3a8:	7830      	ldrb	r0, [r6, #0]
 800c3aa:	f7ff ff8e 	bl	800c2ca <__hexdig_fun>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d1f8      	bne.n	800c3a4 <__gethex+0xb0>
 800c3b2:	1bad      	subs	r5, r5, r6
 800c3b4:	00ad      	lsls	r5, r5, #2
 800c3b6:	e004      	b.n	800c3c2 <__gethex+0xce>
 800c3b8:	2400      	movs	r4, #0
 800c3ba:	4625      	mov	r5, r4
 800c3bc:	e7e0      	b.n	800c380 <__gethex+0x8c>
 800c3be:	2d00      	cmp	r5, #0
 800c3c0:	d1f7      	bne.n	800c3b2 <__gethex+0xbe>
 800c3c2:	7833      	ldrb	r3, [r6, #0]
 800c3c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c3c8:	2b50      	cmp	r3, #80	; 0x50
 800c3ca:	d139      	bne.n	800c440 <__gethex+0x14c>
 800c3cc:	7873      	ldrb	r3, [r6, #1]
 800c3ce:	2b2b      	cmp	r3, #43	; 0x2b
 800c3d0:	d02a      	beq.n	800c428 <__gethex+0x134>
 800c3d2:	2b2d      	cmp	r3, #45	; 0x2d
 800c3d4:	d02c      	beq.n	800c430 <__gethex+0x13c>
 800c3d6:	1c71      	adds	r1, r6, #1
 800c3d8:	f04f 0900 	mov.w	r9, #0
 800c3dc:	7808      	ldrb	r0, [r1, #0]
 800c3de:	f7ff ff74 	bl	800c2ca <__hexdig_fun>
 800c3e2:	1e43      	subs	r3, r0, #1
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b18      	cmp	r3, #24
 800c3e8:	d82a      	bhi.n	800c440 <__gethex+0x14c>
 800c3ea:	f1a0 0210 	sub.w	r2, r0, #16
 800c3ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c3f2:	f7ff ff6a 	bl	800c2ca <__hexdig_fun>
 800c3f6:	1e43      	subs	r3, r0, #1
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2b18      	cmp	r3, #24
 800c3fc:	d91b      	bls.n	800c436 <__gethex+0x142>
 800c3fe:	f1b9 0f00 	cmp.w	r9, #0
 800c402:	d000      	beq.n	800c406 <__gethex+0x112>
 800c404:	4252      	negs	r2, r2
 800c406:	4415      	add	r5, r2
 800c408:	f8cb 1000 	str.w	r1, [fp]
 800c40c:	b1d4      	cbz	r4, 800c444 <__gethex+0x150>
 800c40e:	9b01      	ldr	r3, [sp, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	bf14      	ite	ne
 800c414:	2700      	movne	r7, #0
 800c416:	2706      	moveq	r7, #6
 800c418:	4638      	mov	r0, r7
 800c41a:	b00b      	add	sp, #44	; 0x2c
 800c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c420:	463e      	mov	r6, r7
 800c422:	4625      	mov	r5, r4
 800c424:	2401      	movs	r4, #1
 800c426:	e7cc      	b.n	800c3c2 <__gethex+0xce>
 800c428:	f04f 0900 	mov.w	r9, #0
 800c42c:	1cb1      	adds	r1, r6, #2
 800c42e:	e7d5      	b.n	800c3dc <__gethex+0xe8>
 800c430:	f04f 0901 	mov.w	r9, #1
 800c434:	e7fa      	b.n	800c42c <__gethex+0x138>
 800c436:	230a      	movs	r3, #10
 800c438:	fb03 0202 	mla	r2, r3, r2, r0
 800c43c:	3a10      	subs	r2, #16
 800c43e:	e7d6      	b.n	800c3ee <__gethex+0xfa>
 800c440:	4631      	mov	r1, r6
 800c442:	e7e1      	b.n	800c408 <__gethex+0x114>
 800c444:	1bf3      	subs	r3, r6, r7
 800c446:	3b01      	subs	r3, #1
 800c448:	4621      	mov	r1, r4
 800c44a:	2b07      	cmp	r3, #7
 800c44c:	dc0a      	bgt.n	800c464 <__gethex+0x170>
 800c44e:	9802      	ldr	r0, [sp, #8]
 800c450:	f000 fad6 	bl	800ca00 <_Balloc>
 800c454:	4604      	mov	r4, r0
 800c456:	b940      	cbnz	r0, 800c46a <__gethex+0x176>
 800c458:	4b63      	ldr	r3, [pc, #396]	; (800c5e8 <__gethex+0x2f4>)
 800c45a:	4602      	mov	r2, r0
 800c45c:	21de      	movs	r1, #222	; 0xde
 800c45e:	4863      	ldr	r0, [pc, #396]	; (800c5ec <__gethex+0x2f8>)
 800c460:	f001 faf4 	bl	800da4c <__assert_func>
 800c464:	3101      	adds	r1, #1
 800c466:	105b      	asrs	r3, r3, #1
 800c468:	e7ef      	b.n	800c44a <__gethex+0x156>
 800c46a:	f100 0914 	add.w	r9, r0, #20
 800c46e:	f04f 0b00 	mov.w	fp, #0
 800c472:	f1ca 0301 	rsb	r3, sl, #1
 800c476:	f8cd 9010 	str.w	r9, [sp, #16]
 800c47a:	f8cd b004 	str.w	fp, [sp, #4]
 800c47e:	9308      	str	r3, [sp, #32]
 800c480:	42b7      	cmp	r7, r6
 800c482:	d33f      	bcc.n	800c504 <__gethex+0x210>
 800c484:	9f04      	ldr	r7, [sp, #16]
 800c486:	9b01      	ldr	r3, [sp, #4]
 800c488:	f847 3b04 	str.w	r3, [r7], #4
 800c48c:	eba7 0709 	sub.w	r7, r7, r9
 800c490:	10bf      	asrs	r7, r7, #2
 800c492:	6127      	str	r7, [r4, #16]
 800c494:	4618      	mov	r0, r3
 800c496:	f000 fba9 	bl	800cbec <__hi0bits>
 800c49a:	017f      	lsls	r7, r7, #5
 800c49c:	f8d8 6000 	ldr.w	r6, [r8]
 800c4a0:	1a3f      	subs	r7, r7, r0
 800c4a2:	42b7      	cmp	r7, r6
 800c4a4:	dd62      	ble.n	800c56c <__gethex+0x278>
 800c4a6:	1bbf      	subs	r7, r7, r6
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 ff3b 	bl	800d326 <__any_on>
 800c4b0:	4682      	mov	sl, r0
 800c4b2:	b1a8      	cbz	r0, 800c4e0 <__gethex+0x1ec>
 800c4b4:	1e7b      	subs	r3, r7, #1
 800c4b6:	1159      	asrs	r1, r3, #5
 800c4b8:	f003 021f 	and.w	r2, r3, #31
 800c4bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c4c0:	f04f 0a01 	mov.w	sl, #1
 800c4c4:	fa0a f202 	lsl.w	r2, sl, r2
 800c4c8:	420a      	tst	r2, r1
 800c4ca:	d009      	beq.n	800c4e0 <__gethex+0x1ec>
 800c4cc:	4553      	cmp	r3, sl
 800c4ce:	dd05      	ble.n	800c4dc <__gethex+0x1e8>
 800c4d0:	1eb9      	subs	r1, r7, #2
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f000 ff27 	bl	800d326 <__any_on>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d144      	bne.n	800c566 <__gethex+0x272>
 800c4dc:	f04f 0a02 	mov.w	sl, #2
 800c4e0:	4639      	mov	r1, r7
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f7ff fe9f 	bl	800c226 <rshift>
 800c4e8:	443d      	add	r5, r7
 800c4ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4ee:	42ab      	cmp	r3, r5
 800c4f0:	da4a      	bge.n	800c588 <__gethex+0x294>
 800c4f2:	9802      	ldr	r0, [sp, #8]
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	f000 fac3 	bl	800ca80 <_Bfree>
 800c4fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	27a3      	movs	r7, #163	; 0xa3
 800c502:	e789      	b.n	800c418 <__gethex+0x124>
 800c504:	1e73      	subs	r3, r6, #1
 800c506:	9a07      	ldr	r2, [sp, #28]
 800c508:	9305      	str	r3, [sp, #20]
 800c50a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c50e:	4293      	cmp	r3, r2
 800c510:	d019      	beq.n	800c546 <__gethex+0x252>
 800c512:	f1bb 0f20 	cmp.w	fp, #32
 800c516:	d107      	bne.n	800c528 <__gethex+0x234>
 800c518:	9b04      	ldr	r3, [sp, #16]
 800c51a:	9a01      	ldr	r2, [sp, #4]
 800c51c:	f843 2b04 	str.w	r2, [r3], #4
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	2300      	movs	r3, #0
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	469b      	mov	fp, r3
 800c528:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c52c:	f7ff fecd 	bl	800c2ca <__hexdig_fun>
 800c530:	9b01      	ldr	r3, [sp, #4]
 800c532:	f000 000f 	and.w	r0, r0, #15
 800c536:	fa00 f00b 	lsl.w	r0, r0, fp
 800c53a:	4303      	orrs	r3, r0
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	f10b 0b04 	add.w	fp, fp, #4
 800c542:	9b05      	ldr	r3, [sp, #20]
 800c544:	e00d      	b.n	800c562 <__gethex+0x26e>
 800c546:	9b05      	ldr	r3, [sp, #20]
 800c548:	9a08      	ldr	r2, [sp, #32]
 800c54a:	4413      	add	r3, r2
 800c54c:	42bb      	cmp	r3, r7
 800c54e:	d3e0      	bcc.n	800c512 <__gethex+0x21e>
 800c550:	4618      	mov	r0, r3
 800c552:	9903      	ldr	r1, [sp, #12]
 800c554:	9309      	str	r3, [sp, #36]	; 0x24
 800c556:	4652      	mov	r2, sl
 800c558:	f001 fa59 	bl	800da0e <strncmp>
 800c55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c55e:	2800      	cmp	r0, #0
 800c560:	d1d7      	bne.n	800c512 <__gethex+0x21e>
 800c562:	461e      	mov	r6, r3
 800c564:	e78c      	b.n	800c480 <__gethex+0x18c>
 800c566:	f04f 0a03 	mov.w	sl, #3
 800c56a:	e7b9      	b.n	800c4e0 <__gethex+0x1ec>
 800c56c:	da09      	bge.n	800c582 <__gethex+0x28e>
 800c56e:	1bf7      	subs	r7, r6, r7
 800c570:	4621      	mov	r1, r4
 800c572:	9802      	ldr	r0, [sp, #8]
 800c574:	463a      	mov	r2, r7
 800c576:	f000 fc9d 	bl	800ceb4 <__lshift>
 800c57a:	1bed      	subs	r5, r5, r7
 800c57c:	4604      	mov	r4, r0
 800c57e:	f100 0914 	add.w	r9, r0, #20
 800c582:	f04f 0a00 	mov.w	sl, #0
 800c586:	e7b0      	b.n	800c4ea <__gethex+0x1f6>
 800c588:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c58c:	42a8      	cmp	r0, r5
 800c58e:	dd70      	ble.n	800c672 <__gethex+0x37e>
 800c590:	1b45      	subs	r5, r0, r5
 800c592:	42ae      	cmp	r6, r5
 800c594:	dc34      	bgt.n	800c600 <__gethex+0x30c>
 800c596:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	d028      	beq.n	800c5f0 <__gethex+0x2fc>
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d02a      	beq.n	800c5f8 <__gethex+0x304>
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d115      	bne.n	800c5d2 <__gethex+0x2de>
 800c5a6:	42ae      	cmp	r6, r5
 800c5a8:	d113      	bne.n	800c5d2 <__gethex+0x2de>
 800c5aa:	2e01      	cmp	r6, #1
 800c5ac:	d10b      	bne.n	800c5c6 <__gethex+0x2d2>
 800c5ae:	9a06      	ldr	r2, [sp, #24]
 800c5b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5b4:	6013      	str	r3, [r2, #0]
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	6123      	str	r3, [r4, #16]
 800c5ba:	f8c9 3000 	str.w	r3, [r9]
 800c5be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5c0:	2762      	movs	r7, #98	; 0x62
 800c5c2:	601c      	str	r4, [r3, #0]
 800c5c4:	e728      	b.n	800c418 <__gethex+0x124>
 800c5c6:	1e71      	subs	r1, r6, #1
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f000 feac 	bl	800d326 <__any_on>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d1ed      	bne.n	800c5ae <__gethex+0x2ba>
 800c5d2:	9802      	ldr	r0, [sp, #8]
 800c5d4:	4621      	mov	r1, r4
 800c5d6:	f000 fa53 	bl	800ca80 <_Bfree>
 800c5da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5dc:	2300      	movs	r3, #0
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	2750      	movs	r7, #80	; 0x50
 800c5e2:	e719      	b.n	800c418 <__gethex+0x124>
 800c5e4:	0800eca4 	.word	0x0800eca4
 800c5e8:	0800ebc4 	.word	0x0800ebc4
 800c5ec:	0800ec38 	.word	0x0800ec38
 800c5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1ed      	bne.n	800c5d2 <__gethex+0x2de>
 800c5f6:	e7da      	b.n	800c5ae <__gethex+0x2ba>
 800c5f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1d7      	bne.n	800c5ae <__gethex+0x2ba>
 800c5fe:	e7e8      	b.n	800c5d2 <__gethex+0x2de>
 800c600:	1e6f      	subs	r7, r5, #1
 800c602:	f1ba 0f00 	cmp.w	sl, #0
 800c606:	d131      	bne.n	800c66c <__gethex+0x378>
 800c608:	b127      	cbz	r7, 800c614 <__gethex+0x320>
 800c60a:	4639      	mov	r1, r7
 800c60c:	4620      	mov	r0, r4
 800c60e:	f000 fe8a 	bl	800d326 <__any_on>
 800c612:	4682      	mov	sl, r0
 800c614:	117b      	asrs	r3, r7, #5
 800c616:	2101      	movs	r1, #1
 800c618:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c61c:	f007 071f 	and.w	r7, r7, #31
 800c620:	fa01 f707 	lsl.w	r7, r1, r7
 800c624:	421f      	tst	r7, r3
 800c626:	4629      	mov	r1, r5
 800c628:	4620      	mov	r0, r4
 800c62a:	bf18      	it	ne
 800c62c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c630:	1b76      	subs	r6, r6, r5
 800c632:	f7ff fdf8 	bl	800c226 <rshift>
 800c636:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c63a:	2702      	movs	r7, #2
 800c63c:	f1ba 0f00 	cmp.w	sl, #0
 800c640:	d048      	beq.n	800c6d4 <__gethex+0x3e0>
 800c642:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c646:	2b02      	cmp	r3, #2
 800c648:	d015      	beq.n	800c676 <__gethex+0x382>
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d017      	beq.n	800c67e <__gethex+0x38a>
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d109      	bne.n	800c666 <__gethex+0x372>
 800c652:	f01a 0f02 	tst.w	sl, #2
 800c656:	d006      	beq.n	800c666 <__gethex+0x372>
 800c658:	f8d9 0000 	ldr.w	r0, [r9]
 800c65c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c660:	f01a 0f01 	tst.w	sl, #1
 800c664:	d10e      	bne.n	800c684 <__gethex+0x390>
 800c666:	f047 0710 	orr.w	r7, r7, #16
 800c66a:	e033      	b.n	800c6d4 <__gethex+0x3e0>
 800c66c:	f04f 0a01 	mov.w	sl, #1
 800c670:	e7d0      	b.n	800c614 <__gethex+0x320>
 800c672:	2701      	movs	r7, #1
 800c674:	e7e2      	b.n	800c63c <__gethex+0x348>
 800c676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c678:	f1c3 0301 	rsb	r3, r3, #1
 800c67c:	9315      	str	r3, [sp, #84]	; 0x54
 800c67e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c680:	2b00      	cmp	r3, #0
 800c682:	d0f0      	beq.n	800c666 <__gethex+0x372>
 800c684:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c688:	f104 0314 	add.w	r3, r4, #20
 800c68c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c690:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c694:	f04f 0c00 	mov.w	ip, #0
 800c698:	4618      	mov	r0, r3
 800c69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c69e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6a2:	d01c      	beq.n	800c6de <__gethex+0x3ea>
 800c6a4:	3201      	adds	r2, #1
 800c6a6:	6002      	str	r2, [r0, #0]
 800c6a8:	2f02      	cmp	r7, #2
 800c6aa:	f104 0314 	add.w	r3, r4, #20
 800c6ae:	d13d      	bne.n	800c72c <__gethex+0x438>
 800c6b0:	f8d8 2000 	ldr.w	r2, [r8]
 800c6b4:	3a01      	subs	r2, #1
 800c6b6:	42b2      	cmp	r2, r6
 800c6b8:	d10a      	bne.n	800c6d0 <__gethex+0x3dc>
 800c6ba:	1171      	asrs	r1, r6, #5
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6c2:	f006 061f 	and.w	r6, r6, #31
 800c6c6:	fa02 f606 	lsl.w	r6, r2, r6
 800c6ca:	421e      	tst	r6, r3
 800c6cc:	bf18      	it	ne
 800c6ce:	4617      	movne	r7, r2
 800c6d0:	f047 0720 	orr.w	r7, r7, #32
 800c6d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6d6:	601c      	str	r4, [r3, #0]
 800c6d8:	9b06      	ldr	r3, [sp, #24]
 800c6da:	601d      	str	r5, [r3, #0]
 800c6dc:	e69c      	b.n	800c418 <__gethex+0x124>
 800c6de:	4299      	cmp	r1, r3
 800c6e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800c6e4:	d8d8      	bhi.n	800c698 <__gethex+0x3a4>
 800c6e6:	68a3      	ldr	r3, [r4, #8]
 800c6e8:	459b      	cmp	fp, r3
 800c6ea:	db17      	blt.n	800c71c <__gethex+0x428>
 800c6ec:	6861      	ldr	r1, [r4, #4]
 800c6ee:	9802      	ldr	r0, [sp, #8]
 800c6f0:	3101      	adds	r1, #1
 800c6f2:	f000 f985 	bl	800ca00 <_Balloc>
 800c6f6:	4681      	mov	r9, r0
 800c6f8:	b918      	cbnz	r0, 800c702 <__gethex+0x40e>
 800c6fa:	4b1a      	ldr	r3, [pc, #104]	; (800c764 <__gethex+0x470>)
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	2184      	movs	r1, #132	; 0x84
 800c700:	e6ad      	b.n	800c45e <__gethex+0x16a>
 800c702:	6922      	ldr	r2, [r4, #16]
 800c704:	3202      	adds	r2, #2
 800c706:	f104 010c 	add.w	r1, r4, #12
 800c70a:	0092      	lsls	r2, r2, #2
 800c70c:	300c      	adds	r0, #12
 800c70e:	f7fc fd09 	bl	8009124 <memcpy>
 800c712:	4621      	mov	r1, r4
 800c714:	9802      	ldr	r0, [sp, #8]
 800c716:	f000 f9b3 	bl	800ca80 <_Bfree>
 800c71a:	464c      	mov	r4, r9
 800c71c:	6923      	ldr	r3, [r4, #16]
 800c71e:	1c5a      	adds	r2, r3, #1
 800c720:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c724:	6122      	str	r2, [r4, #16]
 800c726:	2201      	movs	r2, #1
 800c728:	615a      	str	r2, [r3, #20]
 800c72a:	e7bd      	b.n	800c6a8 <__gethex+0x3b4>
 800c72c:	6922      	ldr	r2, [r4, #16]
 800c72e:	455a      	cmp	r2, fp
 800c730:	dd0b      	ble.n	800c74a <__gethex+0x456>
 800c732:	2101      	movs	r1, #1
 800c734:	4620      	mov	r0, r4
 800c736:	f7ff fd76 	bl	800c226 <rshift>
 800c73a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c73e:	3501      	adds	r5, #1
 800c740:	42ab      	cmp	r3, r5
 800c742:	f6ff aed6 	blt.w	800c4f2 <__gethex+0x1fe>
 800c746:	2701      	movs	r7, #1
 800c748:	e7c2      	b.n	800c6d0 <__gethex+0x3dc>
 800c74a:	f016 061f 	ands.w	r6, r6, #31
 800c74e:	d0fa      	beq.n	800c746 <__gethex+0x452>
 800c750:	449a      	add	sl, r3
 800c752:	f1c6 0620 	rsb	r6, r6, #32
 800c756:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c75a:	f000 fa47 	bl	800cbec <__hi0bits>
 800c75e:	42b0      	cmp	r0, r6
 800c760:	dbe7      	blt.n	800c732 <__gethex+0x43e>
 800c762:	e7f0      	b.n	800c746 <__gethex+0x452>
 800c764:	0800ebc4 	.word	0x0800ebc4

0800c768 <L_shift>:
 800c768:	f1c2 0208 	rsb	r2, r2, #8
 800c76c:	0092      	lsls	r2, r2, #2
 800c76e:	b570      	push	{r4, r5, r6, lr}
 800c770:	f1c2 0620 	rsb	r6, r2, #32
 800c774:	6843      	ldr	r3, [r0, #4]
 800c776:	6804      	ldr	r4, [r0, #0]
 800c778:	fa03 f506 	lsl.w	r5, r3, r6
 800c77c:	432c      	orrs	r4, r5
 800c77e:	40d3      	lsrs	r3, r2
 800c780:	6004      	str	r4, [r0, #0]
 800c782:	f840 3f04 	str.w	r3, [r0, #4]!
 800c786:	4288      	cmp	r0, r1
 800c788:	d3f4      	bcc.n	800c774 <L_shift+0xc>
 800c78a:	bd70      	pop	{r4, r5, r6, pc}

0800c78c <__match>:
 800c78c:	b530      	push	{r4, r5, lr}
 800c78e:	6803      	ldr	r3, [r0, #0]
 800c790:	3301      	adds	r3, #1
 800c792:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c796:	b914      	cbnz	r4, 800c79e <__match+0x12>
 800c798:	6003      	str	r3, [r0, #0]
 800c79a:	2001      	movs	r0, #1
 800c79c:	bd30      	pop	{r4, r5, pc}
 800c79e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c7a6:	2d19      	cmp	r5, #25
 800c7a8:	bf98      	it	ls
 800c7aa:	3220      	addls	r2, #32
 800c7ac:	42a2      	cmp	r2, r4
 800c7ae:	d0f0      	beq.n	800c792 <__match+0x6>
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	e7f3      	b.n	800c79c <__match+0x10>

0800c7b4 <__hexnan>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	680b      	ldr	r3, [r1, #0]
 800c7ba:	6801      	ldr	r1, [r0, #0]
 800c7bc:	115e      	asrs	r6, r3, #5
 800c7be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c7c2:	f013 031f 	ands.w	r3, r3, #31
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	bf18      	it	ne
 800c7ca:	3604      	addne	r6, #4
 800c7cc:	2500      	movs	r5, #0
 800c7ce:	1f37      	subs	r7, r6, #4
 800c7d0:	4682      	mov	sl, r0
 800c7d2:	4690      	mov	r8, r2
 800c7d4:	9301      	str	r3, [sp, #4]
 800c7d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c7da:	46b9      	mov	r9, r7
 800c7dc:	463c      	mov	r4, r7
 800c7de:	9502      	str	r5, [sp, #8]
 800c7e0:	46ab      	mov	fp, r5
 800c7e2:	784a      	ldrb	r2, [r1, #1]
 800c7e4:	1c4b      	adds	r3, r1, #1
 800c7e6:	9303      	str	r3, [sp, #12]
 800c7e8:	b342      	cbz	r2, 800c83c <__hexnan+0x88>
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	9105      	str	r1, [sp, #20]
 800c7ee:	9204      	str	r2, [sp, #16]
 800c7f0:	f7ff fd6b 	bl	800c2ca <__hexdig_fun>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d14f      	bne.n	800c898 <__hexnan+0xe4>
 800c7f8:	9a04      	ldr	r2, [sp, #16]
 800c7fa:	9905      	ldr	r1, [sp, #20]
 800c7fc:	2a20      	cmp	r2, #32
 800c7fe:	d818      	bhi.n	800c832 <__hexnan+0x7e>
 800c800:	9b02      	ldr	r3, [sp, #8]
 800c802:	459b      	cmp	fp, r3
 800c804:	dd13      	ble.n	800c82e <__hexnan+0x7a>
 800c806:	454c      	cmp	r4, r9
 800c808:	d206      	bcs.n	800c818 <__hexnan+0x64>
 800c80a:	2d07      	cmp	r5, #7
 800c80c:	dc04      	bgt.n	800c818 <__hexnan+0x64>
 800c80e:	462a      	mov	r2, r5
 800c810:	4649      	mov	r1, r9
 800c812:	4620      	mov	r0, r4
 800c814:	f7ff ffa8 	bl	800c768 <L_shift>
 800c818:	4544      	cmp	r4, r8
 800c81a:	d950      	bls.n	800c8be <__hexnan+0x10a>
 800c81c:	2300      	movs	r3, #0
 800c81e:	f1a4 0904 	sub.w	r9, r4, #4
 800c822:	f844 3c04 	str.w	r3, [r4, #-4]
 800c826:	f8cd b008 	str.w	fp, [sp, #8]
 800c82a:	464c      	mov	r4, r9
 800c82c:	461d      	mov	r5, r3
 800c82e:	9903      	ldr	r1, [sp, #12]
 800c830:	e7d7      	b.n	800c7e2 <__hexnan+0x2e>
 800c832:	2a29      	cmp	r2, #41	; 0x29
 800c834:	d156      	bne.n	800c8e4 <__hexnan+0x130>
 800c836:	3102      	adds	r1, #2
 800c838:	f8ca 1000 	str.w	r1, [sl]
 800c83c:	f1bb 0f00 	cmp.w	fp, #0
 800c840:	d050      	beq.n	800c8e4 <__hexnan+0x130>
 800c842:	454c      	cmp	r4, r9
 800c844:	d206      	bcs.n	800c854 <__hexnan+0xa0>
 800c846:	2d07      	cmp	r5, #7
 800c848:	dc04      	bgt.n	800c854 <__hexnan+0xa0>
 800c84a:	462a      	mov	r2, r5
 800c84c:	4649      	mov	r1, r9
 800c84e:	4620      	mov	r0, r4
 800c850:	f7ff ff8a 	bl	800c768 <L_shift>
 800c854:	4544      	cmp	r4, r8
 800c856:	d934      	bls.n	800c8c2 <__hexnan+0x10e>
 800c858:	f1a8 0204 	sub.w	r2, r8, #4
 800c85c:	4623      	mov	r3, r4
 800c85e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c862:	f842 1f04 	str.w	r1, [r2, #4]!
 800c866:	429f      	cmp	r7, r3
 800c868:	d2f9      	bcs.n	800c85e <__hexnan+0xaa>
 800c86a:	1b3b      	subs	r3, r7, r4
 800c86c:	f023 0303 	bic.w	r3, r3, #3
 800c870:	3304      	adds	r3, #4
 800c872:	3401      	adds	r4, #1
 800c874:	3e03      	subs	r6, #3
 800c876:	42b4      	cmp	r4, r6
 800c878:	bf88      	it	hi
 800c87a:	2304      	movhi	r3, #4
 800c87c:	4443      	add	r3, r8
 800c87e:	2200      	movs	r2, #0
 800c880:	f843 2b04 	str.w	r2, [r3], #4
 800c884:	429f      	cmp	r7, r3
 800c886:	d2fb      	bcs.n	800c880 <__hexnan+0xcc>
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	b91b      	cbnz	r3, 800c894 <__hexnan+0xe0>
 800c88c:	4547      	cmp	r7, r8
 800c88e:	d127      	bne.n	800c8e0 <__hexnan+0x12c>
 800c890:	2301      	movs	r3, #1
 800c892:	603b      	str	r3, [r7, #0]
 800c894:	2005      	movs	r0, #5
 800c896:	e026      	b.n	800c8e6 <__hexnan+0x132>
 800c898:	3501      	adds	r5, #1
 800c89a:	2d08      	cmp	r5, #8
 800c89c:	f10b 0b01 	add.w	fp, fp, #1
 800c8a0:	dd06      	ble.n	800c8b0 <__hexnan+0xfc>
 800c8a2:	4544      	cmp	r4, r8
 800c8a4:	d9c3      	bls.n	800c82e <__hexnan+0x7a>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8ac:	2501      	movs	r5, #1
 800c8ae:	3c04      	subs	r4, #4
 800c8b0:	6822      	ldr	r2, [r4, #0]
 800c8b2:	f000 000f 	and.w	r0, r0, #15
 800c8b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c8ba:	6022      	str	r2, [r4, #0]
 800c8bc:	e7b7      	b.n	800c82e <__hexnan+0x7a>
 800c8be:	2508      	movs	r5, #8
 800c8c0:	e7b5      	b.n	800c82e <__hexnan+0x7a>
 800c8c2:	9b01      	ldr	r3, [sp, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d0df      	beq.n	800c888 <__hexnan+0xd4>
 800c8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8cc:	f1c3 0320 	rsb	r3, r3, #32
 800c8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c8d8:	401a      	ands	r2, r3
 800c8da:	f846 2c04 	str.w	r2, [r6, #-4]
 800c8de:	e7d3      	b.n	800c888 <__hexnan+0xd4>
 800c8e0:	3f04      	subs	r7, #4
 800c8e2:	e7d1      	b.n	800c888 <__hexnan+0xd4>
 800c8e4:	2004      	movs	r0, #4
 800c8e6:	b007      	add	sp, #28
 800c8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8ec <_localeconv_r>:
 800c8ec:	4800      	ldr	r0, [pc, #0]	; (800c8f0 <_localeconv_r+0x4>)
 800c8ee:	4770      	bx	lr
 800c8f0:	20000168 	.word	0x20000168

0800c8f4 <__retarget_lock_init_recursive>:
 800c8f4:	4770      	bx	lr

0800c8f6 <__retarget_lock_acquire_recursive>:
 800c8f6:	4770      	bx	lr

0800c8f8 <__retarget_lock_release_recursive>:
 800c8f8:	4770      	bx	lr

0800c8fa <__swhatbuf_r>:
 800c8fa:	b570      	push	{r4, r5, r6, lr}
 800c8fc:	460e      	mov	r6, r1
 800c8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c902:	2900      	cmp	r1, #0
 800c904:	b096      	sub	sp, #88	; 0x58
 800c906:	4614      	mov	r4, r2
 800c908:	461d      	mov	r5, r3
 800c90a:	da07      	bge.n	800c91c <__swhatbuf_r+0x22>
 800c90c:	2300      	movs	r3, #0
 800c90e:	602b      	str	r3, [r5, #0]
 800c910:	89b3      	ldrh	r3, [r6, #12]
 800c912:	061a      	lsls	r2, r3, #24
 800c914:	d410      	bmi.n	800c938 <__swhatbuf_r+0x3e>
 800c916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c91a:	e00e      	b.n	800c93a <__swhatbuf_r+0x40>
 800c91c:	466a      	mov	r2, sp
 800c91e:	f001 f8d5 	bl	800dacc <_fstat_r>
 800c922:	2800      	cmp	r0, #0
 800c924:	dbf2      	blt.n	800c90c <__swhatbuf_r+0x12>
 800c926:	9a01      	ldr	r2, [sp, #4]
 800c928:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c92c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c930:	425a      	negs	r2, r3
 800c932:	415a      	adcs	r2, r3
 800c934:	602a      	str	r2, [r5, #0]
 800c936:	e7ee      	b.n	800c916 <__swhatbuf_r+0x1c>
 800c938:	2340      	movs	r3, #64	; 0x40
 800c93a:	2000      	movs	r0, #0
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	b016      	add	sp, #88	; 0x58
 800c940:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c944 <__smakebuf_r>:
 800c944:	898b      	ldrh	r3, [r1, #12]
 800c946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c948:	079d      	lsls	r5, r3, #30
 800c94a:	4606      	mov	r6, r0
 800c94c:	460c      	mov	r4, r1
 800c94e:	d507      	bpl.n	800c960 <__smakebuf_r+0x1c>
 800c950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	6123      	str	r3, [r4, #16]
 800c958:	2301      	movs	r3, #1
 800c95a:	6163      	str	r3, [r4, #20]
 800c95c:	b002      	add	sp, #8
 800c95e:	bd70      	pop	{r4, r5, r6, pc}
 800c960:	ab01      	add	r3, sp, #4
 800c962:	466a      	mov	r2, sp
 800c964:	f7ff ffc9 	bl	800c8fa <__swhatbuf_r>
 800c968:	9900      	ldr	r1, [sp, #0]
 800c96a:	4605      	mov	r5, r0
 800c96c:	4630      	mov	r0, r6
 800c96e:	f7fc fc3d 	bl	80091ec <_malloc_r>
 800c972:	b948      	cbnz	r0, 800c988 <__smakebuf_r+0x44>
 800c974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c978:	059a      	lsls	r2, r3, #22
 800c97a:	d4ef      	bmi.n	800c95c <__smakebuf_r+0x18>
 800c97c:	f023 0303 	bic.w	r3, r3, #3
 800c980:	f043 0302 	orr.w	r3, r3, #2
 800c984:	81a3      	strh	r3, [r4, #12]
 800c986:	e7e3      	b.n	800c950 <__smakebuf_r+0xc>
 800c988:	4b0d      	ldr	r3, [pc, #52]	; (800c9c0 <__smakebuf_r+0x7c>)
 800c98a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	6020      	str	r0, [r4, #0]
 800c990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c994:	81a3      	strh	r3, [r4, #12]
 800c996:	9b00      	ldr	r3, [sp, #0]
 800c998:	6163      	str	r3, [r4, #20]
 800c99a:	9b01      	ldr	r3, [sp, #4]
 800c99c:	6120      	str	r0, [r4, #16]
 800c99e:	b15b      	cbz	r3, 800c9b8 <__smakebuf_r+0x74>
 800c9a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f001 f8a3 	bl	800daf0 <_isatty_r>
 800c9aa:	b128      	cbz	r0, 800c9b8 <__smakebuf_r+0x74>
 800c9ac:	89a3      	ldrh	r3, [r4, #12]
 800c9ae:	f023 0303 	bic.w	r3, r3, #3
 800c9b2:	f043 0301 	orr.w	r3, r3, #1
 800c9b6:	81a3      	strh	r3, [r4, #12]
 800c9b8:	89a0      	ldrh	r0, [r4, #12]
 800c9ba:	4305      	orrs	r5, r0
 800c9bc:	81a5      	strh	r5, [r4, #12]
 800c9be:	e7cd      	b.n	800c95c <__smakebuf_r+0x18>
 800c9c0:	0800c085 	.word	0x0800c085

0800c9c4 <__ascii_mbtowc>:
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	b901      	cbnz	r1, 800c9ca <__ascii_mbtowc+0x6>
 800c9c8:	a901      	add	r1, sp, #4
 800c9ca:	b142      	cbz	r2, 800c9de <__ascii_mbtowc+0x1a>
 800c9cc:	b14b      	cbz	r3, 800c9e2 <__ascii_mbtowc+0x1e>
 800c9ce:	7813      	ldrb	r3, [r2, #0]
 800c9d0:	600b      	str	r3, [r1, #0]
 800c9d2:	7812      	ldrb	r2, [r2, #0]
 800c9d4:	1e10      	subs	r0, r2, #0
 800c9d6:	bf18      	it	ne
 800c9d8:	2001      	movne	r0, #1
 800c9da:	b002      	add	sp, #8
 800c9dc:	4770      	bx	lr
 800c9de:	4610      	mov	r0, r2
 800c9e0:	e7fb      	b.n	800c9da <__ascii_mbtowc+0x16>
 800c9e2:	f06f 0001 	mvn.w	r0, #1
 800c9e6:	e7f8      	b.n	800c9da <__ascii_mbtowc+0x16>

0800c9e8 <__malloc_lock>:
 800c9e8:	4801      	ldr	r0, [pc, #4]	; (800c9f0 <__malloc_lock+0x8>)
 800c9ea:	f7ff bf84 	b.w	800c8f6 <__retarget_lock_acquire_recursive>
 800c9ee:	bf00      	nop
 800c9f0:	200005d8 	.word	0x200005d8

0800c9f4 <__malloc_unlock>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__malloc_unlock+0x8>)
 800c9f6:	f7ff bf7f 	b.w	800c8f8 <__retarget_lock_release_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	200005d8 	.word	0x200005d8

0800ca00 <_Balloc>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca04:	4604      	mov	r4, r0
 800ca06:	460d      	mov	r5, r1
 800ca08:	b976      	cbnz	r6, 800ca28 <_Balloc+0x28>
 800ca0a:	2010      	movs	r0, #16
 800ca0c:	f7fc fb7a 	bl	8009104 <malloc>
 800ca10:	4602      	mov	r2, r0
 800ca12:	6260      	str	r0, [r4, #36]	; 0x24
 800ca14:	b920      	cbnz	r0, 800ca20 <_Balloc+0x20>
 800ca16:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <_Balloc+0x78>)
 800ca18:	4818      	ldr	r0, [pc, #96]	; (800ca7c <_Balloc+0x7c>)
 800ca1a:	2166      	movs	r1, #102	; 0x66
 800ca1c:	f001 f816 	bl	800da4c <__assert_func>
 800ca20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca24:	6006      	str	r6, [r0, #0]
 800ca26:	60c6      	str	r6, [r0, #12]
 800ca28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ca2a:	68f3      	ldr	r3, [r6, #12]
 800ca2c:	b183      	cbz	r3, 800ca50 <_Balloc+0x50>
 800ca2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca36:	b9b8      	cbnz	r0, 800ca68 <_Balloc+0x68>
 800ca38:	2101      	movs	r1, #1
 800ca3a:	fa01 f605 	lsl.w	r6, r1, r5
 800ca3e:	1d72      	adds	r2, r6, #5
 800ca40:	0092      	lsls	r2, r2, #2
 800ca42:	4620      	mov	r0, r4
 800ca44:	f000 fc90 	bl	800d368 <_calloc_r>
 800ca48:	b160      	cbz	r0, 800ca64 <_Balloc+0x64>
 800ca4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca4e:	e00e      	b.n	800ca6e <_Balloc+0x6e>
 800ca50:	2221      	movs	r2, #33	; 0x21
 800ca52:	2104      	movs	r1, #4
 800ca54:	4620      	mov	r0, r4
 800ca56:	f000 fc87 	bl	800d368 <_calloc_r>
 800ca5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca5c:	60f0      	str	r0, [r6, #12]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1e4      	bne.n	800ca2e <_Balloc+0x2e>
 800ca64:	2000      	movs	r0, #0
 800ca66:	bd70      	pop	{r4, r5, r6, pc}
 800ca68:	6802      	ldr	r2, [r0, #0]
 800ca6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca74:	e7f7      	b.n	800ca66 <_Balloc+0x66>
 800ca76:	bf00      	nop
 800ca78:	0800eb4e 	.word	0x0800eb4e
 800ca7c:	0800ecb8 	.word	0x0800ecb8

0800ca80 <_Bfree>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca84:	4605      	mov	r5, r0
 800ca86:	460c      	mov	r4, r1
 800ca88:	b976      	cbnz	r6, 800caa8 <_Bfree+0x28>
 800ca8a:	2010      	movs	r0, #16
 800ca8c:	f7fc fb3a 	bl	8009104 <malloc>
 800ca90:	4602      	mov	r2, r0
 800ca92:	6268      	str	r0, [r5, #36]	; 0x24
 800ca94:	b920      	cbnz	r0, 800caa0 <_Bfree+0x20>
 800ca96:	4b09      	ldr	r3, [pc, #36]	; (800cabc <_Bfree+0x3c>)
 800ca98:	4809      	ldr	r0, [pc, #36]	; (800cac0 <_Bfree+0x40>)
 800ca9a:	218a      	movs	r1, #138	; 0x8a
 800ca9c:	f000 ffd6 	bl	800da4c <__assert_func>
 800caa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caa4:	6006      	str	r6, [r0, #0]
 800caa6:	60c6      	str	r6, [r0, #12]
 800caa8:	b13c      	cbz	r4, 800caba <_Bfree+0x3a>
 800caaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800caac:	6862      	ldr	r2, [r4, #4]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cab4:	6021      	str	r1, [r4, #0]
 800cab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800caba:	bd70      	pop	{r4, r5, r6, pc}
 800cabc:	0800eb4e 	.word	0x0800eb4e
 800cac0:	0800ecb8 	.word	0x0800ecb8

0800cac4 <__multadd>:
 800cac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac8:	690e      	ldr	r6, [r1, #16]
 800caca:	4607      	mov	r7, r0
 800cacc:	4698      	mov	r8, r3
 800cace:	460c      	mov	r4, r1
 800cad0:	f101 0014 	add.w	r0, r1, #20
 800cad4:	2300      	movs	r3, #0
 800cad6:	6805      	ldr	r5, [r0, #0]
 800cad8:	b2a9      	uxth	r1, r5
 800cada:	fb02 8101 	mla	r1, r2, r1, r8
 800cade:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cae2:	0c2d      	lsrs	r5, r5, #16
 800cae4:	fb02 c505 	mla	r5, r2, r5, ip
 800cae8:	b289      	uxth	r1, r1
 800caea:	3301      	adds	r3, #1
 800caec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800caf0:	429e      	cmp	r6, r3
 800caf2:	f840 1b04 	str.w	r1, [r0], #4
 800caf6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cafa:	dcec      	bgt.n	800cad6 <__multadd+0x12>
 800cafc:	f1b8 0f00 	cmp.w	r8, #0
 800cb00:	d022      	beq.n	800cb48 <__multadd+0x84>
 800cb02:	68a3      	ldr	r3, [r4, #8]
 800cb04:	42b3      	cmp	r3, r6
 800cb06:	dc19      	bgt.n	800cb3c <__multadd+0x78>
 800cb08:	6861      	ldr	r1, [r4, #4]
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	3101      	adds	r1, #1
 800cb0e:	f7ff ff77 	bl	800ca00 <_Balloc>
 800cb12:	4605      	mov	r5, r0
 800cb14:	b928      	cbnz	r0, 800cb22 <__multadd+0x5e>
 800cb16:	4602      	mov	r2, r0
 800cb18:	4b0d      	ldr	r3, [pc, #52]	; (800cb50 <__multadd+0x8c>)
 800cb1a:	480e      	ldr	r0, [pc, #56]	; (800cb54 <__multadd+0x90>)
 800cb1c:	21b5      	movs	r1, #181	; 0xb5
 800cb1e:	f000 ff95 	bl	800da4c <__assert_func>
 800cb22:	6922      	ldr	r2, [r4, #16]
 800cb24:	3202      	adds	r2, #2
 800cb26:	f104 010c 	add.w	r1, r4, #12
 800cb2a:	0092      	lsls	r2, r2, #2
 800cb2c:	300c      	adds	r0, #12
 800cb2e:	f7fc faf9 	bl	8009124 <memcpy>
 800cb32:	4621      	mov	r1, r4
 800cb34:	4638      	mov	r0, r7
 800cb36:	f7ff ffa3 	bl	800ca80 <_Bfree>
 800cb3a:	462c      	mov	r4, r5
 800cb3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cb40:	3601      	adds	r6, #1
 800cb42:	f8c3 8014 	str.w	r8, [r3, #20]
 800cb46:	6126      	str	r6, [r4, #16]
 800cb48:	4620      	mov	r0, r4
 800cb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb4e:	bf00      	nop
 800cb50:	0800ebc4 	.word	0x0800ebc4
 800cb54:	0800ecb8 	.word	0x0800ecb8

0800cb58 <__s2b>:
 800cb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb5c:	460c      	mov	r4, r1
 800cb5e:	4615      	mov	r5, r2
 800cb60:	461f      	mov	r7, r3
 800cb62:	2209      	movs	r2, #9
 800cb64:	3308      	adds	r3, #8
 800cb66:	4606      	mov	r6, r0
 800cb68:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	2201      	movs	r2, #1
 800cb70:	429a      	cmp	r2, r3
 800cb72:	db09      	blt.n	800cb88 <__s2b+0x30>
 800cb74:	4630      	mov	r0, r6
 800cb76:	f7ff ff43 	bl	800ca00 <_Balloc>
 800cb7a:	b940      	cbnz	r0, 800cb8e <__s2b+0x36>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	4b19      	ldr	r3, [pc, #100]	; (800cbe4 <__s2b+0x8c>)
 800cb80:	4819      	ldr	r0, [pc, #100]	; (800cbe8 <__s2b+0x90>)
 800cb82:	21ce      	movs	r1, #206	; 0xce
 800cb84:	f000 ff62 	bl	800da4c <__assert_func>
 800cb88:	0052      	lsls	r2, r2, #1
 800cb8a:	3101      	adds	r1, #1
 800cb8c:	e7f0      	b.n	800cb70 <__s2b+0x18>
 800cb8e:	9b08      	ldr	r3, [sp, #32]
 800cb90:	6143      	str	r3, [r0, #20]
 800cb92:	2d09      	cmp	r5, #9
 800cb94:	f04f 0301 	mov.w	r3, #1
 800cb98:	6103      	str	r3, [r0, #16]
 800cb9a:	dd16      	ble.n	800cbca <__s2b+0x72>
 800cb9c:	f104 0909 	add.w	r9, r4, #9
 800cba0:	46c8      	mov	r8, r9
 800cba2:	442c      	add	r4, r5
 800cba4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cba8:	4601      	mov	r1, r0
 800cbaa:	3b30      	subs	r3, #48	; 0x30
 800cbac:	220a      	movs	r2, #10
 800cbae:	4630      	mov	r0, r6
 800cbb0:	f7ff ff88 	bl	800cac4 <__multadd>
 800cbb4:	45a0      	cmp	r8, r4
 800cbb6:	d1f5      	bne.n	800cba4 <__s2b+0x4c>
 800cbb8:	f1a5 0408 	sub.w	r4, r5, #8
 800cbbc:	444c      	add	r4, r9
 800cbbe:	1b2d      	subs	r5, r5, r4
 800cbc0:	1963      	adds	r3, r4, r5
 800cbc2:	42bb      	cmp	r3, r7
 800cbc4:	db04      	blt.n	800cbd0 <__s2b+0x78>
 800cbc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbca:	340a      	adds	r4, #10
 800cbcc:	2509      	movs	r5, #9
 800cbce:	e7f6      	b.n	800cbbe <__s2b+0x66>
 800cbd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbd4:	4601      	mov	r1, r0
 800cbd6:	3b30      	subs	r3, #48	; 0x30
 800cbd8:	220a      	movs	r2, #10
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f7ff ff72 	bl	800cac4 <__multadd>
 800cbe0:	e7ee      	b.n	800cbc0 <__s2b+0x68>
 800cbe2:	bf00      	nop
 800cbe4:	0800ebc4 	.word	0x0800ebc4
 800cbe8:	0800ecb8 	.word	0x0800ecb8

0800cbec <__hi0bits>:
 800cbec:	0c02      	lsrs	r2, r0, #16
 800cbee:	0412      	lsls	r2, r2, #16
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	b9ca      	cbnz	r2, 800cc28 <__hi0bits+0x3c>
 800cbf4:	0403      	lsls	r3, r0, #16
 800cbf6:	2010      	movs	r0, #16
 800cbf8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cbfc:	bf04      	itt	eq
 800cbfe:	021b      	lsleq	r3, r3, #8
 800cc00:	3008      	addeq	r0, #8
 800cc02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cc06:	bf04      	itt	eq
 800cc08:	011b      	lsleq	r3, r3, #4
 800cc0a:	3004      	addeq	r0, #4
 800cc0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cc10:	bf04      	itt	eq
 800cc12:	009b      	lsleq	r3, r3, #2
 800cc14:	3002      	addeq	r0, #2
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	db05      	blt.n	800cc26 <__hi0bits+0x3a>
 800cc1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cc1e:	f100 0001 	add.w	r0, r0, #1
 800cc22:	bf08      	it	eq
 800cc24:	2020      	moveq	r0, #32
 800cc26:	4770      	bx	lr
 800cc28:	2000      	movs	r0, #0
 800cc2a:	e7e5      	b.n	800cbf8 <__hi0bits+0xc>

0800cc2c <__lo0bits>:
 800cc2c:	6803      	ldr	r3, [r0, #0]
 800cc2e:	4602      	mov	r2, r0
 800cc30:	f013 0007 	ands.w	r0, r3, #7
 800cc34:	d00b      	beq.n	800cc4e <__lo0bits+0x22>
 800cc36:	07d9      	lsls	r1, r3, #31
 800cc38:	d422      	bmi.n	800cc80 <__lo0bits+0x54>
 800cc3a:	0798      	lsls	r0, r3, #30
 800cc3c:	bf49      	itett	mi
 800cc3e:	085b      	lsrmi	r3, r3, #1
 800cc40:	089b      	lsrpl	r3, r3, #2
 800cc42:	2001      	movmi	r0, #1
 800cc44:	6013      	strmi	r3, [r2, #0]
 800cc46:	bf5c      	itt	pl
 800cc48:	6013      	strpl	r3, [r2, #0]
 800cc4a:	2002      	movpl	r0, #2
 800cc4c:	4770      	bx	lr
 800cc4e:	b299      	uxth	r1, r3
 800cc50:	b909      	cbnz	r1, 800cc56 <__lo0bits+0x2a>
 800cc52:	0c1b      	lsrs	r3, r3, #16
 800cc54:	2010      	movs	r0, #16
 800cc56:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc5a:	bf04      	itt	eq
 800cc5c:	0a1b      	lsreq	r3, r3, #8
 800cc5e:	3008      	addeq	r0, #8
 800cc60:	0719      	lsls	r1, r3, #28
 800cc62:	bf04      	itt	eq
 800cc64:	091b      	lsreq	r3, r3, #4
 800cc66:	3004      	addeq	r0, #4
 800cc68:	0799      	lsls	r1, r3, #30
 800cc6a:	bf04      	itt	eq
 800cc6c:	089b      	lsreq	r3, r3, #2
 800cc6e:	3002      	addeq	r0, #2
 800cc70:	07d9      	lsls	r1, r3, #31
 800cc72:	d403      	bmi.n	800cc7c <__lo0bits+0x50>
 800cc74:	085b      	lsrs	r3, r3, #1
 800cc76:	f100 0001 	add.w	r0, r0, #1
 800cc7a:	d003      	beq.n	800cc84 <__lo0bits+0x58>
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	4770      	bx	lr
 800cc80:	2000      	movs	r0, #0
 800cc82:	4770      	bx	lr
 800cc84:	2020      	movs	r0, #32
 800cc86:	4770      	bx	lr

0800cc88 <__i2b>:
 800cc88:	b510      	push	{r4, lr}
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	2101      	movs	r1, #1
 800cc8e:	f7ff feb7 	bl	800ca00 <_Balloc>
 800cc92:	4602      	mov	r2, r0
 800cc94:	b928      	cbnz	r0, 800cca2 <__i2b+0x1a>
 800cc96:	4b05      	ldr	r3, [pc, #20]	; (800ccac <__i2b+0x24>)
 800cc98:	4805      	ldr	r0, [pc, #20]	; (800ccb0 <__i2b+0x28>)
 800cc9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cc9e:	f000 fed5 	bl	800da4c <__assert_func>
 800cca2:	2301      	movs	r3, #1
 800cca4:	6144      	str	r4, [r0, #20]
 800cca6:	6103      	str	r3, [r0, #16]
 800cca8:	bd10      	pop	{r4, pc}
 800ccaa:	bf00      	nop
 800ccac:	0800ebc4 	.word	0x0800ebc4
 800ccb0:	0800ecb8 	.word	0x0800ecb8

0800ccb4 <__multiply>:
 800ccb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb8:	4614      	mov	r4, r2
 800ccba:	690a      	ldr	r2, [r1, #16]
 800ccbc:	6923      	ldr	r3, [r4, #16]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	bfb8      	it	lt
 800ccc2:	460b      	movlt	r3, r1
 800ccc4:	460d      	mov	r5, r1
 800ccc6:	bfbc      	itt	lt
 800ccc8:	4625      	movlt	r5, r4
 800ccca:	461c      	movlt	r4, r3
 800cccc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ccd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ccd4:	68ab      	ldr	r3, [r5, #8]
 800ccd6:	6869      	ldr	r1, [r5, #4]
 800ccd8:	eb0a 0709 	add.w	r7, sl, r9
 800ccdc:	42bb      	cmp	r3, r7
 800ccde:	b085      	sub	sp, #20
 800cce0:	bfb8      	it	lt
 800cce2:	3101      	addlt	r1, #1
 800cce4:	f7ff fe8c 	bl	800ca00 <_Balloc>
 800cce8:	b930      	cbnz	r0, 800ccf8 <__multiply+0x44>
 800ccea:	4602      	mov	r2, r0
 800ccec:	4b42      	ldr	r3, [pc, #264]	; (800cdf8 <__multiply+0x144>)
 800ccee:	4843      	ldr	r0, [pc, #268]	; (800cdfc <__multiply+0x148>)
 800ccf0:	f240 115d 	movw	r1, #349	; 0x15d
 800ccf4:	f000 feaa 	bl	800da4c <__assert_func>
 800ccf8:	f100 0614 	add.w	r6, r0, #20
 800ccfc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cd00:	4633      	mov	r3, r6
 800cd02:	2200      	movs	r2, #0
 800cd04:	4543      	cmp	r3, r8
 800cd06:	d31e      	bcc.n	800cd46 <__multiply+0x92>
 800cd08:	f105 0c14 	add.w	ip, r5, #20
 800cd0c:	f104 0314 	add.w	r3, r4, #20
 800cd10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cd14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cd18:	9202      	str	r2, [sp, #8]
 800cd1a:	ebac 0205 	sub.w	r2, ip, r5
 800cd1e:	3a15      	subs	r2, #21
 800cd20:	f022 0203 	bic.w	r2, r2, #3
 800cd24:	3204      	adds	r2, #4
 800cd26:	f105 0115 	add.w	r1, r5, #21
 800cd2a:	458c      	cmp	ip, r1
 800cd2c:	bf38      	it	cc
 800cd2e:	2204      	movcc	r2, #4
 800cd30:	9201      	str	r2, [sp, #4]
 800cd32:	9a02      	ldr	r2, [sp, #8]
 800cd34:	9303      	str	r3, [sp, #12]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d808      	bhi.n	800cd4c <__multiply+0x98>
 800cd3a:	2f00      	cmp	r7, #0
 800cd3c:	dc55      	bgt.n	800cdea <__multiply+0x136>
 800cd3e:	6107      	str	r7, [r0, #16]
 800cd40:	b005      	add	sp, #20
 800cd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd46:	f843 2b04 	str.w	r2, [r3], #4
 800cd4a:	e7db      	b.n	800cd04 <__multiply+0x50>
 800cd4c:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd50:	f1ba 0f00 	cmp.w	sl, #0
 800cd54:	d020      	beq.n	800cd98 <__multiply+0xe4>
 800cd56:	f105 0e14 	add.w	lr, r5, #20
 800cd5a:	46b1      	mov	r9, r6
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cd62:	f8d9 b000 	ldr.w	fp, [r9]
 800cd66:	b2a1      	uxth	r1, r4
 800cd68:	fa1f fb8b 	uxth.w	fp, fp
 800cd6c:	fb0a b101 	mla	r1, sl, r1, fp
 800cd70:	4411      	add	r1, r2
 800cd72:	f8d9 2000 	ldr.w	r2, [r9]
 800cd76:	0c24      	lsrs	r4, r4, #16
 800cd78:	0c12      	lsrs	r2, r2, #16
 800cd7a:	fb0a 2404 	mla	r4, sl, r4, r2
 800cd7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cd82:	b289      	uxth	r1, r1
 800cd84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cd88:	45f4      	cmp	ip, lr
 800cd8a:	f849 1b04 	str.w	r1, [r9], #4
 800cd8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cd92:	d8e4      	bhi.n	800cd5e <__multiply+0xaa>
 800cd94:	9901      	ldr	r1, [sp, #4]
 800cd96:	5072      	str	r2, [r6, r1]
 800cd98:	9a03      	ldr	r2, [sp, #12]
 800cd9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd9e:	3304      	adds	r3, #4
 800cda0:	f1b9 0f00 	cmp.w	r9, #0
 800cda4:	d01f      	beq.n	800cde6 <__multiply+0x132>
 800cda6:	6834      	ldr	r4, [r6, #0]
 800cda8:	f105 0114 	add.w	r1, r5, #20
 800cdac:	46b6      	mov	lr, r6
 800cdae:	f04f 0a00 	mov.w	sl, #0
 800cdb2:	880a      	ldrh	r2, [r1, #0]
 800cdb4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cdb8:	fb09 b202 	mla	r2, r9, r2, fp
 800cdbc:	4492      	add	sl, r2
 800cdbe:	b2a4      	uxth	r4, r4
 800cdc0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cdc4:	f84e 4b04 	str.w	r4, [lr], #4
 800cdc8:	f851 4b04 	ldr.w	r4, [r1], #4
 800cdcc:	f8be 2000 	ldrh.w	r2, [lr]
 800cdd0:	0c24      	lsrs	r4, r4, #16
 800cdd2:	fb09 2404 	mla	r4, r9, r4, r2
 800cdd6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cdda:	458c      	cmp	ip, r1
 800cddc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cde0:	d8e7      	bhi.n	800cdb2 <__multiply+0xfe>
 800cde2:	9a01      	ldr	r2, [sp, #4]
 800cde4:	50b4      	str	r4, [r6, r2]
 800cde6:	3604      	adds	r6, #4
 800cde8:	e7a3      	b.n	800cd32 <__multiply+0x7e>
 800cdea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1a5      	bne.n	800cd3e <__multiply+0x8a>
 800cdf2:	3f01      	subs	r7, #1
 800cdf4:	e7a1      	b.n	800cd3a <__multiply+0x86>
 800cdf6:	bf00      	nop
 800cdf8:	0800ebc4 	.word	0x0800ebc4
 800cdfc:	0800ecb8 	.word	0x0800ecb8

0800ce00 <__pow5mult>:
 800ce00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce04:	4615      	mov	r5, r2
 800ce06:	f012 0203 	ands.w	r2, r2, #3
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	460f      	mov	r7, r1
 800ce0e:	d007      	beq.n	800ce20 <__pow5mult+0x20>
 800ce10:	4c25      	ldr	r4, [pc, #148]	; (800cea8 <__pow5mult+0xa8>)
 800ce12:	3a01      	subs	r2, #1
 800ce14:	2300      	movs	r3, #0
 800ce16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce1a:	f7ff fe53 	bl	800cac4 <__multadd>
 800ce1e:	4607      	mov	r7, r0
 800ce20:	10ad      	asrs	r5, r5, #2
 800ce22:	d03d      	beq.n	800cea0 <__pow5mult+0xa0>
 800ce24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce26:	b97c      	cbnz	r4, 800ce48 <__pow5mult+0x48>
 800ce28:	2010      	movs	r0, #16
 800ce2a:	f7fc f96b 	bl	8009104 <malloc>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	6270      	str	r0, [r6, #36]	; 0x24
 800ce32:	b928      	cbnz	r0, 800ce40 <__pow5mult+0x40>
 800ce34:	4b1d      	ldr	r3, [pc, #116]	; (800ceac <__pow5mult+0xac>)
 800ce36:	481e      	ldr	r0, [pc, #120]	; (800ceb0 <__pow5mult+0xb0>)
 800ce38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce3c:	f000 fe06 	bl	800da4c <__assert_func>
 800ce40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce44:	6004      	str	r4, [r0, #0]
 800ce46:	60c4      	str	r4, [r0, #12]
 800ce48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce50:	b94c      	cbnz	r4, 800ce66 <__pow5mult+0x66>
 800ce52:	f240 2171 	movw	r1, #625	; 0x271
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7ff ff16 	bl	800cc88 <__i2b>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce62:	4604      	mov	r4, r0
 800ce64:	6003      	str	r3, [r0, #0]
 800ce66:	f04f 0900 	mov.w	r9, #0
 800ce6a:	07eb      	lsls	r3, r5, #31
 800ce6c:	d50a      	bpl.n	800ce84 <__pow5mult+0x84>
 800ce6e:	4639      	mov	r1, r7
 800ce70:	4622      	mov	r2, r4
 800ce72:	4630      	mov	r0, r6
 800ce74:	f7ff ff1e 	bl	800ccb4 <__multiply>
 800ce78:	4639      	mov	r1, r7
 800ce7a:	4680      	mov	r8, r0
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7ff fdff 	bl	800ca80 <_Bfree>
 800ce82:	4647      	mov	r7, r8
 800ce84:	106d      	asrs	r5, r5, #1
 800ce86:	d00b      	beq.n	800cea0 <__pow5mult+0xa0>
 800ce88:	6820      	ldr	r0, [r4, #0]
 800ce8a:	b938      	cbnz	r0, 800ce9c <__pow5mult+0x9c>
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	4621      	mov	r1, r4
 800ce90:	4630      	mov	r0, r6
 800ce92:	f7ff ff0f 	bl	800ccb4 <__multiply>
 800ce96:	6020      	str	r0, [r4, #0]
 800ce98:	f8c0 9000 	str.w	r9, [r0]
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	e7e4      	b.n	800ce6a <__pow5mult+0x6a>
 800cea0:	4638      	mov	r0, r7
 800cea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cea6:	bf00      	nop
 800cea8:	0800ee08 	.word	0x0800ee08
 800ceac:	0800eb4e 	.word	0x0800eb4e
 800ceb0:	0800ecb8 	.word	0x0800ecb8

0800ceb4 <__lshift>:
 800ceb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb8:	460c      	mov	r4, r1
 800ceba:	6849      	ldr	r1, [r1, #4]
 800cebc:	6923      	ldr	r3, [r4, #16]
 800cebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cec2:	68a3      	ldr	r3, [r4, #8]
 800cec4:	4607      	mov	r7, r0
 800cec6:	4691      	mov	r9, r2
 800cec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cecc:	f108 0601 	add.w	r6, r8, #1
 800ced0:	42b3      	cmp	r3, r6
 800ced2:	db0b      	blt.n	800ceec <__lshift+0x38>
 800ced4:	4638      	mov	r0, r7
 800ced6:	f7ff fd93 	bl	800ca00 <_Balloc>
 800ceda:	4605      	mov	r5, r0
 800cedc:	b948      	cbnz	r0, 800cef2 <__lshift+0x3e>
 800cede:	4602      	mov	r2, r0
 800cee0:	4b28      	ldr	r3, [pc, #160]	; (800cf84 <__lshift+0xd0>)
 800cee2:	4829      	ldr	r0, [pc, #164]	; (800cf88 <__lshift+0xd4>)
 800cee4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cee8:	f000 fdb0 	bl	800da4c <__assert_func>
 800ceec:	3101      	adds	r1, #1
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	e7ee      	b.n	800ced0 <__lshift+0x1c>
 800cef2:	2300      	movs	r3, #0
 800cef4:	f100 0114 	add.w	r1, r0, #20
 800cef8:	f100 0210 	add.w	r2, r0, #16
 800cefc:	4618      	mov	r0, r3
 800cefe:	4553      	cmp	r3, sl
 800cf00:	db33      	blt.n	800cf6a <__lshift+0xb6>
 800cf02:	6920      	ldr	r0, [r4, #16]
 800cf04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf08:	f104 0314 	add.w	r3, r4, #20
 800cf0c:	f019 091f 	ands.w	r9, r9, #31
 800cf10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf18:	d02b      	beq.n	800cf72 <__lshift+0xbe>
 800cf1a:	f1c9 0e20 	rsb	lr, r9, #32
 800cf1e:	468a      	mov	sl, r1
 800cf20:	2200      	movs	r2, #0
 800cf22:	6818      	ldr	r0, [r3, #0]
 800cf24:	fa00 f009 	lsl.w	r0, r0, r9
 800cf28:	4302      	orrs	r2, r0
 800cf2a:	f84a 2b04 	str.w	r2, [sl], #4
 800cf2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf32:	459c      	cmp	ip, r3
 800cf34:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf38:	d8f3      	bhi.n	800cf22 <__lshift+0x6e>
 800cf3a:	ebac 0304 	sub.w	r3, ip, r4
 800cf3e:	3b15      	subs	r3, #21
 800cf40:	f023 0303 	bic.w	r3, r3, #3
 800cf44:	3304      	adds	r3, #4
 800cf46:	f104 0015 	add.w	r0, r4, #21
 800cf4a:	4584      	cmp	ip, r0
 800cf4c:	bf38      	it	cc
 800cf4e:	2304      	movcc	r3, #4
 800cf50:	50ca      	str	r2, [r1, r3]
 800cf52:	b10a      	cbz	r2, 800cf58 <__lshift+0xa4>
 800cf54:	f108 0602 	add.w	r6, r8, #2
 800cf58:	3e01      	subs	r6, #1
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	612e      	str	r6, [r5, #16]
 800cf5e:	4621      	mov	r1, r4
 800cf60:	f7ff fd8e 	bl	800ca80 <_Bfree>
 800cf64:	4628      	mov	r0, r5
 800cf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf6e:	3301      	adds	r3, #1
 800cf70:	e7c5      	b.n	800cefe <__lshift+0x4a>
 800cf72:	3904      	subs	r1, #4
 800cf74:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf78:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf7c:	459c      	cmp	ip, r3
 800cf7e:	d8f9      	bhi.n	800cf74 <__lshift+0xc0>
 800cf80:	e7ea      	b.n	800cf58 <__lshift+0xa4>
 800cf82:	bf00      	nop
 800cf84:	0800ebc4 	.word	0x0800ebc4
 800cf88:	0800ecb8 	.word	0x0800ecb8

0800cf8c <__mcmp>:
 800cf8c:	690a      	ldr	r2, [r1, #16]
 800cf8e:	4603      	mov	r3, r0
 800cf90:	6900      	ldr	r0, [r0, #16]
 800cf92:	1a80      	subs	r0, r0, r2
 800cf94:	b530      	push	{r4, r5, lr}
 800cf96:	d10d      	bne.n	800cfb4 <__mcmp+0x28>
 800cf98:	3314      	adds	r3, #20
 800cf9a:	3114      	adds	r1, #20
 800cf9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfac:	4295      	cmp	r5, r2
 800cfae:	d002      	beq.n	800cfb6 <__mcmp+0x2a>
 800cfb0:	d304      	bcc.n	800cfbc <__mcmp+0x30>
 800cfb2:	2001      	movs	r0, #1
 800cfb4:	bd30      	pop	{r4, r5, pc}
 800cfb6:	42a3      	cmp	r3, r4
 800cfb8:	d3f4      	bcc.n	800cfa4 <__mcmp+0x18>
 800cfba:	e7fb      	b.n	800cfb4 <__mcmp+0x28>
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc0:	e7f8      	b.n	800cfb4 <__mcmp+0x28>
	...

0800cfc4 <__mdiff>:
 800cfc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	460c      	mov	r4, r1
 800cfca:	4606      	mov	r6, r0
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4620      	mov	r0, r4
 800cfd0:	4617      	mov	r7, r2
 800cfd2:	f7ff ffdb 	bl	800cf8c <__mcmp>
 800cfd6:	1e05      	subs	r5, r0, #0
 800cfd8:	d111      	bne.n	800cffe <__mdiff+0x3a>
 800cfda:	4629      	mov	r1, r5
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f7ff fd0f 	bl	800ca00 <_Balloc>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	b928      	cbnz	r0, 800cff2 <__mdiff+0x2e>
 800cfe6:	4b3a      	ldr	r3, [pc, #232]	; (800d0d0 <__mdiff+0x10c>)
 800cfe8:	f240 2132 	movw	r1, #562	; 0x232
 800cfec:	4839      	ldr	r0, [pc, #228]	; (800d0d4 <__mdiff+0x110>)
 800cfee:	f000 fd2d 	bl	800da4c <__assert_func>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cff8:	4610      	mov	r0, r2
 800cffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffe:	bfa4      	itt	ge
 800d000:	463b      	movge	r3, r7
 800d002:	4627      	movge	r7, r4
 800d004:	4630      	mov	r0, r6
 800d006:	6879      	ldr	r1, [r7, #4]
 800d008:	bfa6      	itte	ge
 800d00a:	461c      	movge	r4, r3
 800d00c:	2500      	movge	r5, #0
 800d00e:	2501      	movlt	r5, #1
 800d010:	f7ff fcf6 	bl	800ca00 <_Balloc>
 800d014:	4602      	mov	r2, r0
 800d016:	b918      	cbnz	r0, 800d020 <__mdiff+0x5c>
 800d018:	4b2d      	ldr	r3, [pc, #180]	; (800d0d0 <__mdiff+0x10c>)
 800d01a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d01e:	e7e5      	b.n	800cfec <__mdiff+0x28>
 800d020:	693e      	ldr	r6, [r7, #16]
 800d022:	60c5      	str	r5, [r0, #12]
 800d024:	6925      	ldr	r5, [r4, #16]
 800d026:	f107 0114 	add.w	r1, r7, #20
 800d02a:	f100 0e14 	add.w	lr, r0, #20
 800d02e:	f104 0914 	add.w	r9, r4, #20
 800d032:	f107 0010 	add.w	r0, r7, #16
 800d036:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d03a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d03e:	46f2      	mov	sl, lr
 800d040:	2700      	movs	r7, #0
 800d042:	f859 3b04 	ldr.w	r3, [r9], #4
 800d046:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d04a:	fa1f f883 	uxth.w	r8, r3
 800d04e:	fa17 f78b 	uxtah	r7, r7, fp
 800d052:	0c1b      	lsrs	r3, r3, #16
 800d054:	eba7 0808 	sub.w	r8, r7, r8
 800d058:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d05c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d060:	fa1f f888 	uxth.w	r8, r8
 800d064:	141f      	asrs	r7, r3, #16
 800d066:	454d      	cmp	r5, r9
 800d068:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d06c:	f84a 3b04 	str.w	r3, [sl], #4
 800d070:	d8e7      	bhi.n	800d042 <__mdiff+0x7e>
 800d072:	1b2b      	subs	r3, r5, r4
 800d074:	3b15      	subs	r3, #21
 800d076:	f023 0303 	bic.w	r3, r3, #3
 800d07a:	3304      	adds	r3, #4
 800d07c:	3415      	adds	r4, #21
 800d07e:	42a5      	cmp	r5, r4
 800d080:	bf38      	it	cc
 800d082:	2304      	movcc	r3, #4
 800d084:	4419      	add	r1, r3
 800d086:	4473      	add	r3, lr
 800d088:	469e      	mov	lr, r3
 800d08a:	460d      	mov	r5, r1
 800d08c:	4565      	cmp	r5, ip
 800d08e:	d30e      	bcc.n	800d0ae <__mdiff+0xea>
 800d090:	f10c 0003 	add.w	r0, ip, #3
 800d094:	1a40      	subs	r0, r0, r1
 800d096:	f020 0003 	bic.w	r0, r0, #3
 800d09a:	3903      	subs	r1, #3
 800d09c:	458c      	cmp	ip, r1
 800d09e:	bf38      	it	cc
 800d0a0:	2000      	movcc	r0, #0
 800d0a2:	4418      	add	r0, r3
 800d0a4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800d0a8:	b17b      	cbz	r3, 800d0ca <__mdiff+0x106>
 800d0aa:	6116      	str	r6, [r2, #16]
 800d0ac:	e7a4      	b.n	800cff8 <__mdiff+0x34>
 800d0ae:	f855 8b04 	ldr.w	r8, [r5], #4
 800d0b2:	fa17 f488 	uxtah	r4, r7, r8
 800d0b6:	1420      	asrs	r0, r4, #16
 800d0b8:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d0bc:	b2a4      	uxth	r4, r4
 800d0be:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800d0c2:	f84e 4b04 	str.w	r4, [lr], #4
 800d0c6:	1407      	asrs	r7, r0, #16
 800d0c8:	e7e0      	b.n	800d08c <__mdiff+0xc8>
 800d0ca:	3e01      	subs	r6, #1
 800d0cc:	e7ea      	b.n	800d0a4 <__mdiff+0xe0>
 800d0ce:	bf00      	nop
 800d0d0:	0800ebc4 	.word	0x0800ebc4
 800d0d4:	0800ecb8 	.word	0x0800ecb8

0800d0d8 <__ulp>:
 800d0d8:	4b11      	ldr	r3, [pc, #68]	; (800d120 <__ulp+0x48>)
 800d0da:	400b      	ands	r3, r1
 800d0dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	dd02      	ble.n	800d0ea <__ulp+0x12>
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4770      	bx	lr
 800d0ea:	425b      	negs	r3, r3
 800d0ec:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d0f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d0f4:	f04f 0000 	mov.w	r0, #0
 800d0f8:	f04f 0100 	mov.w	r1, #0
 800d0fc:	da04      	bge.n	800d108 <__ulp+0x30>
 800d0fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d102:	fa43 f102 	asr.w	r1, r3, r2
 800d106:	4770      	bx	lr
 800d108:	f1a2 0314 	sub.w	r3, r2, #20
 800d10c:	2b1e      	cmp	r3, #30
 800d10e:	bfda      	itte	le
 800d110:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d114:	fa22 f303 	lsrle.w	r3, r2, r3
 800d118:	2301      	movgt	r3, #1
 800d11a:	4618      	mov	r0, r3
 800d11c:	4770      	bx	lr
 800d11e:	bf00      	nop
 800d120:	7ff00000 	.word	0x7ff00000

0800d124 <__b2d>:
 800d124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d128:	6907      	ldr	r7, [r0, #16]
 800d12a:	f100 0914 	add.w	r9, r0, #20
 800d12e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d132:	f1a7 0804 	sub.w	r8, r7, #4
 800d136:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d13a:	4630      	mov	r0, r6
 800d13c:	f7ff fd56 	bl	800cbec <__hi0bits>
 800d140:	f1c0 0320 	rsb	r3, r0, #32
 800d144:	280a      	cmp	r0, #10
 800d146:	600b      	str	r3, [r1, #0]
 800d148:	491f      	ldr	r1, [pc, #124]	; (800d1c8 <__b2d+0xa4>)
 800d14a:	dc17      	bgt.n	800d17c <__b2d+0x58>
 800d14c:	f1c0 0c0b 	rsb	ip, r0, #11
 800d150:	45c1      	cmp	r9, r8
 800d152:	fa26 f30c 	lsr.w	r3, r6, ip
 800d156:	bf38      	it	cc
 800d158:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d15c:	ea43 0501 	orr.w	r5, r3, r1
 800d160:	bf28      	it	cs
 800d162:	2200      	movcs	r2, #0
 800d164:	f100 0315 	add.w	r3, r0, #21
 800d168:	fa06 f303 	lsl.w	r3, r6, r3
 800d16c:	fa22 f20c 	lsr.w	r2, r2, ip
 800d170:	ea43 0402 	orr.w	r4, r3, r2
 800d174:	4620      	mov	r0, r4
 800d176:	4629      	mov	r1, r5
 800d178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d17c:	45c1      	cmp	r9, r8
 800d17e:	bf3a      	itte	cc
 800d180:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d184:	f1a7 0808 	subcc.w	r8, r7, #8
 800d188:	2200      	movcs	r2, #0
 800d18a:	f1b0 030b 	subs.w	r3, r0, #11
 800d18e:	d016      	beq.n	800d1be <__b2d+0x9a>
 800d190:	f1c3 0720 	rsb	r7, r3, #32
 800d194:	fa22 f107 	lsr.w	r1, r2, r7
 800d198:	45c8      	cmp	r8, r9
 800d19a:	fa06 f603 	lsl.w	r6, r6, r3
 800d19e:	ea46 0601 	orr.w	r6, r6, r1
 800d1a2:	bf8c      	ite	hi
 800d1a4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d1a8:	2100      	movls	r1, #0
 800d1aa:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d1ae:	fa02 f003 	lsl.w	r0, r2, r3
 800d1b2:	40f9      	lsrs	r1, r7
 800d1b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d1b8:	ea40 0401 	orr.w	r4, r0, r1
 800d1bc:	e7da      	b.n	800d174 <__b2d+0x50>
 800d1be:	ea46 0501 	orr.w	r5, r6, r1
 800d1c2:	4614      	mov	r4, r2
 800d1c4:	e7d6      	b.n	800d174 <__b2d+0x50>
 800d1c6:	bf00      	nop
 800d1c8:	3ff00000 	.word	0x3ff00000

0800d1cc <__d2b>:
 800d1cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d1d6:	4690      	mov	r8, r2
 800d1d8:	461d      	mov	r5, r3
 800d1da:	f7ff fc11 	bl	800ca00 <_Balloc>
 800d1de:	4604      	mov	r4, r0
 800d1e0:	b930      	cbnz	r0, 800d1f0 <__d2b+0x24>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	4b25      	ldr	r3, [pc, #148]	; (800d27c <__d2b+0xb0>)
 800d1e6:	4826      	ldr	r0, [pc, #152]	; (800d280 <__d2b+0xb4>)
 800d1e8:	f240 310a 	movw	r1, #778	; 0x30a
 800d1ec:	f000 fc2e 	bl	800da4c <__assert_func>
 800d1f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d1f4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d1f8:	bb2d      	cbnz	r5, 800d246 <__d2b+0x7a>
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	f1b8 0300 	subs.w	r3, r8, #0
 800d200:	d026      	beq.n	800d250 <__d2b+0x84>
 800d202:	4668      	mov	r0, sp
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	f7ff fd11 	bl	800cc2c <__lo0bits>
 800d20a:	9900      	ldr	r1, [sp, #0]
 800d20c:	b1f0      	cbz	r0, 800d24c <__d2b+0x80>
 800d20e:	9a01      	ldr	r2, [sp, #4]
 800d210:	f1c0 0320 	rsb	r3, r0, #32
 800d214:	fa02 f303 	lsl.w	r3, r2, r3
 800d218:	430b      	orrs	r3, r1
 800d21a:	40c2      	lsrs	r2, r0
 800d21c:	6163      	str	r3, [r4, #20]
 800d21e:	9201      	str	r2, [sp, #4]
 800d220:	9b01      	ldr	r3, [sp, #4]
 800d222:	61a3      	str	r3, [r4, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	bf14      	ite	ne
 800d228:	2102      	movne	r1, #2
 800d22a:	2101      	moveq	r1, #1
 800d22c:	6121      	str	r1, [r4, #16]
 800d22e:	b1c5      	cbz	r5, 800d262 <__d2b+0x96>
 800d230:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d234:	4405      	add	r5, r0
 800d236:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d23a:	603d      	str	r5, [r7, #0]
 800d23c:	6030      	str	r0, [r6, #0]
 800d23e:	4620      	mov	r0, r4
 800d240:	b002      	add	sp, #8
 800d242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d24a:	e7d6      	b.n	800d1fa <__d2b+0x2e>
 800d24c:	6161      	str	r1, [r4, #20]
 800d24e:	e7e7      	b.n	800d220 <__d2b+0x54>
 800d250:	a801      	add	r0, sp, #4
 800d252:	f7ff fceb 	bl	800cc2c <__lo0bits>
 800d256:	9b01      	ldr	r3, [sp, #4]
 800d258:	6163      	str	r3, [r4, #20]
 800d25a:	2101      	movs	r1, #1
 800d25c:	6121      	str	r1, [r4, #16]
 800d25e:	3020      	adds	r0, #32
 800d260:	e7e5      	b.n	800d22e <__d2b+0x62>
 800d262:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d266:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d26a:	6038      	str	r0, [r7, #0]
 800d26c:	6918      	ldr	r0, [r3, #16]
 800d26e:	f7ff fcbd 	bl	800cbec <__hi0bits>
 800d272:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d276:	6031      	str	r1, [r6, #0]
 800d278:	e7e1      	b.n	800d23e <__d2b+0x72>
 800d27a:	bf00      	nop
 800d27c:	0800ebc4 	.word	0x0800ebc4
 800d280:	0800ecb8 	.word	0x0800ecb8

0800d284 <__ratio>:
 800d284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d288:	4688      	mov	r8, r1
 800d28a:	4669      	mov	r1, sp
 800d28c:	4681      	mov	r9, r0
 800d28e:	f7ff ff49 	bl	800d124 <__b2d>
 800d292:	460f      	mov	r7, r1
 800d294:	4604      	mov	r4, r0
 800d296:	460d      	mov	r5, r1
 800d298:	4640      	mov	r0, r8
 800d29a:	a901      	add	r1, sp, #4
 800d29c:	f7ff ff42 	bl	800d124 <__b2d>
 800d2a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d2a8:	eba3 0c02 	sub.w	ip, r3, r2
 800d2ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2b0:	1a9b      	subs	r3, r3, r2
 800d2b2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bfd5      	itete	le
 800d2ba:	460a      	movle	r2, r1
 800d2bc:	462a      	movgt	r2, r5
 800d2be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d2c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d2c6:	468b      	mov	fp, r1
 800d2c8:	bfd8      	it	le
 800d2ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d2ce:	465b      	mov	r3, fp
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	4639      	mov	r1, r7
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f7f3 faa1 	bl	800081c <__aeabi_ddiv>
 800d2da:	b003      	add	sp, #12
 800d2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d2e0 <__copybits>:
 800d2e0:	3901      	subs	r1, #1
 800d2e2:	b570      	push	{r4, r5, r6, lr}
 800d2e4:	1149      	asrs	r1, r1, #5
 800d2e6:	6914      	ldr	r4, [r2, #16]
 800d2e8:	3101      	adds	r1, #1
 800d2ea:	f102 0314 	add.w	r3, r2, #20
 800d2ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d2f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d2f6:	1f05      	subs	r5, r0, #4
 800d2f8:	42a3      	cmp	r3, r4
 800d2fa:	d30c      	bcc.n	800d316 <__copybits+0x36>
 800d2fc:	1aa3      	subs	r3, r4, r2
 800d2fe:	3b11      	subs	r3, #17
 800d300:	f023 0303 	bic.w	r3, r3, #3
 800d304:	3211      	adds	r2, #17
 800d306:	42a2      	cmp	r2, r4
 800d308:	bf88      	it	hi
 800d30a:	2300      	movhi	r3, #0
 800d30c:	4418      	add	r0, r3
 800d30e:	2300      	movs	r3, #0
 800d310:	4288      	cmp	r0, r1
 800d312:	d305      	bcc.n	800d320 <__copybits+0x40>
 800d314:	bd70      	pop	{r4, r5, r6, pc}
 800d316:	f853 6b04 	ldr.w	r6, [r3], #4
 800d31a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d31e:	e7eb      	b.n	800d2f8 <__copybits+0x18>
 800d320:	f840 3b04 	str.w	r3, [r0], #4
 800d324:	e7f4      	b.n	800d310 <__copybits+0x30>

0800d326 <__any_on>:
 800d326:	f100 0214 	add.w	r2, r0, #20
 800d32a:	6900      	ldr	r0, [r0, #16]
 800d32c:	114b      	asrs	r3, r1, #5
 800d32e:	4298      	cmp	r0, r3
 800d330:	b510      	push	{r4, lr}
 800d332:	db11      	blt.n	800d358 <__any_on+0x32>
 800d334:	dd0a      	ble.n	800d34c <__any_on+0x26>
 800d336:	f011 011f 	ands.w	r1, r1, #31
 800d33a:	d007      	beq.n	800d34c <__any_on+0x26>
 800d33c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d340:	fa24 f001 	lsr.w	r0, r4, r1
 800d344:	fa00 f101 	lsl.w	r1, r0, r1
 800d348:	428c      	cmp	r4, r1
 800d34a:	d10b      	bne.n	800d364 <__any_on+0x3e>
 800d34c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d350:	4293      	cmp	r3, r2
 800d352:	d803      	bhi.n	800d35c <__any_on+0x36>
 800d354:	2000      	movs	r0, #0
 800d356:	bd10      	pop	{r4, pc}
 800d358:	4603      	mov	r3, r0
 800d35a:	e7f7      	b.n	800d34c <__any_on+0x26>
 800d35c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d360:	2900      	cmp	r1, #0
 800d362:	d0f5      	beq.n	800d350 <__any_on+0x2a>
 800d364:	2001      	movs	r0, #1
 800d366:	e7f6      	b.n	800d356 <__any_on+0x30>

0800d368 <_calloc_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	fb02 f501 	mul.w	r5, r2, r1
 800d36e:	4629      	mov	r1, r5
 800d370:	f7fb ff3c 	bl	80091ec <_malloc_r>
 800d374:	4604      	mov	r4, r0
 800d376:	b118      	cbz	r0, 800d380 <_calloc_r+0x18>
 800d378:	462a      	mov	r2, r5
 800d37a:	2100      	movs	r1, #0
 800d37c:	f7fb fee0 	bl	8009140 <memset>
 800d380:	4620      	mov	r0, r4
 800d382:	bd38      	pop	{r3, r4, r5, pc}

0800d384 <__ssputs_r>:
 800d384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d388:	688e      	ldr	r6, [r1, #8]
 800d38a:	429e      	cmp	r6, r3
 800d38c:	4682      	mov	sl, r0
 800d38e:	460c      	mov	r4, r1
 800d390:	4690      	mov	r8, r2
 800d392:	461f      	mov	r7, r3
 800d394:	d838      	bhi.n	800d408 <__ssputs_r+0x84>
 800d396:	898a      	ldrh	r2, [r1, #12]
 800d398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d39c:	d032      	beq.n	800d404 <__ssputs_r+0x80>
 800d39e:	6825      	ldr	r5, [r4, #0]
 800d3a0:	6909      	ldr	r1, [r1, #16]
 800d3a2:	eba5 0901 	sub.w	r9, r5, r1
 800d3a6:	6965      	ldr	r5, [r4, #20]
 800d3a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	444b      	add	r3, r9
 800d3b4:	106d      	asrs	r5, r5, #1
 800d3b6:	429d      	cmp	r5, r3
 800d3b8:	bf38      	it	cc
 800d3ba:	461d      	movcc	r5, r3
 800d3bc:	0553      	lsls	r3, r2, #21
 800d3be:	d531      	bpl.n	800d424 <__ssputs_r+0xa0>
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	f7fb ff13 	bl	80091ec <_malloc_r>
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	b950      	cbnz	r0, 800d3e0 <__ssputs_r+0x5c>
 800d3ca:	230c      	movs	r3, #12
 800d3cc:	f8ca 3000 	str.w	r3, [sl]
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3d6:	81a3      	strh	r3, [r4, #12]
 800d3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e0:	6921      	ldr	r1, [r4, #16]
 800d3e2:	464a      	mov	r2, r9
 800d3e4:	f7fb fe9e 	bl	8009124 <memcpy>
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f2:	81a3      	strh	r3, [r4, #12]
 800d3f4:	6126      	str	r6, [r4, #16]
 800d3f6:	6165      	str	r5, [r4, #20]
 800d3f8:	444e      	add	r6, r9
 800d3fa:	eba5 0509 	sub.w	r5, r5, r9
 800d3fe:	6026      	str	r6, [r4, #0]
 800d400:	60a5      	str	r5, [r4, #8]
 800d402:	463e      	mov	r6, r7
 800d404:	42be      	cmp	r6, r7
 800d406:	d900      	bls.n	800d40a <__ssputs_r+0x86>
 800d408:	463e      	mov	r6, r7
 800d40a:	4632      	mov	r2, r6
 800d40c:	6820      	ldr	r0, [r4, #0]
 800d40e:	4641      	mov	r1, r8
 800d410:	f000 fb90 	bl	800db34 <memmove>
 800d414:	68a3      	ldr	r3, [r4, #8]
 800d416:	6822      	ldr	r2, [r4, #0]
 800d418:	1b9b      	subs	r3, r3, r6
 800d41a:	4432      	add	r2, r6
 800d41c:	60a3      	str	r3, [r4, #8]
 800d41e:	6022      	str	r2, [r4, #0]
 800d420:	2000      	movs	r0, #0
 800d422:	e7db      	b.n	800d3dc <__ssputs_r+0x58>
 800d424:	462a      	mov	r2, r5
 800d426:	f000 fb9f 	bl	800db68 <_realloc_r>
 800d42a:	4606      	mov	r6, r0
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d1e1      	bne.n	800d3f4 <__ssputs_r+0x70>
 800d430:	6921      	ldr	r1, [r4, #16]
 800d432:	4650      	mov	r0, sl
 800d434:	f7fb fe8c 	bl	8009150 <_free_r>
 800d438:	e7c7      	b.n	800d3ca <__ssputs_r+0x46>
	...

0800d43c <_svfiprintf_r>:
 800d43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d440:	4698      	mov	r8, r3
 800d442:	898b      	ldrh	r3, [r1, #12]
 800d444:	061b      	lsls	r3, r3, #24
 800d446:	b09d      	sub	sp, #116	; 0x74
 800d448:	4607      	mov	r7, r0
 800d44a:	460d      	mov	r5, r1
 800d44c:	4614      	mov	r4, r2
 800d44e:	d50e      	bpl.n	800d46e <_svfiprintf_r+0x32>
 800d450:	690b      	ldr	r3, [r1, #16]
 800d452:	b963      	cbnz	r3, 800d46e <_svfiprintf_r+0x32>
 800d454:	2140      	movs	r1, #64	; 0x40
 800d456:	f7fb fec9 	bl	80091ec <_malloc_r>
 800d45a:	6028      	str	r0, [r5, #0]
 800d45c:	6128      	str	r0, [r5, #16]
 800d45e:	b920      	cbnz	r0, 800d46a <_svfiprintf_r+0x2e>
 800d460:	230c      	movs	r3, #12
 800d462:	603b      	str	r3, [r7, #0]
 800d464:	f04f 30ff 	mov.w	r0, #4294967295
 800d468:	e0d1      	b.n	800d60e <_svfiprintf_r+0x1d2>
 800d46a:	2340      	movs	r3, #64	; 0x40
 800d46c:	616b      	str	r3, [r5, #20]
 800d46e:	2300      	movs	r3, #0
 800d470:	9309      	str	r3, [sp, #36]	; 0x24
 800d472:	2320      	movs	r3, #32
 800d474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d478:	f8cd 800c 	str.w	r8, [sp, #12]
 800d47c:	2330      	movs	r3, #48	; 0x30
 800d47e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d628 <_svfiprintf_r+0x1ec>
 800d482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d486:	f04f 0901 	mov.w	r9, #1
 800d48a:	4623      	mov	r3, r4
 800d48c:	469a      	mov	sl, r3
 800d48e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d492:	b10a      	cbz	r2, 800d498 <_svfiprintf_r+0x5c>
 800d494:	2a25      	cmp	r2, #37	; 0x25
 800d496:	d1f9      	bne.n	800d48c <_svfiprintf_r+0x50>
 800d498:	ebba 0b04 	subs.w	fp, sl, r4
 800d49c:	d00b      	beq.n	800d4b6 <_svfiprintf_r+0x7a>
 800d49e:	465b      	mov	r3, fp
 800d4a0:	4622      	mov	r2, r4
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	f7ff ff6d 	bl	800d384 <__ssputs_r>
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	f000 80aa 	beq.w	800d604 <_svfiprintf_r+0x1c8>
 800d4b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4b2:	445a      	add	r2, fp
 800d4b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d4b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f000 80a2 	beq.w	800d604 <_svfiprintf_r+0x1c8>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4ca:	f10a 0a01 	add.w	sl, sl, #1
 800d4ce:	9304      	str	r3, [sp, #16]
 800d4d0:	9307      	str	r3, [sp, #28]
 800d4d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4d6:	931a      	str	r3, [sp, #104]	; 0x68
 800d4d8:	4654      	mov	r4, sl
 800d4da:	2205      	movs	r2, #5
 800d4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4e0:	4851      	ldr	r0, [pc, #324]	; (800d628 <_svfiprintf_r+0x1ec>)
 800d4e2:	f7f2 fe65 	bl	80001b0 <memchr>
 800d4e6:	9a04      	ldr	r2, [sp, #16]
 800d4e8:	b9d8      	cbnz	r0, 800d522 <_svfiprintf_r+0xe6>
 800d4ea:	06d0      	lsls	r0, r2, #27
 800d4ec:	bf44      	itt	mi
 800d4ee:	2320      	movmi	r3, #32
 800d4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4f4:	0711      	lsls	r1, r2, #28
 800d4f6:	bf44      	itt	mi
 800d4f8:	232b      	movmi	r3, #43	; 0x2b
 800d4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d502:	2b2a      	cmp	r3, #42	; 0x2a
 800d504:	d015      	beq.n	800d532 <_svfiprintf_r+0xf6>
 800d506:	9a07      	ldr	r2, [sp, #28]
 800d508:	4654      	mov	r4, sl
 800d50a:	2000      	movs	r0, #0
 800d50c:	f04f 0c0a 	mov.w	ip, #10
 800d510:	4621      	mov	r1, r4
 800d512:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d516:	3b30      	subs	r3, #48	; 0x30
 800d518:	2b09      	cmp	r3, #9
 800d51a:	d94e      	bls.n	800d5ba <_svfiprintf_r+0x17e>
 800d51c:	b1b0      	cbz	r0, 800d54c <_svfiprintf_r+0x110>
 800d51e:	9207      	str	r2, [sp, #28]
 800d520:	e014      	b.n	800d54c <_svfiprintf_r+0x110>
 800d522:	eba0 0308 	sub.w	r3, r0, r8
 800d526:	fa09 f303 	lsl.w	r3, r9, r3
 800d52a:	4313      	orrs	r3, r2
 800d52c:	9304      	str	r3, [sp, #16]
 800d52e:	46a2      	mov	sl, r4
 800d530:	e7d2      	b.n	800d4d8 <_svfiprintf_r+0x9c>
 800d532:	9b03      	ldr	r3, [sp, #12]
 800d534:	1d19      	adds	r1, r3, #4
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	9103      	str	r1, [sp, #12]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	bfbb      	ittet	lt
 800d53e:	425b      	neglt	r3, r3
 800d540:	f042 0202 	orrlt.w	r2, r2, #2
 800d544:	9307      	strge	r3, [sp, #28]
 800d546:	9307      	strlt	r3, [sp, #28]
 800d548:	bfb8      	it	lt
 800d54a:	9204      	strlt	r2, [sp, #16]
 800d54c:	7823      	ldrb	r3, [r4, #0]
 800d54e:	2b2e      	cmp	r3, #46	; 0x2e
 800d550:	d10c      	bne.n	800d56c <_svfiprintf_r+0x130>
 800d552:	7863      	ldrb	r3, [r4, #1]
 800d554:	2b2a      	cmp	r3, #42	; 0x2a
 800d556:	d135      	bne.n	800d5c4 <_svfiprintf_r+0x188>
 800d558:	9b03      	ldr	r3, [sp, #12]
 800d55a:	1d1a      	adds	r2, r3, #4
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	9203      	str	r2, [sp, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	bfb8      	it	lt
 800d564:	f04f 33ff 	movlt.w	r3, #4294967295
 800d568:	3402      	adds	r4, #2
 800d56a:	9305      	str	r3, [sp, #20]
 800d56c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d638 <_svfiprintf_r+0x1fc>
 800d570:	7821      	ldrb	r1, [r4, #0]
 800d572:	2203      	movs	r2, #3
 800d574:	4650      	mov	r0, sl
 800d576:	f7f2 fe1b 	bl	80001b0 <memchr>
 800d57a:	b140      	cbz	r0, 800d58e <_svfiprintf_r+0x152>
 800d57c:	2340      	movs	r3, #64	; 0x40
 800d57e:	eba0 000a 	sub.w	r0, r0, sl
 800d582:	fa03 f000 	lsl.w	r0, r3, r0
 800d586:	9b04      	ldr	r3, [sp, #16]
 800d588:	4303      	orrs	r3, r0
 800d58a:	3401      	adds	r4, #1
 800d58c:	9304      	str	r3, [sp, #16]
 800d58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d592:	4826      	ldr	r0, [pc, #152]	; (800d62c <_svfiprintf_r+0x1f0>)
 800d594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d598:	2206      	movs	r2, #6
 800d59a:	f7f2 fe09 	bl	80001b0 <memchr>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d038      	beq.n	800d614 <_svfiprintf_r+0x1d8>
 800d5a2:	4b23      	ldr	r3, [pc, #140]	; (800d630 <_svfiprintf_r+0x1f4>)
 800d5a4:	bb1b      	cbnz	r3, 800d5ee <_svfiprintf_r+0x1b2>
 800d5a6:	9b03      	ldr	r3, [sp, #12]
 800d5a8:	3307      	adds	r3, #7
 800d5aa:	f023 0307 	bic.w	r3, r3, #7
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	9303      	str	r3, [sp, #12]
 800d5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b4:	4433      	add	r3, r6
 800d5b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b8:	e767      	b.n	800d48a <_svfiprintf_r+0x4e>
 800d5ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5be:	460c      	mov	r4, r1
 800d5c0:	2001      	movs	r0, #1
 800d5c2:	e7a5      	b.n	800d510 <_svfiprintf_r+0xd4>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	3401      	adds	r4, #1
 800d5c8:	9305      	str	r3, [sp, #20]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	f04f 0c0a 	mov.w	ip, #10
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5d6:	3a30      	subs	r2, #48	; 0x30
 800d5d8:	2a09      	cmp	r2, #9
 800d5da:	d903      	bls.n	800d5e4 <_svfiprintf_r+0x1a8>
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d0c5      	beq.n	800d56c <_svfiprintf_r+0x130>
 800d5e0:	9105      	str	r1, [sp, #20]
 800d5e2:	e7c3      	b.n	800d56c <_svfiprintf_r+0x130>
 800d5e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e7f0      	b.n	800d5d0 <_svfiprintf_r+0x194>
 800d5ee:	ab03      	add	r3, sp, #12
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	462a      	mov	r2, r5
 800d5f4:	4b0f      	ldr	r3, [pc, #60]	; (800d634 <_svfiprintf_r+0x1f8>)
 800d5f6:	a904      	add	r1, sp, #16
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	f7fb feef 	bl	80093dc <_printf_float>
 800d5fe:	1c42      	adds	r2, r0, #1
 800d600:	4606      	mov	r6, r0
 800d602:	d1d6      	bne.n	800d5b2 <_svfiprintf_r+0x176>
 800d604:	89ab      	ldrh	r3, [r5, #12]
 800d606:	065b      	lsls	r3, r3, #25
 800d608:	f53f af2c 	bmi.w	800d464 <_svfiprintf_r+0x28>
 800d60c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d60e:	b01d      	add	sp, #116	; 0x74
 800d610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d614:	ab03      	add	r3, sp, #12
 800d616:	9300      	str	r3, [sp, #0]
 800d618:	462a      	mov	r2, r5
 800d61a:	4b06      	ldr	r3, [pc, #24]	; (800d634 <_svfiprintf_r+0x1f8>)
 800d61c:	a904      	add	r1, sp, #16
 800d61e:	4638      	mov	r0, r7
 800d620:	f7fc f974 	bl	800990c <_printf_i>
 800d624:	e7eb      	b.n	800d5fe <_svfiprintf_r+0x1c2>
 800d626:	bf00      	nop
 800d628:	0800ee14 	.word	0x0800ee14
 800d62c:	0800ee1e 	.word	0x0800ee1e
 800d630:	080093dd 	.word	0x080093dd
 800d634:	0800d385 	.word	0x0800d385
 800d638:	0800ee1a 	.word	0x0800ee1a

0800d63c <__sfputc_r>:
 800d63c:	6893      	ldr	r3, [r2, #8]
 800d63e:	3b01      	subs	r3, #1
 800d640:	2b00      	cmp	r3, #0
 800d642:	b410      	push	{r4}
 800d644:	6093      	str	r3, [r2, #8]
 800d646:	da07      	bge.n	800d658 <__sfputc_r+0x1c>
 800d648:	6994      	ldr	r4, [r2, #24]
 800d64a:	42a3      	cmp	r3, r4
 800d64c:	db01      	blt.n	800d652 <__sfputc_r+0x16>
 800d64e:	290a      	cmp	r1, #10
 800d650:	d102      	bne.n	800d658 <__sfputc_r+0x1c>
 800d652:	bc10      	pop	{r4}
 800d654:	f7fd bca6 	b.w	800afa4 <__swbuf_r>
 800d658:	6813      	ldr	r3, [r2, #0]
 800d65a:	1c58      	adds	r0, r3, #1
 800d65c:	6010      	str	r0, [r2, #0]
 800d65e:	7019      	strb	r1, [r3, #0]
 800d660:	4608      	mov	r0, r1
 800d662:	bc10      	pop	{r4}
 800d664:	4770      	bx	lr

0800d666 <__sfputs_r>:
 800d666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d668:	4606      	mov	r6, r0
 800d66a:	460f      	mov	r7, r1
 800d66c:	4614      	mov	r4, r2
 800d66e:	18d5      	adds	r5, r2, r3
 800d670:	42ac      	cmp	r4, r5
 800d672:	d101      	bne.n	800d678 <__sfputs_r+0x12>
 800d674:	2000      	movs	r0, #0
 800d676:	e007      	b.n	800d688 <__sfputs_r+0x22>
 800d678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67c:	463a      	mov	r2, r7
 800d67e:	4630      	mov	r0, r6
 800d680:	f7ff ffdc 	bl	800d63c <__sfputc_r>
 800d684:	1c43      	adds	r3, r0, #1
 800d686:	d1f3      	bne.n	800d670 <__sfputs_r+0xa>
 800d688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d68c <_vfiprintf_r>:
 800d68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d690:	460d      	mov	r5, r1
 800d692:	b09d      	sub	sp, #116	; 0x74
 800d694:	4614      	mov	r4, r2
 800d696:	4698      	mov	r8, r3
 800d698:	4606      	mov	r6, r0
 800d69a:	b118      	cbz	r0, 800d6a4 <_vfiprintf_r+0x18>
 800d69c:	6983      	ldr	r3, [r0, #24]
 800d69e:	b90b      	cbnz	r3, 800d6a4 <_vfiprintf_r+0x18>
 800d6a0:	f7fe fd24 	bl	800c0ec <__sinit>
 800d6a4:	4b89      	ldr	r3, [pc, #548]	; (800d8cc <_vfiprintf_r+0x240>)
 800d6a6:	429d      	cmp	r5, r3
 800d6a8:	d11b      	bne.n	800d6e2 <_vfiprintf_r+0x56>
 800d6aa:	6875      	ldr	r5, [r6, #4]
 800d6ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6ae:	07d9      	lsls	r1, r3, #31
 800d6b0:	d405      	bmi.n	800d6be <_vfiprintf_r+0x32>
 800d6b2:	89ab      	ldrh	r3, [r5, #12]
 800d6b4:	059a      	lsls	r2, r3, #22
 800d6b6:	d402      	bmi.n	800d6be <_vfiprintf_r+0x32>
 800d6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ba:	f7ff f91c 	bl	800c8f6 <__retarget_lock_acquire_recursive>
 800d6be:	89ab      	ldrh	r3, [r5, #12]
 800d6c0:	071b      	lsls	r3, r3, #28
 800d6c2:	d501      	bpl.n	800d6c8 <_vfiprintf_r+0x3c>
 800d6c4:	692b      	ldr	r3, [r5, #16]
 800d6c6:	b9eb      	cbnz	r3, 800d704 <_vfiprintf_r+0x78>
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f7fd fcce 	bl	800b06c <__swsetup_r>
 800d6d0:	b1c0      	cbz	r0, 800d704 <_vfiprintf_r+0x78>
 800d6d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6d4:	07dc      	lsls	r4, r3, #31
 800d6d6:	d50e      	bpl.n	800d6f6 <_vfiprintf_r+0x6a>
 800d6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6dc:	b01d      	add	sp, #116	; 0x74
 800d6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e2:	4b7b      	ldr	r3, [pc, #492]	; (800d8d0 <_vfiprintf_r+0x244>)
 800d6e4:	429d      	cmp	r5, r3
 800d6e6:	d101      	bne.n	800d6ec <_vfiprintf_r+0x60>
 800d6e8:	68b5      	ldr	r5, [r6, #8]
 800d6ea:	e7df      	b.n	800d6ac <_vfiprintf_r+0x20>
 800d6ec:	4b79      	ldr	r3, [pc, #484]	; (800d8d4 <_vfiprintf_r+0x248>)
 800d6ee:	429d      	cmp	r5, r3
 800d6f0:	bf08      	it	eq
 800d6f2:	68f5      	ldreq	r5, [r6, #12]
 800d6f4:	e7da      	b.n	800d6ac <_vfiprintf_r+0x20>
 800d6f6:	89ab      	ldrh	r3, [r5, #12]
 800d6f8:	0598      	lsls	r0, r3, #22
 800d6fa:	d4ed      	bmi.n	800d6d8 <_vfiprintf_r+0x4c>
 800d6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6fe:	f7ff f8fb 	bl	800c8f8 <__retarget_lock_release_recursive>
 800d702:	e7e9      	b.n	800d6d8 <_vfiprintf_r+0x4c>
 800d704:	2300      	movs	r3, #0
 800d706:	9309      	str	r3, [sp, #36]	; 0x24
 800d708:	2320      	movs	r3, #32
 800d70a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d70e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d712:	2330      	movs	r3, #48	; 0x30
 800d714:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d8d8 <_vfiprintf_r+0x24c>
 800d718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d71c:	f04f 0901 	mov.w	r9, #1
 800d720:	4623      	mov	r3, r4
 800d722:	469a      	mov	sl, r3
 800d724:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d728:	b10a      	cbz	r2, 800d72e <_vfiprintf_r+0xa2>
 800d72a:	2a25      	cmp	r2, #37	; 0x25
 800d72c:	d1f9      	bne.n	800d722 <_vfiprintf_r+0x96>
 800d72e:	ebba 0b04 	subs.w	fp, sl, r4
 800d732:	d00b      	beq.n	800d74c <_vfiprintf_r+0xc0>
 800d734:	465b      	mov	r3, fp
 800d736:	4622      	mov	r2, r4
 800d738:	4629      	mov	r1, r5
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7ff ff93 	bl	800d666 <__sfputs_r>
 800d740:	3001      	adds	r0, #1
 800d742:	f000 80aa 	beq.w	800d89a <_vfiprintf_r+0x20e>
 800d746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d748:	445a      	add	r2, fp
 800d74a:	9209      	str	r2, [sp, #36]	; 0x24
 800d74c:	f89a 3000 	ldrb.w	r3, [sl]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 80a2 	beq.w	800d89a <_vfiprintf_r+0x20e>
 800d756:	2300      	movs	r3, #0
 800d758:	f04f 32ff 	mov.w	r2, #4294967295
 800d75c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d760:	f10a 0a01 	add.w	sl, sl, #1
 800d764:	9304      	str	r3, [sp, #16]
 800d766:	9307      	str	r3, [sp, #28]
 800d768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d76c:	931a      	str	r3, [sp, #104]	; 0x68
 800d76e:	4654      	mov	r4, sl
 800d770:	2205      	movs	r2, #5
 800d772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d776:	4858      	ldr	r0, [pc, #352]	; (800d8d8 <_vfiprintf_r+0x24c>)
 800d778:	f7f2 fd1a 	bl	80001b0 <memchr>
 800d77c:	9a04      	ldr	r2, [sp, #16]
 800d77e:	b9d8      	cbnz	r0, 800d7b8 <_vfiprintf_r+0x12c>
 800d780:	06d1      	lsls	r1, r2, #27
 800d782:	bf44      	itt	mi
 800d784:	2320      	movmi	r3, #32
 800d786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d78a:	0713      	lsls	r3, r2, #28
 800d78c:	bf44      	itt	mi
 800d78e:	232b      	movmi	r3, #43	; 0x2b
 800d790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d794:	f89a 3000 	ldrb.w	r3, [sl]
 800d798:	2b2a      	cmp	r3, #42	; 0x2a
 800d79a:	d015      	beq.n	800d7c8 <_vfiprintf_r+0x13c>
 800d79c:	9a07      	ldr	r2, [sp, #28]
 800d79e:	4654      	mov	r4, sl
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	f04f 0c0a 	mov.w	ip, #10
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7ac:	3b30      	subs	r3, #48	; 0x30
 800d7ae:	2b09      	cmp	r3, #9
 800d7b0:	d94e      	bls.n	800d850 <_vfiprintf_r+0x1c4>
 800d7b2:	b1b0      	cbz	r0, 800d7e2 <_vfiprintf_r+0x156>
 800d7b4:	9207      	str	r2, [sp, #28]
 800d7b6:	e014      	b.n	800d7e2 <_vfiprintf_r+0x156>
 800d7b8:	eba0 0308 	sub.w	r3, r0, r8
 800d7bc:	fa09 f303 	lsl.w	r3, r9, r3
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	9304      	str	r3, [sp, #16]
 800d7c4:	46a2      	mov	sl, r4
 800d7c6:	e7d2      	b.n	800d76e <_vfiprintf_r+0xe2>
 800d7c8:	9b03      	ldr	r3, [sp, #12]
 800d7ca:	1d19      	adds	r1, r3, #4
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	9103      	str	r1, [sp, #12]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	bfbb      	ittet	lt
 800d7d4:	425b      	neglt	r3, r3
 800d7d6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7da:	9307      	strge	r3, [sp, #28]
 800d7dc:	9307      	strlt	r3, [sp, #28]
 800d7de:	bfb8      	it	lt
 800d7e0:	9204      	strlt	r2, [sp, #16]
 800d7e2:	7823      	ldrb	r3, [r4, #0]
 800d7e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d7e6:	d10c      	bne.n	800d802 <_vfiprintf_r+0x176>
 800d7e8:	7863      	ldrb	r3, [r4, #1]
 800d7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ec:	d135      	bne.n	800d85a <_vfiprintf_r+0x1ce>
 800d7ee:	9b03      	ldr	r3, [sp, #12]
 800d7f0:	1d1a      	adds	r2, r3, #4
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	9203      	str	r2, [sp, #12]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	bfb8      	it	lt
 800d7fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7fe:	3402      	adds	r4, #2
 800d800:	9305      	str	r3, [sp, #20]
 800d802:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8e8 <_vfiprintf_r+0x25c>
 800d806:	7821      	ldrb	r1, [r4, #0]
 800d808:	2203      	movs	r2, #3
 800d80a:	4650      	mov	r0, sl
 800d80c:	f7f2 fcd0 	bl	80001b0 <memchr>
 800d810:	b140      	cbz	r0, 800d824 <_vfiprintf_r+0x198>
 800d812:	2340      	movs	r3, #64	; 0x40
 800d814:	eba0 000a 	sub.w	r0, r0, sl
 800d818:	fa03 f000 	lsl.w	r0, r3, r0
 800d81c:	9b04      	ldr	r3, [sp, #16]
 800d81e:	4303      	orrs	r3, r0
 800d820:	3401      	adds	r4, #1
 800d822:	9304      	str	r3, [sp, #16]
 800d824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d828:	482c      	ldr	r0, [pc, #176]	; (800d8dc <_vfiprintf_r+0x250>)
 800d82a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d82e:	2206      	movs	r2, #6
 800d830:	f7f2 fcbe 	bl	80001b0 <memchr>
 800d834:	2800      	cmp	r0, #0
 800d836:	d03f      	beq.n	800d8b8 <_vfiprintf_r+0x22c>
 800d838:	4b29      	ldr	r3, [pc, #164]	; (800d8e0 <_vfiprintf_r+0x254>)
 800d83a:	bb1b      	cbnz	r3, 800d884 <_vfiprintf_r+0x1f8>
 800d83c:	9b03      	ldr	r3, [sp, #12]
 800d83e:	3307      	adds	r3, #7
 800d840:	f023 0307 	bic.w	r3, r3, #7
 800d844:	3308      	adds	r3, #8
 800d846:	9303      	str	r3, [sp, #12]
 800d848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d84a:	443b      	add	r3, r7
 800d84c:	9309      	str	r3, [sp, #36]	; 0x24
 800d84e:	e767      	b.n	800d720 <_vfiprintf_r+0x94>
 800d850:	fb0c 3202 	mla	r2, ip, r2, r3
 800d854:	460c      	mov	r4, r1
 800d856:	2001      	movs	r0, #1
 800d858:	e7a5      	b.n	800d7a6 <_vfiprintf_r+0x11a>
 800d85a:	2300      	movs	r3, #0
 800d85c:	3401      	adds	r4, #1
 800d85e:	9305      	str	r3, [sp, #20]
 800d860:	4619      	mov	r1, r3
 800d862:	f04f 0c0a 	mov.w	ip, #10
 800d866:	4620      	mov	r0, r4
 800d868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d86c:	3a30      	subs	r2, #48	; 0x30
 800d86e:	2a09      	cmp	r2, #9
 800d870:	d903      	bls.n	800d87a <_vfiprintf_r+0x1ee>
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0c5      	beq.n	800d802 <_vfiprintf_r+0x176>
 800d876:	9105      	str	r1, [sp, #20]
 800d878:	e7c3      	b.n	800d802 <_vfiprintf_r+0x176>
 800d87a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d87e:	4604      	mov	r4, r0
 800d880:	2301      	movs	r3, #1
 800d882:	e7f0      	b.n	800d866 <_vfiprintf_r+0x1da>
 800d884:	ab03      	add	r3, sp, #12
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	462a      	mov	r2, r5
 800d88a:	4b16      	ldr	r3, [pc, #88]	; (800d8e4 <_vfiprintf_r+0x258>)
 800d88c:	a904      	add	r1, sp, #16
 800d88e:	4630      	mov	r0, r6
 800d890:	f7fb fda4 	bl	80093dc <_printf_float>
 800d894:	4607      	mov	r7, r0
 800d896:	1c78      	adds	r0, r7, #1
 800d898:	d1d6      	bne.n	800d848 <_vfiprintf_r+0x1bc>
 800d89a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d89c:	07d9      	lsls	r1, r3, #31
 800d89e:	d405      	bmi.n	800d8ac <_vfiprintf_r+0x220>
 800d8a0:	89ab      	ldrh	r3, [r5, #12]
 800d8a2:	059a      	lsls	r2, r3, #22
 800d8a4:	d402      	bmi.n	800d8ac <_vfiprintf_r+0x220>
 800d8a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8a8:	f7ff f826 	bl	800c8f8 <__retarget_lock_release_recursive>
 800d8ac:	89ab      	ldrh	r3, [r5, #12]
 800d8ae:	065b      	lsls	r3, r3, #25
 800d8b0:	f53f af12 	bmi.w	800d6d8 <_vfiprintf_r+0x4c>
 800d8b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8b6:	e711      	b.n	800d6dc <_vfiprintf_r+0x50>
 800d8b8:	ab03      	add	r3, sp, #12
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	462a      	mov	r2, r5
 800d8be:	4b09      	ldr	r3, [pc, #36]	; (800d8e4 <_vfiprintf_r+0x258>)
 800d8c0:	a904      	add	r1, sp, #16
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f7fc f822 	bl	800990c <_printf_i>
 800d8c8:	e7e4      	b.n	800d894 <_vfiprintf_r+0x208>
 800d8ca:	bf00      	nop
 800d8cc:	0800ebf8 	.word	0x0800ebf8
 800d8d0:	0800ec18 	.word	0x0800ec18
 800d8d4:	0800ebd8 	.word	0x0800ebd8
 800d8d8:	0800ee14 	.word	0x0800ee14
 800d8dc:	0800ee1e 	.word	0x0800ee1e
 800d8e0:	080093dd 	.word	0x080093dd
 800d8e4:	0800d667 	.word	0x0800d667
 800d8e8:	0800ee1a 	.word	0x0800ee1a

0800d8ec <_putc_r>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	460d      	mov	r5, r1
 800d8f0:	4614      	mov	r4, r2
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	b118      	cbz	r0, 800d8fe <_putc_r+0x12>
 800d8f6:	6983      	ldr	r3, [r0, #24]
 800d8f8:	b90b      	cbnz	r3, 800d8fe <_putc_r+0x12>
 800d8fa:	f7fe fbf7 	bl	800c0ec <__sinit>
 800d8fe:	4b1c      	ldr	r3, [pc, #112]	; (800d970 <_putc_r+0x84>)
 800d900:	429c      	cmp	r4, r3
 800d902:	d124      	bne.n	800d94e <_putc_r+0x62>
 800d904:	6874      	ldr	r4, [r6, #4]
 800d906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d908:	07d8      	lsls	r0, r3, #31
 800d90a:	d405      	bmi.n	800d918 <_putc_r+0x2c>
 800d90c:	89a3      	ldrh	r3, [r4, #12]
 800d90e:	0599      	lsls	r1, r3, #22
 800d910:	d402      	bmi.n	800d918 <_putc_r+0x2c>
 800d912:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d914:	f7fe ffef 	bl	800c8f6 <__retarget_lock_acquire_recursive>
 800d918:	68a3      	ldr	r3, [r4, #8]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	60a3      	str	r3, [r4, #8]
 800d920:	da05      	bge.n	800d92e <_putc_r+0x42>
 800d922:	69a2      	ldr	r2, [r4, #24]
 800d924:	4293      	cmp	r3, r2
 800d926:	db1c      	blt.n	800d962 <_putc_r+0x76>
 800d928:	b2eb      	uxtb	r3, r5
 800d92a:	2b0a      	cmp	r3, #10
 800d92c:	d019      	beq.n	800d962 <_putc_r+0x76>
 800d92e:	6823      	ldr	r3, [r4, #0]
 800d930:	1c5a      	adds	r2, r3, #1
 800d932:	6022      	str	r2, [r4, #0]
 800d934:	701d      	strb	r5, [r3, #0]
 800d936:	b2ed      	uxtb	r5, r5
 800d938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d93a:	07da      	lsls	r2, r3, #31
 800d93c:	d405      	bmi.n	800d94a <_putc_r+0x5e>
 800d93e:	89a3      	ldrh	r3, [r4, #12]
 800d940:	059b      	lsls	r3, r3, #22
 800d942:	d402      	bmi.n	800d94a <_putc_r+0x5e>
 800d944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d946:	f7fe ffd7 	bl	800c8f8 <__retarget_lock_release_recursive>
 800d94a:	4628      	mov	r0, r5
 800d94c:	bd70      	pop	{r4, r5, r6, pc}
 800d94e:	4b09      	ldr	r3, [pc, #36]	; (800d974 <_putc_r+0x88>)
 800d950:	429c      	cmp	r4, r3
 800d952:	d101      	bne.n	800d958 <_putc_r+0x6c>
 800d954:	68b4      	ldr	r4, [r6, #8]
 800d956:	e7d6      	b.n	800d906 <_putc_r+0x1a>
 800d958:	4b07      	ldr	r3, [pc, #28]	; (800d978 <_putc_r+0x8c>)
 800d95a:	429c      	cmp	r4, r3
 800d95c:	bf08      	it	eq
 800d95e:	68f4      	ldreq	r4, [r6, #12]
 800d960:	e7d1      	b.n	800d906 <_putc_r+0x1a>
 800d962:	4629      	mov	r1, r5
 800d964:	4622      	mov	r2, r4
 800d966:	4630      	mov	r0, r6
 800d968:	f7fd fb1c 	bl	800afa4 <__swbuf_r>
 800d96c:	4605      	mov	r5, r0
 800d96e:	e7e3      	b.n	800d938 <_putc_r+0x4c>
 800d970:	0800ebf8 	.word	0x0800ebf8
 800d974:	0800ec18 	.word	0x0800ec18
 800d978:	0800ebd8 	.word	0x0800ebd8

0800d97c <nan>:
 800d97c:	4901      	ldr	r1, [pc, #4]	; (800d984 <nan+0x8>)
 800d97e:	2000      	movs	r0, #0
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop
 800d984:	7ff80000 	.word	0x7ff80000

0800d988 <__sread>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	460c      	mov	r4, r1
 800d98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d990:	f000 f910 	bl	800dbb4 <_read_r>
 800d994:	2800      	cmp	r0, #0
 800d996:	bfab      	itete	ge
 800d998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d99a:	89a3      	ldrhlt	r3, [r4, #12]
 800d99c:	181b      	addge	r3, r3, r0
 800d99e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9a2:	bfac      	ite	ge
 800d9a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9a6:	81a3      	strhlt	r3, [r4, #12]
 800d9a8:	bd10      	pop	{r4, pc}

0800d9aa <__swrite>:
 800d9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ae:	461f      	mov	r7, r3
 800d9b0:	898b      	ldrh	r3, [r1, #12]
 800d9b2:	05db      	lsls	r3, r3, #23
 800d9b4:	4605      	mov	r5, r0
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	4616      	mov	r6, r2
 800d9ba:	d505      	bpl.n	800d9c8 <__swrite+0x1e>
 800d9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f000 f8a4 	bl	800db10 <_lseek_r>
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9d2:	81a3      	strh	r3, [r4, #12]
 800d9d4:	4632      	mov	r2, r6
 800d9d6:	463b      	mov	r3, r7
 800d9d8:	4628      	mov	r0, r5
 800d9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9de:	f7fd bb33 	b.w	800b048 <_write_r>

0800d9e2 <__sseek>:
 800d9e2:	b510      	push	{r4, lr}
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ea:	f000 f891 	bl	800db10 <_lseek_r>
 800d9ee:	1c43      	adds	r3, r0, #1
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	bf15      	itete	ne
 800d9f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d9fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9fe:	81a3      	strheq	r3, [r4, #12]
 800da00:	bf18      	it	ne
 800da02:	81a3      	strhne	r3, [r4, #12]
 800da04:	bd10      	pop	{r4, pc}

0800da06 <__sclose>:
 800da06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da0a:	f000 b83d 	b.w	800da88 <_close_r>

0800da0e <strncmp>:
 800da0e:	b510      	push	{r4, lr}
 800da10:	b16a      	cbz	r2, 800da2e <strncmp+0x20>
 800da12:	3901      	subs	r1, #1
 800da14:	1884      	adds	r4, r0, r2
 800da16:	f810 3b01 	ldrb.w	r3, [r0], #1
 800da1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da1e:	4293      	cmp	r3, r2
 800da20:	d103      	bne.n	800da2a <strncmp+0x1c>
 800da22:	42a0      	cmp	r0, r4
 800da24:	d001      	beq.n	800da2a <strncmp+0x1c>
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1f5      	bne.n	800da16 <strncmp+0x8>
 800da2a:	1a98      	subs	r0, r3, r2
 800da2c:	bd10      	pop	{r4, pc}
 800da2e:	4610      	mov	r0, r2
 800da30:	e7fc      	b.n	800da2c <strncmp+0x1e>

0800da32 <__ascii_wctomb>:
 800da32:	4603      	mov	r3, r0
 800da34:	4608      	mov	r0, r1
 800da36:	b141      	cbz	r1, 800da4a <__ascii_wctomb+0x18>
 800da38:	2aff      	cmp	r2, #255	; 0xff
 800da3a:	d904      	bls.n	800da46 <__ascii_wctomb+0x14>
 800da3c:	228a      	movs	r2, #138	; 0x8a
 800da3e:	601a      	str	r2, [r3, #0]
 800da40:	f04f 30ff 	mov.w	r0, #4294967295
 800da44:	4770      	bx	lr
 800da46:	700a      	strb	r2, [r1, #0]
 800da48:	2001      	movs	r0, #1
 800da4a:	4770      	bx	lr

0800da4c <__assert_func>:
 800da4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da4e:	4614      	mov	r4, r2
 800da50:	461a      	mov	r2, r3
 800da52:	4b09      	ldr	r3, [pc, #36]	; (800da78 <__assert_func+0x2c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4605      	mov	r5, r0
 800da58:	68d8      	ldr	r0, [r3, #12]
 800da5a:	b14c      	cbz	r4, 800da70 <__assert_func+0x24>
 800da5c:	4b07      	ldr	r3, [pc, #28]	; (800da7c <__assert_func+0x30>)
 800da5e:	9100      	str	r1, [sp, #0]
 800da60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da64:	4906      	ldr	r1, [pc, #24]	; (800da80 <__assert_func+0x34>)
 800da66:	462b      	mov	r3, r5
 800da68:	f000 f81e 	bl	800daa8 <fiprintf>
 800da6c:	f000 f8b4 	bl	800dbd8 <abort>
 800da70:	4b04      	ldr	r3, [pc, #16]	; (800da84 <__assert_func+0x38>)
 800da72:	461c      	mov	r4, r3
 800da74:	e7f3      	b.n	800da5e <__assert_func+0x12>
 800da76:	bf00      	nop
 800da78:	20000010 	.word	0x20000010
 800da7c:	0800ee25 	.word	0x0800ee25
 800da80:	0800ee32 	.word	0x0800ee32
 800da84:	0800ee60 	.word	0x0800ee60

0800da88 <_close_r>:
 800da88:	b538      	push	{r3, r4, r5, lr}
 800da8a:	4d06      	ldr	r5, [pc, #24]	; (800daa4 <_close_r+0x1c>)
 800da8c:	2300      	movs	r3, #0
 800da8e:	4604      	mov	r4, r0
 800da90:	4608      	mov	r0, r1
 800da92:	602b      	str	r3, [r5, #0]
 800da94:	f7f4 f866 	bl	8001b64 <_close>
 800da98:	1c43      	adds	r3, r0, #1
 800da9a:	d102      	bne.n	800daa2 <_close_r+0x1a>
 800da9c:	682b      	ldr	r3, [r5, #0]
 800da9e:	b103      	cbz	r3, 800daa2 <_close_r+0x1a>
 800daa0:	6023      	str	r3, [r4, #0]
 800daa2:	bd38      	pop	{r3, r4, r5, pc}
 800daa4:	200005e0 	.word	0x200005e0

0800daa8 <fiprintf>:
 800daa8:	b40e      	push	{r1, r2, r3}
 800daaa:	b503      	push	{r0, r1, lr}
 800daac:	4601      	mov	r1, r0
 800daae:	ab03      	add	r3, sp, #12
 800dab0:	4805      	ldr	r0, [pc, #20]	; (800dac8 <fiprintf+0x20>)
 800dab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dab6:	6800      	ldr	r0, [r0, #0]
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	f7ff fde7 	bl	800d68c <_vfiprintf_r>
 800dabe:	b002      	add	sp, #8
 800dac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dac4:	b003      	add	sp, #12
 800dac6:	4770      	bx	lr
 800dac8:	20000010 	.word	0x20000010

0800dacc <_fstat_r>:
 800dacc:	b538      	push	{r3, r4, r5, lr}
 800dace:	4d07      	ldr	r5, [pc, #28]	; (800daec <_fstat_r+0x20>)
 800dad0:	2300      	movs	r3, #0
 800dad2:	4604      	mov	r4, r0
 800dad4:	4608      	mov	r0, r1
 800dad6:	4611      	mov	r1, r2
 800dad8:	602b      	str	r3, [r5, #0]
 800dada:	f7f4 f84e 	bl	8001b7a <_fstat>
 800dade:	1c43      	adds	r3, r0, #1
 800dae0:	d102      	bne.n	800dae8 <_fstat_r+0x1c>
 800dae2:	682b      	ldr	r3, [r5, #0]
 800dae4:	b103      	cbz	r3, 800dae8 <_fstat_r+0x1c>
 800dae6:	6023      	str	r3, [r4, #0]
 800dae8:	bd38      	pop	{r3, r4, r5, pc}
 800daea:	bf00      	nop
 800daec:	200005e0 	.word	0x200005e0

0800daf0 <_isatty_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	4d06      	ldr	r5, [pc, #24]	; (800db0c <_isatty_r+0x1c>)
 800daf4:	2300      	movs	r3, #0
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	602b      	str	r3, [r5, #0]
 800dafc:	f7f4 f84c 	bl	8001b98 <_isatty>
 800db00:	1c43      	adds	r3, r0, #1
 800db02:	d102      	bne.n	800db0a <_isatty_r+0x1a>
 800db04:	682b      	ldr	r3, [r5, #0]
 800db06:	b103      	cbz	r3, 800db0a <_isatty_r+0x1a>
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	bd38      	pop	{r3, r4, r5, pc}
 800db0c:	200005e0 	.word	0x200005e0

0800db10 <_lseek_r>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	4d07      	ldr	r5, [pc, #28]	; (800db30 <_lseek_r+0x20>)
 800db14:	4604      	mov	r4, r0
 800db16:	4608      	mov	r0, r1
 800db18:	4611      	mov	r1, r2
 800db1a:	2200      	movs	r2, #0
 800db1c:	602a      	str	r2, [r5, #0]
 800db1e:	461a      	mov	r2, r3
 800db20:	f7f4 f844 	bl	8001bac <_lseek>
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	d102      	bne.n	800db2e <_lseek_r+0x1e>
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	b103      	cbz	r3, 800db2e <_lseek_r+0x1e>
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	bd38      	pop	{r3, r4, r5, pc}
 800db30:	200005e0 	.word	0x200005e0

0800db34 <memmove>:
 800db34:	4288      	cmp	r0, r1
 800db36:	b510      	push	{r4, lr}
 800db38:	eb01 0402 	add.w	r4, r1, r2
 800db3c:	d902      	bls.n	800db44 <memmove+0x10>
 800db3e:	4284      	cmp	r4, r0
 800db40:	4623      	mov	r3, r4
 800db42:	d807      	bhi.n	800db54 <memmove+0x20>
 800db44:	1e43      	subs	r3, r0, #1
 800db46:	42a1      	cmp	r1, r4
 800db48:	d008      	beq.n	800db5c <memmove+0x28>
 800db4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db52:	e7f8      	b.n	800db46 <memmove+0x12>
 800db54:	4402      	add	r2, r0
 800db56:	4601      	mov	r1, r0
 800db58:	428a      	cmp	r2, r1
 800db5a:	d100      	bne.n	800db5e <memmove+0x2a>
 800db5c:	bd10      	pop	{r4, pc}
 800db5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db66:	e7f7      	b.n	800db58 <memmove+0x24>

0800db68 <_realloc_r>:
 800db68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db6a:	4607      	mov	r7, r0
 800db6c:	4614      	mov	r4, r2
 800db6e:	460e      	mov	r6, r1
 800db70:	b921      	cbnz	r1, 800db7c <_realloc_r+0x14>
 800db72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800db76:	4611      	mov	r1, r2
 800db78:	f7fb bb38 	b.w	80091ec <_malloc_r>
 800db7c:	b922      	cbnz	r2, 800db88 <_realloc_r+0x20>
 800db7e:	f7fb fae7 	bl	8009150 <_free_r>
 800db82:	4625      	mov	r5, r4
 800db84:	4628      	mov	r0, r5
 800db86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db88:	f000 f82d 	bl	800dbe6 <_malloc_usable_size_r>
 800db8c:	42a0      	cmp	r0, r4
 800db8e:	d20f      	bcs.n	800dbb0 <_realloc_r+0x48>
 800db90:	4621      	mov	r1, r4
 800db92:	4638      	mov	r0, r7
 800db94:	f7fb fb2a 	bl	80091ec <_malloc_r>
 800db98:	4605      	mov	r5, r0
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d0f2      	beq.n	800db84 <_realloc_r+0x1c>
 800db9e:	4631      	mov	r1, r6
 800dba0:	4622      	mov	r2, r4
 800dba2:	f7fb fabf 	bl	8009124 <memcpy>
 800dba6:	4631      	mov	r1, r6
 800dba8:	4638      	mov	r0, r7
 800dbaa:	f7fb fad1 	bl	8009150 <_free_r>
 800dbae:	e7e9      	b.n	800db84 <_realloc_r+0x1c>
 800dbb0:	4635      	mov	r5, r6
 800dbb2:	e7e7      	b.n	800db84 <_realloc_r+0x1c>

0800dbb4 <_read_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	4d07      	ldr	r5, [pc, #28]	; (800dbd4 <_read_r+0x20>)
 800dbb8:	4604      	mov	r4, r0
 800dbba:	4608      	mov	r0, r1
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	602a      	str	r2, [r5, #0]
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	f7f3 ff95 	bl	8001af2 <_read>
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	d102      	bne.n	800dbd2 <_read_r+0x1e>
 800dbcc:	682b      	ldr	r3, [r5, #0]
 800dbce:	b103      	cbz	r3, 800dbd2 <_read_r+0x1e>
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	bd38      	pop	{r3, r4, r5, pc}
 800dbd4:	200005e0 	.word	0x200005e0

0800dbd8 <abort>:
 800dbd8:	b508      	push	{r3, lr}
 800dbda:	2006      	movs	r0, #6
 800dbdc:	f000 f834 	bl	800dc48 <raise>
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	f7f3 ff7c 	bl	8001ade <_exit>

0800dbe6 <_malloc_usable_size_r>:
 800dbe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbea:	1f18      	subs	r0, r3, #4
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	bfbc      	itt	lt
 800dbf0:	580b      	ldrlt	r3, [r1, r0]
 800dbf2:	18c0      	addlt	r0, r0, r3
 800dbf4:	4770      	bx	lr

0800dbf6 <_raise_r>:
 800dbf6:	291f      	cmp	r1, #31
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	460d      	mov	r5, r1
 800dbfe:	d904      	bls.n	800dc0a <_raise_r+0x14>
 800dc00:	2316      	movs	r3, #22
 800dc02:	6003      	str	r3, [r0, #0]
 800dc04:	f04f 30ff 	mov.w	r0, #4294967295
 800dc08:	bd38      	pop	{r3, r4, r5, pc}
 800dc0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc0c:	b112      	cbz	r2, 800dc14 <_raise_r+0x1e>
 800dc0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc12:	b94b      	cbnz	r3, 800dc28 <_raise_r+0x32>
 800dc14:	4620      	mov	r0, r4
 800dc16:	f000 f831 	bl	800dc7c <_getpid_r>
 800dc1a:	462a      	mov	r2, r5
 800dc1c:	4601      	mov	r1, r0
 800dc1e:	4620      	mov	r0, r4
 800dc20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc24:	f000 b818 	b.w	800dc58 <_kill_r>
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d00a      	beq.n	800dc42 <_raise_r+0x4c>
 800dc2c:	1c59      	adds	r1, r3, #1
 800dc2e:	d103      	bne.n	800dc38 <_raise_r+0x42>
 800dc30:	2316      	movs	r3, #22
 800dc32:	6003      	str	r3, [r0, #0]
 800dc34:	2001      	movs	r0, #1
 800dc36:	e7e7      	b.n	800dc08 <_raise_r+0x12>
 800dc38:	2400      	movs	r4, #0
 800dc3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc3e:	4628      	mov	r0, r5
 800dc40:	4798      	blx	r3
 800dc42:	2000      	movs	r0, #0
 800dc44:	e7e0      	b.n	800dc08 <_raise_r+0x12>
	...

0800dc48 <raise>:
 800dc48:	4b02      	ldr	r3, [pc, #8]	; (800dc54 <raise+0xc>)
 800dc4a:	4601      	mov	r1, r0
 800dc4c:	6818      	ldr	r0, [r3, #0]
 800dc4e:	f7ff bfd2 	b.w	800dbf6 <_raise_r>
 800dc52:	bf00      	nop
 800dc54:	20000010 	.word	0x20000010

0800dc58 <_kill_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	4d07      	ldr	r5, [pc, #28]	; (800dc78 <_kill_r+0x20>)
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4604      	mov	r4, r0
 800dc60:	4608      	mov	r0, r1
 800dc62:	4611      	mov	r1, r2
 800dc64:	602b      	str	r3, [r5, #0]
 800dc66:	f7f3 ff2a 	bl	8001abe <_kill>
 800dc6a:	1c43      	adds	r3, r0, #1
 800dc6c:	d102      	bne.n	800dc74 <_kill_r+0x1c>
 800dc6e:	682b      	ldr	r3, [r5, #0]
 800dc70:	b103      	cbz	r3, 800dc74 <_kill_r+0x1c>
 800dc72:	6023      	str	r3, [r4, #0]
 800dc74:	bd38      	pop	{r3, r4, r5, pc}
 800dc76:	bf00      	nop
 800dc78:	200005e0 	.word	0x200005e0

0800dc7c <_getpid_r>:
 800dc7c:	f7f3 bf18 	b.w	8001ab0 <_getpid>

0800dc80 <_init>:
 800dc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc82:	bf00      	nop
 800dc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc86:	bc08      	pop	{r3}
 800dc88:	469e      	mov	lr, r3
 800dc8a:	4770      	bx	lr

0800dc8c <_fini>:
 800dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8e:	bf00      	nop
 800dc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc92:	bc08      	pop	{r3}
 800dc94:	469e      	mov	lr, r3
 800dc96:	4770      	bx	lr
